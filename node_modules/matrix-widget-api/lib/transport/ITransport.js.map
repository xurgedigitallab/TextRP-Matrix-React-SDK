{"version":3,"file":"ITransport.js","names":[],"sources":["../../src/transport/ITransport.ts"],"sourcesContent":["/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from \"events\";\nimport {\n    IWidgetApiAcknowledgeResponseData,\n    IWidgetApiRequest,\n    IWidgetApiRequestData,\n    IWidgetApiResponse,\n    IWidgetApiResponseData,\n    WidgetApiAction,\n} from \"..\";\n\n/**\n * A transport for widget requests/responses. All actions\n * get raised through a \"message\" CustomEvent with detail\n * of the IWidgetApiRequest.\n */\nexport interface ITransport extends EventEmitter {\n    /**\n     * True if the transport is ready to start sending, false otherwise.\n     */\n    readonly ready: boolean;\n\n    /**\n     * The widget ID, if known. If not known, null.\n     */\n    readonly widgetId: string | null;\n\n    /**\n     * If true, the transport will refuse requests from origins other than the\n     * widget's current origin. This is intended to be used only by widgets which\n     * need excess security.\n     */\n    strictOriginCheck: boolean;\n\n    /**\n     * The origin the transport should be replying/sending to. If not known, leave\n     * null.\n     */\n    targetOrigin: string | null;\n\n    /**\n     * The number of seconds an outbound request is allowed to take before it\n     * times out.\n     */\n    timeoutSeconds: number;\n\n    /**\n     * Starts the transport for listening\n     */\n    start(): void;\n\n    /**\n     * Stops the transport. It cannot be re-started.\n     */\n    stop(): void;\n\n    /**\n     * Sends a request to the remote end.\n     * @param {WidgetApiAction} action The action to send.\n     * @param {IWidgetApiRequestData} data The request data.\n     * @returns {Promise<IWidgetApiResponseData>} A promise which resolves\n     * to the remote end's response, or throws with an Error if the request\n     * failed.\n     */\n    send<T extends IWidgetApiRequestData, R extends IWidgetApiResponseData = IWidgetApiAcknowledgeResponseData>(\n        action: WidgetApiAction,\n        data: T\n    ): Promise<R>;\n\n    /**\n     * Sends a request to the remote end. This is similar to the send() function\n     * however this version returns the full response rather than just the response\n     * data.\n     * @param {WidgetApiAction} action The action to send.\n     * @param {IWidgetApiRequestData} data The request data.\n     * @returns {Promise<IWidgetApiResponseData>} A promise which resolves\n     * to the remote end's response, or throws with an Error if the request\n     * failed.\n     */\n    sendComplete<T extends IWidgetApiRequestData, R extends IWidgetApiResponse>(action: WidgetApiAction, data: T)\n        : Promise<R>;\n\n    /**\n     * Replies to a request.\n     * @param {IWidgetApiRequest} request The request to reply to.\n     * @param {IWidgetApiResponseData} responseData The response data to reply with.\n     */\n    reply<T extends IWidgetApiResponseData>(request: IWidgetApiRequest, responseData: T): void;\n}\n"],"mappings":""}