{"version":3,"file":"WidgetEventCapability.js","names":["EventKind","exports","EventDirection","WidgetEventCapability","direction","eventType","kind","keyStr","raw","_classCallCheck","_createClass","key","value","matchesAsStateEvent","stateKey","State","matchesAsToDeviceEvent","ToDevice","matchesAsRoomEvent","msgtype","arguments","length","undefined","Event","forStateEvent","replace","concat","str","findEventCapabilities","forToDeviceEvent","forRoomEvent","forRoomMessageEvent","capabilities","parsed","_iterator","_createForOfIteratorHelper","_step","s","n","done","cap","eventSegment","startsWith","Send","substring","Receive","expectingKeyStr","includes","parts","split","idx","findIndex","p","endsWith","slice","map","join","push","err","e","f"],"sources":["../../src/models/WidgetEventCapability.ts"],"sourcesContent":["/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Capability } from \"..\";\n\nexport enum EventKind {\n    Event = \"event\",\n    State = \"state_event\",\n    ToDevice = \"to_device\",\n}\n\nexport enum EventDirection {\n    Send = \"send\",\n    Receive = \"receive\",\n}\n\nexport class WidgetEventCapability {\n    private constructor(\n        public readonly direction: EventDirection,\n        public readonly eventType: string,\n        public readonly kind: EventKind,\n        public readonly keyStr: string | null,\n        public readonly raw: string,\n    ) {\n    }\n\n    public matchesAsStateEvent(direction: EventDirection, eventType: string, stateKey: string | null): boolean {\n        if (this.kind !== EventKind.State) return false; // not a state event\n        if (this.direction !== direction) return false; // direction mismatch\n        if (this.eventType !== eventType) return false; // event type mismatch\n        if (this.keyStr === null) return true; // all state keys are allowed\n        if (this.keyStr === stateKey) return true; // this state key is allowed\n\n        // Default not allowed\n        return false;\n    }\n\n    public matchesAsToDeviceEvent(direction: EventDirection, eventType: string): boolean {\n        if (this.kind !== EventKind.ToDevice) return false; // not a to-device event\n        if (this.direction !== direction) return false; // direction mismatch\n        if (this.eventType !== eventType) return false; // event type mismatch\n\n        // Checks passed, the event is allowed\n        return true;\n    }\n\n    public matchesAsRoomEvent(direction: EventDirection, eventType: string, msgtype: string | null = null): boolean {\n        if (this.kind !== EventKind.Event) return false; // not a room event\n        if (this.direction !== direction) return false; // direction mismatch\n        if (this.eventType !== eventType) return false; // event type mismatch\n\n        if (this.eventType === \"m.room.message\") {\n            if (this.keyStr === null) return true; // all message types are allowed\n            if (this.keyStr === msgtype) return true; // this message type is allowed\n        } else {\n            return true; // already passed the check for if the event is allowed\n        }\n\n        // Default not allowed\n        return false;\n    }\n\n    public static forStateEvent(\n        direction: EventDirection,\n        eventType: string,\n        stateKey?: string,\n    ): WidgetEventCapability {\n        // TODO: Enable support for m.* namespace once the MSC lands.\n        // https://github.com/matrix-org/matrix-widget-api/issues/22\n        eventType = eventType.replace(/#/g, '\\\\#');\n        stateKey = stateKey !== null && stateKey !== undefined ? `#${stateKey}` : '';\n        const str = `org.matrix.msc2762.${direction}.state_event:${eventType}${stateKey}`;\n\n        // cheat by sending it through the processor\n        return WidgetEventCapability.findEventCapabilities([str])[0];\n    }\n\n    public static forToDeviceEvent(direction: EventDirection, eventType: string): WidgetEventCapability {\n        // TODO: Enable support for m.* namespace once the MSC lands.\n        // https://github.com/matrix-org/matrix-widget-api/issues/56\n        const str = `org.matrix.msc3819.${direction}.to_device:${eventType}`;\n\n        // cheat by sending it through the processor\n        return WidgetEventCapability.findEventCapabilities([str])[0];\n    }\n\n    public static forRoomEvent(direction: EventDirection, eventType: string): WidgetEventCapability {\n        // TODO: Enable support for m.* namespace once the MSC lands.\n        // https://github.com/matrix-org/matrix-widget-api/issues/22\n        const str = `org.matrix.msc2762.${direction}.event:${eventType}`;\n\n        // cheat by sending it through the processor\n        return WidgetEventCapability.findEventCapabilities([str])[0];\n    }\n\n    public static forRoomMessageEvent(direction: EventDirection, msgtype?: string): WidgetEventCapability {\n        // TODO: Enable support for m.* namespace once the MSC lands.\n        // https://github.com/matrix-org/matrix-widget-api/issues/22\n        msgtype = msgtype === null || msgtype === undefined ? '' : msgtype;\n        const str = `org.matrix.msc2762.${direction}.event:m.room.message#${msgtype}`;\n\n        // cheat by sending it through the processor\n        return WidgetEventCapability.findEventCapabilities([str])[0];\n    }\n\n    /**\n     * Parses a capabilities request to find all the event capability requests.\n     * @param {Iterable<Capability>} capabilities The capabilities requested/to parse.\n     * @returns {WidgetEventCapability[]} An array of event capability requests. May be empty, but never null.\n     */\n    public static findEventCapabilities(capabilities: Iterable<Capability>): WidgetEventCapability[] {\n        const parsed: WidgetEventCapability[] = [];\n        for (const cap of capabilities) {\n            let direction: EventDirection | null = null;\n            let eventSegment: string | undefined;\n            let kind: EventKind | null = null;\n\n            // TODO: Enable support for m.* namespace once the MSCs land.\n            // https://github.com/matrix-org/matrix-widget-api/issues/22\n            // https://github.com/matrix-org/matrix-widget-api/issues/56\n\n            if (cap.startsWith(\"org.matrix.msc2762.send.event:\")) {\n                direction = EventDirection.Send;\n                kind = EventKind.Event;\n                eventSegment = cap.substring(\"org.matrix.msc2762.send.event:\".length);\n            } else if (cap.startsWith(\"org.matrix.msc2762.send.state_event:\")) {\n                direction = EventDirection.Send;\n                kind = EventKind.State;\n                eventSegment = cap.substring(\"org.matrix.msc2762.send.state_event:\".length);\n            } else if (cap.startsWith(\"org.matrix.msc3819.send.to_device:\")) {\n                direction = EventDirection.Send;\n                kind = EventKind.ToDevice;\n                eventSegment = cap.substring(\"org.matrix.msc3819.send.to_device:\".length);\n            } else if (cap.startsWith(\"org.matrix.msc2762.receive.event:\")) {\n                direction = EventDirection.Receive;\n                kind = EventKind.Event;\n                eventSegment = cap.substring(\"org.matrix.msc2762.receive.event:\".length);\n            } else if (cap.startsWith(\"org.matrix.msc2762.receive.state_event:\")) {\n                direction = EventDirection.Receive;\n                kind = EventKind.State;\n                eventSegment = cap.substring(\"org.matrix.msc2762.receive.state_event:\".length);\n            } else if (cap.startsWith(\"org.matrix.msc3819.receive.to_device:\")) {\n                direction = EventDirection.Receive;\n                kind = EventKind.ToDevice;\n                eventSegment = cap.substring(\"org.matrix.msc3819.receive.to_device:\".length);\n            }\n\n            if (direction === null || kind === null || eventSegment === undefined) continue;\n\n            // The capability uses `#` as a separator between event type and state key/msgtype,\n            // so we split on that. However, a # is also valid in either one of those so we\n            // join accordingly.\n            // Eg: `m.room.message##m.text` is \"m.room.message\" event with msgtype \"#m.text\".\n            const expectingKeyStr = eventSegment.startsWith(\"m.room.message#\") || kind === EventKind.State;\n            let keyStr: string | null = null;\n            if (eventSegment.includes('#') && expectingKeyStr) {\n                // Dev note: regex is difficult to write, so instead the rules are manually written\n                // out. This is probably just as understandable as a boring regex though, so win-win?\n\n                // Test cases:\n                // str                      eventSegment        keyStr\n                // -------------------------------------------------------------\n                // m.room.message#          m.room.message      <empty string>\n                // m.room.message#test      m.room.message      test\n                // m.room.message\\#         m.room.message#     test\n                // m.room.message##test     m.room.message      #test\n                // m.room.message\\##test    m.room.message#     test\n                // m.room.message\\\\##test   m.room.message\\#    test\n                // m.room.message\\\\###test  m.room.message\\#    #test\n\n                // First step: explode the string\n                const parts = eventSegment.split('#');\n\n                // To form the eventSegment, we'll keep finding parts of the exploded string until\n                // there's one that doesn't end with the escape character (\\). We'll then join those\n                // segments together with the exploding character. We have to remember to consume the\n                // escape character as well.\n                const idx = parts.findIndex(p => !p.endsWith(\"\\\\\"));\n                eventSegment = parts.slice(0, idx + 1)\n                    .map(p => p.endsWith('\\\\') ? p.substring(0, p.length - 1) : p)\n                    .join('#');\n\n                // The keyStr is whatever is left over.\n                keyStr = parts.slice(idx + 1).join('#');\n            }\n\n            parsed.push(new WidgetEventCapability(direction, eventSegment, kind, keyStr, cap));\n        }\n        return parsed;\n    }\n}\n"],"mappings":"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"}