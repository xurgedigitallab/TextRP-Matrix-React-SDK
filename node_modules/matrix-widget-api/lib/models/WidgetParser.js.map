{"version":3,"file":"WidgetParser.js","names":["_Widget","require","_url","_typeof","obj","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","minLen","_arrayLikeToArray","Object","toString","slice","name","from","test","arr","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","WidgetParser","parseAccountData","content","result","_i","_Object$keys","keys","widgetId","roughWidget","type","sender","probableWidgetId","state_key","id","asStateEvent","event_id","room_id","origin_server_ts","widget","parseRoomWidget","push","parseWidgetsFromRoomState","currentState","_iterator","_step","state","stateEvent","estimatedWidget","creatorUserId","url","waitForIframeLoad","data","processEstimatedWidget","isValidUrl","Widget","exports"],"sources":["../../src/models/WidgetParser.ts"],"sourcesContent":["/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Widget } from \"./Widget\";\nimport { IWidget } from \"..\";\nimport { isValidUrl } from \"./validation/url\";\n\nexport interface IStateEvent {\n    event_id: string; // eslint-disable-line camelcase\n    room_id: string; // eslint-disable-line camelcase\n    type: string;\n    sender: string;\n    origin_server_ts: number; // eslint-disable-line camelcase\n    unsigned?: unknown;\n    content: unknown;\n    state_key: string; // eslint-disable-line camelcase\n}\n\nexport interface IAccountDataWidgets {\n    [widgetId: string]: {\n        type: \"m.widget\";\n        // the state_key is also the widget's ID\n        state_key: string; // eslint-disable-line camelcase\n        sender: string; // current user's ID\n        content: IWidget;\n        id?: string; // off-spec, but possible\n    };\n}\n\nexport class WidgetParser {\n    private constructor() {\n        // private constructor because this is a util class\n    }\n\n    /**\n     * Parses widgets from the \"m.widgets\" account data event. This will always\n     * return an array, though may be empty if no valid widgets were found.\n     * @param {IAccountDataWidgets} content The content of the \"m.widgets\" account data.\n     * @returns {Widget[]} The widgets in account data, or an empty array.\n     */\n    public static parseAccountData(content: IAccountDataWidgets): Widget[] {\n        if (!content) return [];\n\n        const result: Widget[] = [];\n        for (const widgetId of Object.keys(content)) {\n            const roughWidget = content[widgetId];\n            if (!roughWidget) continue;\n            if (roughWidget.type !== \"m.widget\" && roughWidget.type !== \"im.vector.modular.widgets\") continue;\n            if (!roughWidget.sender) continue;\n\n            const probableWidgetId = roughWidget.state_key || roughWidget.id;\n            if (probableWidgetId !== widgetId) continue;\n\n            const asStateEvent: IStateEvent = {\n                content: roughWidget.content,\n                sender: roughWidget.sender,\n                type: \"m.widget\",\n                state_key: widgetId,\n                event_id: \"$example\",\n                room_id: \"!example\",\n                origin_server_ts: 1,\n            };\n\n            const widget = WidgetParser.parseRoomWidget(asStateEvent);\n            if (widget) result.push(widget);\n        }\n\n        return result;\n    }\n\n    /**\n     * Parses all the widgets possible in the given array. This will always return\n     * an array, though may be empty if no widgets could be parsed.\n     * @param {IStateEvent[]} currentState The room state to parse.\n     * @returns {Widget[]} The widgets in the state, or an empty array.\n     */\n    public static parseWidgetsFromRoomState(currentState: IStateEvent[]): Widget[] {\n        if (!currentState) return [];\n        const result: Widget[] = [];\n        for (const state of currentState) {\n            const widget = WidgetParser.parseRoomWidget(state);\n            if (widget) result.push(widget);\n        }\n        return result;\n    }\n\n    /**\n     * Parses a state event into a widget. If the state event does not represent\n     * a widget (wrong event type, invalid widget, etc) then null is returned.\n     * @param {IStateEvent} stateEvent The state event.\n     * @returns {Widget|null} The widget, or null if invalid\n     */\n    public static parseRoomWidget(stateEvent: IStateEvent): Widget | null {\n        if (!stateEvent) return null;\n\n        // TODO: [Legacy] Remove legacy support\n        if (stateEvent.type !== \"m.widget\" && stateEvent.type !== \"im.vector.modular.widgets\") {\n            return null;\n        }\n\n        // Dev note: Throughout this function we have null safety to ensure that\n        // if the caller did not supply something useful that we don't error. This\n        // is done against the requirements of the interface because not everyone\n        // will have an interface to validate against.\n\n        const content = stateEvent.content as IWidget || {};\n\n        // Form our best approximation of a widget with the information we have\n        const estimatedWidget: IWidget = {\n            id: stateEvent.state_key,\n            creatorUserId: content['creatorUserId'] || stateEvent.sender,\n            name: content['name'],\n            type: content['type'],\n            url: content['url'],\n            waitForIframeLoad: content['waitForIframeLoad'],\n            data: content['data'],\n        };\n\n        // Finally, process that widget\n        return WidgetParser.processEstimatedWidget(estimatedWidget);\n    }\n\n    private static processEstimatedWidget(widget: IWidget): Widget | null {\n        // Validate that the widget has the best chance of passing as a widget\n        if (!widget.id || !widget.creatorUserId || !widget.type) {\n            return null;\n        }\n        if (!isValidUrl(widget.url)) {\n            return null;\n        }\n        // TODO: Validate data for known widget types\n        return new Widget(widget);\n    }\n}\n"],"mappings":";;;;;;AAgBA,IAAAA,OAAA,GAAAC,OAAA;AAEA,IAAAC,IAAA,GAAAD,OAAA;AAA8C,SAAAE,QAAAC,GAAA,sCAAAD,OAAA,wBAAAE,MAAA,uBAAAA,MAAA,CAAAC,QAAA,aAAAF,GAAA,kBAAAA,GAAA,gBAAAA,GAAA,WAAAA,GAAA,yBAAAC,MAAA,IAAAD,GAAA,CAAAG,WAAA,KAAAF,MAAA,IAAAD,GAAA,KAAAC,MAAA,CAAAG,SAAA,qBAAAJ,GAAA,KAAAD,OAAA,CAAAC,GAAA;AAAA,SAAAK,2BAAAC,CAAA,EAAAC,cAAA,QAAAC,EAAA,UAAAP,MAAA,oBAAAK,CAAA,CAAAL,MAAA,CAAAC,QAAA,KAAAI,CAAA,qBAAAE,EAAA,QAAAC,KAAA,CAAAC,OAAA,CAAAJ,CAAA,MAAAE,EAAA,GAAAG,2BAAA,CAAAL,CAAA,MAAAC,cAAA,IAAAD,CAAA,WAAAA,CAAA,CAAAM,MAAA,qBAAAJ,EAAA,EAAAF,CAAA,GAAAE,EAAA,MAAAK,CAAA,UAAAC,CAAA,YAAAA,EAAA,eAAAC,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAA,EAAA,QAAAH,CAAA,IAAAP,CAAA,CAAAM,MAAA,WAAAK,IAAA,mBAAAA,IAAA,SAAAC,KAAA,EAAAZ,CAAA,CAAAO,CAAA,UAAAM,CAAA,WAAAA,EAAAC,EAAA,UAAAA,EAAA,KAAAC,CAAA,EAAAP,CAAA,gBAAAQ,SAAA,iJAAAC,gBAAA,SAAAC,MAAA,UAAAC,GAAA,WAAAV,CAAA,WAAAA,EAAA,IAAAP,EAAA,GAAAA,EAAA,CAAAkB,IAAA,CAAApB,CAAA,MAAAU,CAAA,WAAAA,EAAA,QAAAW,IAAA,GAAAnB,EAAA,CAAAoB,IAAA,IAAAL,gBAAA,GAAAI,IAAA,CAAAV,IAAA,SAAAU,IAAA,KAAAR,CAAA,WAAAA,EAAAU,GAAA,IAAAL,MAAA,SAAAC,GAAA,GAAAI,GAAA,KAAAR,CAAA,WAAAA,EAAA,eAAAE,gBAAA,IAAAf,EAAA,oBAAAA,EAAA,8BAAAgB,MAAA,QAAAC,GAAA;AAAA,SAAAd,4BAAAL,CAAA,EAAAwB,MAAA,SAAAxB,CAAA,qBAAAA,CAAA,sBAAAyB,iBAAA,CAAAzB,CAAA,EAAAwB,MAAA,OAAAd,CAAA,GAAAgB,MAAA,CAAA5B,SAAA,CAAA6B,QAAA,CAAAP,IAAA,CAAApB,CAAA,EAAA4B,KAAA,aAAAlB,CAAA,iBAAAV,CAAA,CAAAH,WAAA,EAAAa,CAAA,GAAAV,CAAA,CAAAH,WAAA,CAAAgC,IAAA,MAAAnB,CAAA,cAAAA,CAAA,mBAAAP,KAAA,CAAA2B,IAAA,CAAA9B,CAAA,OAAAU,CAAA,+DAAAqB,IAAA,CAAArB,CAAA,UAAAe,iBAAA,CAAAzB,CAAA,EAAAwB,MAAA;AAAA,SAAAC,kBAAAO,GAAA,EAAAC,GAAA,QAAAA,GAAA,YAAAA,GAAA,GAAAD,GAAA,CAAA1B,MAAA,EAAA2B,GAAA,GAAAD,GAAA,CAAA1B,MAAA,WAAAC,CAAA,MAAA2B,IAAA,OAAA/B,KAAA,CAAA8B,GAAA,GAAA1B,CAAA,GAAA0B,GAAA,EAAA1B,CAAA,IAAA2B,IAAA,CAAA3B,CAAA,IAAAyB,GAAA,CAAAzB,CAAA,UAAA2B,IAAA;AAAA,SAAAC,gBAAAC,QAAA,EAAAC,WAAA,UAAAD,QAAA,YAAAC,WAAA,eAAArB,SAAA;AAAA,SAAAsB,kBAAAC,MAAA,EAAAC,KAAA,aAAAjC,CAAA,MAAAA,CAAA,GAAAiC,KAAA,CAAAlC,MAAA,EAAAC,CAAA,UAAAkC,UAAA,GAAAD,KAAA,CAAAjC,CAAA,GAAAkC,UAAA,CAAAC,UAAA,GAAAD,UAAA,CAAAC,UAAA,WAAAD,UAAA,CAAAE,YAAA,wBAAAF,UAAA,EAAAA,UAAA,CAAAG,QAAA,SAAAlB,MAAA,CAAAmB,cAAA,CAAAN,MAAA,EAAAO,cAAA,CAAAL,UAAA,CAAAM,GAAA,GAAAN,UAAA;AAAA,SAAAO,aAAAX,WAAA,EAAAY,UAAA,EAAAC,WAAA,QAAAD,UAAA,EAAAX,iBAAA,CAAAD,WAAA,CAAAvC,SAAA,EAAAmD,UAAA,OAAAC,WAAA,EAAAZ,iBAAA,CAAAD,WAAA,EAAAa,WAAA,GAAAxB,MAAA,CAAAmB,cAAA,CAAAR,WAAA,iBAAAO,QAAA,mBAAAP,WAAA;AAAA,SAAAS,eAAAK,GAAA,QAAAJ,GAAA,GAAAK,YAAA,CAAAD,GAAA,oBAAA1D,OAAA,CAAAsD,GAAA,iBAAAA,GAAA,GAAAM,MAAA,CAAAN,GAAA;AAAA,SAAAK,aAAAE,KAAA,EAAAC,IAAA,QAAA9D,OAAA,CAAA6D,KAAA,kBAAAA,KAAA,kBAAAA,KAAA,MAAAE,IAAA,GAAAF,KAAA,CAAA3D,MAAA,CAAA8D,WAAA,OAAAD,IAAA,KAAAE,SAAA,QAAAC,GAAA,GAAAH,IAAA,CAAApC,IAAA,CAAAkC,KAAA,EAAAC,IAAA,oBAAA9D,OAAA,CAAAkE,GAAA,uBAAAA,GAAA,YAAA3C,SAAA,4DAAAuC,IAAA,gBAAAF,MAAA,GAAAO,MAAA,EAAAN,KAAA,KAlB9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA,IA0CaO,YAAY;EACrB,SAAAA,aAAA,EAAsB;IAAA1B,eAAA,OAAA0B,YAAA;EAEtB,CAAC,CADG;;EAGJ;AACJ;AACA;AACA;AACA;AACA;EALIb,YAAA,CAAAa,YAAA;IAAAd,GAAA;IAAAnC,KAAA,EAMA,SAAAkD,iBAA+BC,OAA4B,EAAY;MACnE,IAAI,CAACA,OAAO,EAAE,OAAO,EAAE;MAEvB,IAAMC,MAAgB,GAAG,EAAE;MAC3B,SAAAC,EAAA,MAAAC,YAAA,GAAuBxC,MAAM,CAACyC,IAAI,CAACJ,OAAO,CAAC,EAAAE,EAAA,GAAAC,YAAA,CAAA5D,MAAA,EAAA2D,EAAA,IAAE;QAAxC,IAAMG,SAAQ,GAAAF,YAAA,CAAAD,EAAA;QACf,IAAMI,WAAW,GAAGN,OAAO,CAACK,SAAQ,CAAC;QACrC,IAAI,CAACC,WAAW,EAAE;QAClB,IAAIA,WAAW,CAACC,IAAI,KAAK,UAAU,IAAID,WAAW,CAACC,IAAI,KAAK,2BAA2B,EAAE;QACzF,IAAI,CAACD,WAAW,CAACE,MAAM,EAAE;QAEzB,IAAMC,gBAAgB,GAAGH,WAAW,CAACI,SAAS,IAAIJ,WAAW,CAACK,EAAE;QAChE,IAAIF,gBAAgB,KAAKJ,SAAQ,EAAE;QAEnC,IAAMO,YAAyB,GAAG;UAC9BZ,OAAO,EAAEM,WAAW,CAACN,OAAO;UAC5BQ,MAAM,EAAEF,WAAW,CAACE,MAAM;UAC1BD,IAAI,EAAE,UAAU;UAChBG,SAAS,EAAEL,SAAQ;UACnBQ,QAAQ,EAAE,UAAU;UACpBC,OAAO,EAAE,UAAU;UACnBC,gBAAgB,EAAE;QACtB,CAAC;QAED,IAAMC,MAAM,GAAGlB,YAAY,CAACmB,eAAe,CAACL,YAAY,CAAC;QACzD,IAAII,MAAM,EAAEf,MAAM,CAACiB,IAAI,CAACF,MAAM,CAAC;MACnC;MAEA,OAAOf,MAAM;IACjB;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAjB,GAAA;IAAAnC,KAAA,EAMA,SAAAsE,0BAAwCC,YAA2B,EAAY;MAC3E,IAAI,CAACA,YAAY,EAAE,OAAO,EAAE;MAC5B,IAAMnB,MAAgB,GAAG,EAAE;MAAC,IAAAoB,SAAA,GAAArF,0BAAA,CACRoF,YAAY;QAAAE,KAAA;MAAA;QAAhC,KAAAD,SAAA,CAAA3E,CAAA,MAAA4E,KAAA,GAAAD,SAAA,CAAA1E,CAAA,IAAAC,IAAA,GAAkC;UAAA,IAAvB2E,KAAK,GAAAD,KAAA,CAAAzE,KAAA;UACZ,IAAMmE,MAAM,GAAGlB,YAAY,CAACmB,eAAe,CAACM,KAAK,CAAC;UAClD,IAAIP,MAAM,EAAEf,MAAM,CAACiB,IAAI,CAACF,MAAM,CAAC;QACnC;MAAC,SAAA5D,GAAA;QAAAiE,SAAA,CAAAvE,CAAA,CAAAM,GAAA;MAAA;QAAAiE,SAAA,CAAArE,CAAA;MAAA;MACD,OAAOiD,MAAM;IACjB;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAjB,GAAA;IAAAnC,KAAA,EAMA,SAAAoE,gBAA8BO,UAAuB,EAAiB;MAClE,IAAI,CAACA,UAAU,EAAE,OAAO,IAAI;;MAE5B;MACA,IAAIA,UAAU,CAACjB,IAAI,KAAK,UAAU,IAAIiB,UAAU,CAACjB,IAAI,KAAK,2BAA2B,EAAE;QACnF,OAAO,IAAI;MACf;;MAEA;MACA;MACA;MACA;;MAEA,IAAMP,OAAO,GAAGwB,UAAU,CAACxB,OAAO,IAAe,CAAC,CAAC;;MAEnD;MACA,IAAMyB,eAAwB,GAAG;QAC7Bd,EAAE,EAAEa,UAAU,CAACd,SAAS;QACxBgB,aAAa,EAAE1B,OAAO,CAAC,eAAe,CAAC,IAAIwB,UAAU,CAAChB,MAAM;QAC5D1C,IAAI,EAAEkC,OAAO,CAAC,MAAM,CAAC;QACrBO,IAAI,EAAEP,OAAO,CAAC,MAAM,CAAC;QACrB2B,GAAG,EAAE3B,OAAO,CAAC,KAAK,CAAC;QACnB4B,iBAAiB,EAAE5B,OAAO,CAAC,mBAAmB,CAAC;QAC/C6B,IAAI,EAAE7B,OAAO,CAAC,MAAM;MACxB,CAAC;;MAED;MACA,OAAOF,YAAY,CAACgC,sBAAsB,CAACL,eAAe,CAAC;IAC/D;EAAC;IAAAzC,GAAA;IAAAnC,KAAA,EAED,SAAAiF,uBAAsCd,MAAe,EAAiB;MAClE;MACA,IAAI,CAACA,MAAM,CAACL,EAAE,IAAI,CAACK,MAAM,CAACU,aAAa,IAAI,CAACV,MAAM,CAACT,IAAI,EAAE;QACrD,OAAO,IAAI;MACf;MACA,IAAI,CAAC,IAAAwB,eAAU,EAACf,MAAM,CAACW,GAAG,CAAC,EAAE;QACzB,OAAO,IAAI;MACf;MACA;MACA,OAAO,IAAIK,cAAM,CAAChB,MAAM,CAAC;IAC7B;EAAC;EAAA,OAAAlB,YAAA;AAAA;AAAAmC,OAAA,CAAAnC,YAAA,GAAAA,YAAA"}