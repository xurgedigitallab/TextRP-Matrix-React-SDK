import { HTMLAttributes } from 'react';
import type { MutableRefObject } from 'react';
import type { RefObject } from 'react';

export declare const ACTION_TYPES: readonly ["bold", "italic", "strikeThrough", "underline", "undo", "redo", "orderedList", "unorderedList", "inlineCode", "clear", "link", "codeBlock", "quote", "indent", "unindent"];

export declare type ActionState = 'enabled' | 'reversed' | 'disabled';

export declare type ActionTypes = typeof ACTION_TYPES[number];

export declare type AllActionStates = Record<ActionTypes, ActionState>;

export declare type AnchorElementAttributes = keyof HTMLAttributes<HTMLAnchorElement> | `data-${string}`;

export declare type Attributes = {
    [K in AnchorElementAttributes]?: string;
};

export declare type BlockType = InputEvent['inputType'] | 'formatInlineCode' | 'clear';

/**
 */
export declare class ComposerUpdate {
    free(): void;
    /**
     * @returns {TextUpdate}
     */
    text_update(): TextUpdate;
    /**
     * @returns {MenuState}
     */
    menu_state(): MenuState;
    /**
     * @returns {MenuAction}
     */
    menu_action(): MenuAction;
}

export declare type FormattingFunctions = Record<Exclude<ActionTypes, 'link'>, () => void> & {
    insertText: (text: string) => void;
    link: (url: string, text?: string) => void;
    mention: (url: string, text: string, attributes: Attributes) => void;
    command: (text: string) => void;
    removeLinks: () => void;
    getLink: () => string;
};

export declare type InputEventProcessor = (event: WysiwygEvent, wysiwyg: Wysiwyg, editor: HTMLElement) => WysiwygEvent | null;

/**
 */
export declare class Keep {
    free(): void;
}

export declare type LinkEvent = Omit<InputEvent, 'data'> & {
    inputType: 'insertLink';
    data: {
        url: string;
        text?: string;
    };
};

export declare type MappedSuggestion = {
    keyChar: SuggestionChar;
    text: string;
    type: SuggestionType;
};

/**
 */
export declare class MenuAction {
    free(): void;
    /**
     * @returns {boolean}
     */
    keep(): boolean;
    /**
     * @returns {boolean}
     */
    none(): boolean;
    /**
     * @returns {MenuActionSuggestion | undefined}
     */
    suggestion(): MenuActionSuggestion | undefined;
}

/**
 */
export declare class MenuActionSuggestion {
    free(): void;
    /**
     */
    suggestion_pattern: SuggestionPattern;
}

/**
 */
export declare class MenuState {
    free(): void;
    /**
     * @returns {boolean}
     */
    keep(): boolean;
    /**
     * @returns {MenuStateUpdate | undefined}
     */
    update(): MenuStateUpdate | undefined;
}

/**
 */
export declare class MenuStateUpdate {
    free(): void;
    /**
     */
    action_states: Map<any, any>;
}

export declare function plainToRich(plainText: string): Promise<string>;

/**
 */
export declare class ReplaceAll {
    free(): void;
    /**
     */
    end_utf16_codeunit: number;
    /**
     */
    replacement_html: string;
    /**
     */
    start_utf16_codeunit: number;
}

export declare function richToPlain(richText: string): Promise<string>;

/**
 */
export declare class Selection_2 {
    free(): void;
    /**
     */
    end_utf16_codeunit: number;
    /**
     */
    start_utf16_codeunit: number;
}

export declare type SuggestionChar = typeof SUGGESTIONS[number] | '';

/**
 */
export declare class SuggestionPattern {
    free(): void;
    /**
     */
    end: number;
    /**
     */
    key: number;
    /**
     */
    start: number;
    /**
     */
    text: string;
}

export declare const SUGGESTIONS: readonly ["@", "#", "/"];

export declare type SuggestionType = 'mention' | 'command' | 'unknown';

/**
 */
export declare class TextUpdate {
    free(): void;
    /**
     */
    keep?: Keep;
    /**
     */
    replace_all?: ReplaceAll;
    /**
     */
    select?: Selection_2;
}

export declare function useWysiwyg(wysiwygProps?: WysiwygProps): {
    ref: MutableRefObject<HTMLDivElement | null>;
    isWysiwygReady: boolean;
    wysiwyg: FormattingFunctions;
    content: string | null;
    actionStates: AllActionStates;
    debug: {
        modelRef: RefObject<HTMLDivElement>;
        testRef: RefObject<HTMLDivElement>;
        resetTestCase: () => void | null;
        traceAction: (update: ComposerUpdate | null, name: string, value1?: string | number | undefined, value2?: string | number | undefined) => ComposerUpdate | null;
    };
    suggestion: MappedSuggestion | null;
};

export declare type Wysiwyg = {
    actions: FormattingFunctions;
    content: () => string;
};

export declare type WysiwygEvent = WysiwygInputEvent | KeyboardEvent;

export declare type WysiwygInputEvent = ClipboardEvent | LinkEvent | (InputEvent & {
    inputType: BlockType;
    data?: string | null;
});

export declare type WysiwygProps = {
    isAutoFocusEnabled?: boolean;
    inputEventProcessor?: InputEventProcessor;
    initialContent?: string;
};

export { }
