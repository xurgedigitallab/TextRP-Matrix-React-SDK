{"version":3,"file":"callStatsReportGatherer.js","names":["_connectionStats","require","_connectionStatsBuilder","_transportStatsBuilder","_mediaSsrcHandler","_mediaTrackHandler","_mediaTrackStatsHandler","_trackStatsBuilder","_connectionStatsReportBuilder","_valueFormatter","_logger","_callFeedStatsReporter","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","CallStatsReportGatherer","constructor","callId","opponentMemberId","pc","emitter","isFocus","ConnectionStats","addEventListener","onSignalStateChange","bind","trackStats","MediaTrackStatsHandler","MediaSsrcHandler","MediaTrackHandler","processStats","groupCallId","localUserId","summary","isFirstCollection","previousStatsReport","undefined","receivedMedia","receivedAudioMedia","receivedVideoMedia","audioTrackSummary","count","muted","maxPacketLoss","maxJitter","concealedAudio","totalAudio","videoTrackSummary","isActive","statsPromise","getStats","then","report","_this$connectionStats","_this$connectionStats2","currentStatsReport","result","processStatsReport","error","handleError","connectionStats","bitrate","download","audio","video","trackSummary","TrackStatsBuilder","buildTrackSummary","Array","from","getTrack2stats","values","catch","Promise","resolve","_this$currentStatsRep","byteSentStatsReport","Map","now","before","get","id","type","nominated","state","bandwidth","ConnectionStatsBuilder","buildBandwidthReport","transport","TransportStatsBuilder","buildReport","findTrack2Stats","buildPacketsLost","buildFramerateResolution","buildBitrateReceived","ts","findTransceiverByTrackId","trackId","setTrackStatsState","buildJitter","buildAudioConcealment","set","ValueFormatter","getNonNegativeValue","bytesSent","buildBitrateSend","buildCodec","kind","remoteSource","findLocalVideoTrackStats","calculateSimulcastFramerate","mediaTrackHandler","getActiveSimulcastStreams","emitByteSendReport","emitCallFeedReport","CallFeedStatsReporter","buildCallFeedReport","processAndEmitConnectionStatsReport","setActive","getActive","logger","warn","ConnectionStatsReportBuilder","build","packetLoss","emitConnectionStatsReport","stopProcessingStats","signalingState","currentRemoteDescription","mediaSsrcHandler","parse","sdp","currentLocalDescription","setOpponentMemberId","exports"],"sources":["../../../src/webrtc/stats/callStatsReportGatherer.ts"],"sourcesContent":["/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { ConnectionStats } from \"./connectionStats\";\nimport { StatsReportEmitter } from \"./statsReportEmitter\";\nimport { ByteSend, ByteSentStatsReport, TrackID } from \"./statsReport\";\nimport { ConnectionStatsBuilder } from \"./connectionStatsBuilder\";\nimport { TransportStatsBuilder } from \"./transportStatsBuilder\";\nimport { MediaSsrcHandler } from \"./media/mediaSsrcHandler\";\nimport { MediaTrackHandler } from \"./media/mediaTrackHandler\";\nimport { MediaTrackStatsHandler } from \"./media/mediaTrackStatsHandler\";\nimport { TrackStatsBuilder } from \"./trackStatsBuilder\";\nimport { ConnectionStatsReportBuilder } from \"./connectionStatsReportBuilder\";\nimport { ValueFormatter } from \"./valueFormatter\";\nimport { CallStatsReportSummary } from \"./callStatsReportSummary\";\nimport { logger } from \"../../logger\";\nimport { CallFeedStatsReporter } from \"./callFeedStatsReporter\";\n\nexport class CallStatsReportGatherer {\n    private isActive = true;\n    private previousStatsReport: RTCStatsReport | undefined;\n    private currentStatsReport: RTCStatsReport | undefined;\n    private readonly connectionStats = new ConnectionStats();\n\n    private readonly trackStats: MediaTrackStatsHandler;\n\n    public constructor(\n        public readonly callId: string,\n        private opponentMemberId: string,\n        private readonly pc: RTCPeerConnection,\n        private readonly emitter: StatsReportEmitter,\n        private readonly isFocus = true,\n    ) {\n        pc.addEventListener(\"signalingstatechange\", this.onSignalStateChange.bind(this));\n        this.trackStats = new MediaTrackStatsHandler(new MediaSsrcHandler(), new MediaTrackHandler(pc));\n    }\n\n    public async processStats(groupCallId: string, localUserId: string): Promise<CallStatsReportSummary> {\n        const summary = {\n            isFirstCollection: this.previousStatsReport === undefined,\n            receivedMedia: 0,\n            receivedAudioMedia: 0,\n            receivedVideoMedia: 0,\n            audioTrackSummary: { count: 0, muted: 0, maxPacketLoss: 0, maxJitter: 0, concealedAudio: 0, totalAudio: 0 },\n            videoTrackSummary: { count: 0, muted: 0, maxPacketLoss: 0, maxJitter: 0, concealedAudio: 0, totalAudio: 0 },\n        } as CallStatsReportSummary;\n        if (this.isActive) {\n            const statsPromise = this.pc.getStats();\n            if (typeof statsPromise?.then === \"function\") {\n                return statsPromise\n                    .then((report) => {\n                        // @ts-ignore\n                        this.currentStatsReport = typeof report?.result === \"function\" ? report.result() : report;\n\n                        try {\n                            this.processStatsReport(groupCallId, localUserId);\n                        } catch (error) {\n                            this.handleError(error);\n                            return summary;\n                        }\n\n                        this.previousStatsReport = this.currentStatsReport;\n                        summary.receivedMedia = this.connectionStats.bitrate.download;\n                        summary.receivedAudioMedia = this.connectionStats.bitrate.audio?.download || 0;\n                        summary.receivedVideoMedia = this.connectionStats.bitrate.video?.download || 0;\n                        const trackSummary = TrackStatsBuilder.buildTrackSummary(\n                            Array.from(this.trackStats.getTrack2stats().values()),\n                        );\n                        return {\n                            ...summary,\n                            audioTrackSummary: trackSummary.audioTrackSummary,\n                            videoTrackSummary: trackSummary.videoTrackSummary,\n                        };\n                    })\n                    .catch((error) => {\n                        this.handleError(error);\n                        return summary;\n                    });\n            }\n            this.isActive = false;\n        }\n        return Promise.resolve(summary);\n    }\n\n    private processStatsReport(groupCallId: string, localUserId: string): void {\n        const byteSentStatsReport: ByteSentStatsReport = new Map<TrackID, ByteSend>() as ByteSentStatsReport;\n        byteSentStatsReport.callId = this.callId;\n        byteSentStatsReport.opponentMemberId = this.opponentMemberId;\n\n        this.currentStatsReport?.forEach((now) => {\n            const before = this.previousStatsReport ? this.previousStatsReport.get(now.id) : null;\n            // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n            if (now.type === \"candidate-pair\" && now.nominated && now.state === \"succeeded\") {\n                this.connectionStats.bandwidth = ConnectionStatsBuilder.buildBandwidthReport(now);\n                this.connectionStats.transport = TransportStatsBuilder.buildReport(\n                    this.currentStatsReport,\n                    now,\n                    this.connectionStats.transport,\n                    this.isFocus,\n                );\n\n                // RTCReceivedRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n                // RTCSentRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n            } else if (now.type === \"inbound-rtp\" || now.type === \"outbound-rtp\") {\n                const trackStats = this.trackStats.findTrack2Stats(\n                    now,\n                    now.type === \"inbound-rtp\" ? \"remote\" : \"local\",\n                );\n                if (!trackStats) {\n                    return;\n                }\n\n                if (before) {\n                    TrackStatsBuilder.buildPacketsLost(trackStats, now, before);\n                }\n\n                // Get the resolution and framerate for only remote video sources here. For the local video sources,\n                // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n                // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n                // more calculations needed to determine what is the highest resolution stream sent by the client if the\n                // 'outbound-rtp' stats are used.\n                if (now.type === \"inbound-rtp\") {\n                    TrackStatsBuilder.buildFramerateResolution(trackStats, now);\n                    if (before) {\n                        TrackStatsBuilder.buildBitrateReceived(trackStats, now, before);\n                    }\n                    const ts = this.trackStats.findTransceiverByTrackId(trackStats.trackId);\n                    TrackStatsBuilder.setTrackStatsState(trackStats, ts);\n                    TrackStatsBuilder.buildJitter(trackStats, now);\n                    TrackStatsBuilder.buildAudioConcealment(trackStats, now);\n                } else if (before) {\n                    byteSentStatsReport.set(trackStats.trackId, ValueFormatter.getNonNegativeValue(now.bytesSent));\n                    TrackStatsBuilder.buildBitrateSend(trackStats, now, before);\n                }\n                TrackStatsBuilder.buildCodec(this.currentStatsReport, trackStats, now);\n            } else if (now.type === \"track\" && now.kind === \"video\" && !now.remoteSource) {\n                const trackStats = this.trackStats.findLocalVideoTrackStats(now);\n                if (!trackStats) {\n                    return;\n                }\n                TrackStatsBuilder.buildFramerateResolution(trackStats, now);\n                TrackStatsBuilder.calculateSimulcastFramerate(\n                    trackStats,\n                    now,\n                    before,\n                    this.trackStats.mediaTrackHandler.getActiveSimulcastStreams(),\n                );\n            }\n        });\n\n        this.emitter.emitByteSendReport(byteSentStatsReport);\n        this.emitter.emitCallFeedReport(\n            CallFeedStatsReporter.buildCallFeedReport(this.callId, this.opponentMemberId, this.pc),\n        );\n        this.processAndEmitConnectionStatsReport();\n    }\n\n    public setActive(isActive: boolean): void {\n        this.isActive = isActive;\n    }\n\n    public getActive(): boolean {\n        return this.isActive;\n    }\n\n    private handleError(error: any): void {\n        this.isActive = false;\n        logger.warn(`CallStatsReportGatherer ${this.callId} processStatsReport fails and set to inactive ${error}`);\n    }\n\n    private processAndEmitConnectionStatsReport(): void {\n        const report = ConnectionStatsReportBuilder.build(this.trackStats.getTrack2stats());\n        report.callId = this.callId;\n        report.opponentMemberId = this.opponentMemberId;\n\n        this.connectionStats.bandwidth = report.bandwidth;\n        this.connectionStats.bitrate = report.bitrate;\n        this.connectionStats.packetLoss = report.packetLoss;\n\n        this.emitter.emitConnectionStatsReport({\n            ...report,\n            transport: this.connectionStats.transport,\n        });\n\n        this.connectionStats.transport = [];\n    }\n\n    public stopProcessingStats(): void {}\n\n    private onSignalStateChange(): void {\n        if (this.pc.signalingState === \"stable\") {\n            if (this.pc.currentRemoteDescription) {\n                this.trackStats.mediaSsrcHandler.parse(this.pc.currentRemoteDescription.sdp, \"remote\");\n            }\n            if (this.pc.currentLocalDescription) {\n                this.trackStats.mediaSsrcHandler.parse(this.pc.currentLocalDescription.sdp, \"local\");\n            }\n        }\n    }\n\n    public setOpponentMemberId(id: string): void {\n        this.opponentMemberId = id;\n    }\n}\n"],"mappings":"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"}