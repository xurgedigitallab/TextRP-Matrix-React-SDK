{"version":3,"file":"QRCode.js","names":["_Base","require","_Error","_olmlib","_logger","_verification","SHOW_QR_CODE_METHOD","exports","SCAN_QR_CODE_METHOD","QrCodeEvent","VerifierEvent","ReciprocateQRCode","Base","constructor","args","_defineProperty2","default","startEvent","Error","qrCodeData","request","getContent","encodedSharedSecret","newKeyMismatchError","Promise","resolve","reject","reciprocateQREvent","confirm","cancel","newUserCancelledError","emit","ShowReciprocateQr","keys","mode","Mode","VerifyOtherUser","masterKey","otherUserMasterKey","VerifySelfTrusted","deviceId","targetDevice","otherDeviceKey","VerifySelfUntrusted","myMasterKey","verifyKeys","userId","keyId","device","keyInfo","targetKey","logger","error","deviceKeyId","startsWith","deviceTargetKey","factory","channel","baseApis","NAME","getReciprocateQrCodeCallbacks","_this$reciprocateQREv","CODE_VERSION","BINARY_PREFIX","QRCodeData","sharedSecret","buffer","create","client","generateSharedSecret","determineMode","otherUserCrossSigningInfo","getStoredCrossSigningForUser","otherUserId","getId","getOtherDeviceKey","myUserId","getUserId","myCrossSigningInfo","qrData","generateQrData","generateBuffer","getBuffer","secretBytes","Uint8Array","global","crypto","getRandomValues","encodeUnpaddedBase64","otherDevice","getStoredDevice","undefined","getFingerprint","myTrust","checkUserTrust","isCrossSigningVerified","transactionId","prefix","version","firstKeyB64","secondKeyB64","secretB64","getDeviceEd25519Key","buf","Buffer","alloc","appendByte","b","tmpBuf","from","concat","appendInt","i","writeInt16BE","appendStr","s","enc","withLengthPrefix","byteLength","appendEncBase64","b64","decodeBase64"],"sources":["../../../src/crypto/verification/QRCode.ts"],"sourcesContent":["/*\nCopyright 2018 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * QR code key verification.\n */\n\nimport { VerificationBase as Base } from \"./Base\";\nimport { newKeyMismatchError, newUserCancelledError } from \"./Error\";\nimport { decodeBase64, encodeUnpaddedBase64 } from \"../olmlib\";\nimport { logger } from \"../../logger\";\nimport { VerificationRequest } from \"./request/VerificationRequest\";\nimport { MatrixClient } from \"../../client\";\nimport { IVerificationChannel } from \"./request/Channel\";\nimport { MatrixEvent } from \"../../models/event\";\nimport { ShowQrCodeCallbacks, VerifierEvent } from \"../../crypto-api/verification\";\n\nexport const SHOW_QR_CODE_METHOD = \"m.qr_code.show.v1\";\nexport const SCAN_QR_CODE_METHOD = \"m.qr_code.scan.v1\";\n\n/** @deprecated use VerifierEvent */\nexport type QrCodeEvent = VerifierEvent;\n/** @deprecated use VerifierEvent */\nexport const QrCodeEvent = VerifierEvent;\n\n/** @deprecated Avoid referencing this class directly; instead use {@link Crypto.Verifier}. */\nexport class ReciprocateQRCode extends Base {\n    public reciprocateQREvent?: ShowQrCodeCallbacks;\n\n    public static factory(\n        channel: IVerificationChannel,\n        baseApis: MatrixClient,\n        userId: string,\n        deviceId: string,\n        startEvent: MatrixEvent,\n        request: VerificationRequest,\n    ): ReciprocateQRCode {\n        return new ReciprocateQRCode(channel, baseApis, userId, deviceId, startEvent, request);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    public static get NAME(): string {\n        return \"m.reciprocate.v1\";\n    }\n\n    protected doVerification = async (): Promise<void> => {\n        if (!this.startEvent) {\n            // TODO: Support scanning QR codes\n            throw new Error(\"It is not currently possible to start verification\" + \"with this method yet.\");\n        }\n\n        const { qrCodeData } = this.request;\n        // 1. check the secret\n        if (this.startEvent.getContent()[\"secret\"] !== qrCodeData?.encodedSharedSecret) {\n            throw newKeyMismatchError();\n        }\n\n        // 2. ask if other user shows shield as well\n        await new Promise<void>((resolve, reject) => {\n            this.reciprocateQREvent = {\n                confirm: resolve,\n                cancel: () => reject(newUserCancelledError()),\n            };\n            this.emit(QrCodeEvent.ShowReciprocateQr, this.reciprocateQREvent);\n        });\n\n        // 3. determine key to sign / mark as trusted\n        const keys: Record<string, string> = {};\n\n        switch (qrCodeData?.mode) {\n            case Mode.VerifyOtherUser: {\n                // add master key to keys to be signed, only if we're not doing self-verification\n                const masterKey = qrCodeData.otherUserMasterKey;\n                keys[`ed25519:${masterKey}`] = masterKey!;\n                break;\n            }\n            case Mode.VerifySelfTrusted: {\n                const deviceId = this.request.targetDevice.deviceId;\n                keys[`ed25519:${deviceId}`] = qrCodeData.otherDeviceKey!;\n                break;\n            }\n            case Mode.VerifySelfUntrusted: {\n                const masterKey = qrCodeData.myMasterKey;\n                keys[`ed25519:${masterKey}`] = masterKey!;\n                break;\n            }\n        }\n\n        // 4. sign the key (or mark own MSK as verified in case of MODE_VERIFY_SELF_TRUSTED)\n        await this.verifyKeys(this.userId, keys, (keyId, device, keyInfo) => {\n            // make sure the device has the expected keys\n            const targetKey = keys[keyId];\n            if (!targetKey) throw newKeyMismatchError();\n\n            if (keyInfo !== targetKey) {\n                logger.error(\"key ID from key info does not match\");\n                throw newKeyMismatchError();\n            }\n            for (const deviceKeyId in device.keys) {\n                if (!deviceKeyId.startsWith(\"ed25519\")) continue;\n                const deviceTargetKey = keys[deviceKeyId];\n                if (!deviceTargetKey) throw newKeyMismatchError();\n                if (device.keys[deviceKeyId] !== deviceTargetKey) {\n                    logger.error(\"master key does not match\");\n                    throw newKeyMismatchError();\n                }\n            }\n        });\n    };\n\n    public getReciprocateQrCodeCallbacks(): ShowQrCodeCallbacks | null {\n        return this.reciprocateQREvent ?? null;\n    }\n}\n\nconst CODE_VERSION = 0x02; // the version of binary QR codes we support\nconst BINARY_PREFIX = \"MATRIX\"; // ASCII, used to prefix the binary format\n\nenum Mode {\n    VerifyOtherUser = 0x00, // Verifying someone who isn't us\n    VerifySelfTrusted = 0x01, // We trust the master key\n    VerifySelfUntrusted = 0x02, // We do not trust the master key\n}\n\ninterface IQrData {\n    prefix: string;\n    version: number;\n    mode: Mode;\n    transactionId?: string;\n    firstKeyB64: string;\n    secondKeyB64: string;\n    secretB64: string;\n}\n\nexport class QRCodeData {\n    public constructor(\n        public readonly mode: Mode,\n        private readonly sharedSecret: string,\n        // only set when mode is MODE_VERIFY_OTHER_USER, master key of other party at time of generating QR code\n        public readonly otherUserMasterKey: string | null,\n        // only set when mode is MODE_VERIFY_SELF_TRUSTED, device key of other party at time of generating QR code\n        public readonly otherDeviceKey: string | null,\n        // only set when mode is MODE_VERIFY_SELF_UNTRUSTED, own master key at time of generating QR code\n        public readonly myMasterKey: string | null,\n        private readonly buffer: Buffer,\n    ) {}\n\n    public static async create(request: VerificationRequest, client: MatrixClient): Promise<QRCodeData> {\n        const sharedSecret = QRCodeData.generateSharedSecret();\n        const mode = QRCodeData.determineMode(request, client);\n        let otherUserMasterKey: string | null = null;\n        let otherDeviceKey: string | null = null;\n        let myMasterKey: string | null = null;\n        if (mode === Mode.VerifyOtherUser) {\n            const otherUserCrossSigningInfo = client.getStoredCrossSigningForUser(request.otherUserId);\n            otherUserMasterKey = otherUserCrossSigningInfo!.getId(\"master\");\n        } else if (mode === Mode.VerifySelfTrusted) {\n            otherDeviceKey = await QRCodeData.getOtherDeviceKey(request, client);\n        } else if (mode === Mode.VerifySelfUntrusted) {\n            const myUserId = client.getUserId()!;\n            const myCrossSigningInfo = client.getStoredCrossSigningForUser(myUserId);\n            myMasterKey = myCrossSigningInfo!.getId(\"master\");\n        }\n        const qrData = QRCodeData.generateQrData(\n            request,\n            client,\n            mode,\n            sharedSecret,\n            otherUserMasterKey!,\n            otherDeviceKey!,\n            myMasterKey!,\n        );\n        const buffer = QRCodeData.generateBuffer(qrData);\n        return new QRCodeData(mode, sharedSecret, otherUserMasterKey, otherDeviceKey, myMasterKey, buffer);\n    }\n\n    /**\n     * The unpadded base64 encoded shared secret.\n     */\n    public get encodedSharedSecret(): string {\n        return this.sharedSecret;\n    }\n\n    public getBuffer(): Buffer {\n        return this.buffer;\n    }\n\n    private static generateSharedSecret(): string {\n        const secretBytes = new Uint8Array(11);\n        global.crypto.getRandomValues(secretBytes);\n        return encodeUnpaddedBase64(secretBytes);\n    }\n\n    private static async getOtherDeviceKey(request: VerificationRequest, client: MatrixClient): Promise<string> {\n        const myUserId = client.getUserId()!;\n        const otherDevice = request.targetDevice;\n        const device = otherDevice.deviceId ? client.getStoredDevice(myUserId, otherDevice.deviceId) : undefined;\n        if (!device) {\n            throw new Error(\"could not find device \" + otherDevice?.deviceId);\n        }\n        return device.getFingerprint();\n    }\n\n    private static determineMode(request: VerificationRequest, client: MatrixClient): Mode {\n        const myUserId = client.getUserId();\n        const otherUserId = request.otherUserId;\n\n        let mode = Mode.VerifyOtherUser;\n        if (myUserId === otherUserId) {\n            // Mode changes depending on whether or not we trust the master cross signing key\n            const myTrust = client.checkUserTrust(myUserId);\n            if (myTrust.isCrossSigningVerified()) {\n                mode = Mode.VerifySelfTrusted;\n            } else {\n                mode = Mode.VerifySelfUntrusted;\n            }\n        }\n        return mode;\n    }\n\n    private static generateQrData(\n        request: VerificationRequest,\n        client: MatrixClient,\n        mode: Mode,\n        encodedSharedSecret: string,\n        otherUserMasterKey?: string,\n        otherDeviceKey?: string,\n        myMasterKey?: string,\n    ): IQrData {\n        const myUserId = client.getUserId()!;\n        const transactionId = request.channel.transactionId;\n        const qrData: IQrData = {\n            prefix: BINARY_PREFIX,\n            version: CODE_VERSION,\n            mode,\n            transactionId,\n            firstKeyB64: \"\", // worked out shortly\n            secondKeyB64: \"\", // worked out shortly\n            secretB64: encodedSharedSecret,\n        };\n\n        const myCrossSigningInfo = client.getStoredCrossSigningForUser(myUserId);\n\n        if (mode === Mode.VerifyOtherUser) {\n            // First key is our master cross signing key\n            qrData.firstKeyB64 = myCrossSigningInfo!.getId(\"master\")!;\n            // Second key is the other user's master cross signing key\n            qrData.secondKeyB64 = otherUserMasterKey!;\n        } else if (mode === Mode.VerifySelfTrusted) {\n            // First key is our master cross signing key\n            qrData.firstKeyB64 = myCrossSigningInfo!.getId(\"master\")!;\n            qrData.secondKeyB64 = otherDeviceKey!;\n        } else if (mode === Mode.VerifySelfUntrusted) {\n            // First key is our device's key\n            qrData.firstKeyB64 = client.getDeviceEd25519Key()!;\n            // Second key is what we think our master cross signing key is\n            qrData.secondKeyB64 = myMasterKey!;\n        }\n        return qrData;\n    }\n\n    private static generateBuffer(qrData: IQrData): Buffer {\n        let buf = Buffer.alloc(0); // we'll concat our way through life\n\n        const appendByte = (b: number): void => {\n            const tmpBuf = Buffer.from([b]);\n            buf = Buffer.concat([buf, tmpBuf]);\n        };\n        const appendInt = (i: number): void => {\n            const tmpBuf = Buffer.alloc(2);\n            tmpBuf.writeInt16BE(i, 0);\n            buf = Buffer.concat([buf, tmpBuf]);\n        };\n        const appendStr = (s: string, enc: BufferEncoding, withLengthPrefix = true): void => {\n            const tmpBuf = Buffer.from(s, enc);\n            if (withLengthPrefix) appendInt(tmpBuf.byteLength);\n            buf = Buffer.concat([buf, tmpBuf]);\n        };\n        const appendEncBase64 = (b64: string): void => {\n            const b = decodeBase64(b64);\n            const tmpBuf = Buffer.from(b);\n            buf = Buffer.concat([buf, tmpBuf]);\n        };\n\n        // Actually build the buffer for the QR code\n        appendStr(qrData.prefix, \"ascii\", false);\n        appendByte(qrData.version);\n        appendByte(qrData.mode);\n        appendStr(qrData.transactionId!, \"utf-8\");\n        appendEncBase64(qrData.firstKeyB64);\n        appendEncBase64(qrData.secondKeyB64);\n        appendEncBase64(qrData.secretB64);\n\n        return buf;\n    }\n}\n"],"mappings":"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"}