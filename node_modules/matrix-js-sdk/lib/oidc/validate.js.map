{"version":3,"file":"validate.js","names":["_client","require","_logger","OidcDiscoveryError","exports","validateWellKnownAuthentication","wellKnown","authentication","M_AUTHENTICATION","findIn","Error","NotSupported","issuer","hasOwnProperty","account","Misconfigured","isRecord","value","Array","isArray","requiredStringProperty","key","optionalStringProperty","logger","error","requiredArrayValue","array","includes","validateOIDCIssuerWellKnown","OpSupport","isInvalid","some","isValid","authorizationEndpoint","tokenEndpoint","registrationEndpoint"],"sources":["../../src/oidc/validate.ts"],"sourcesContent":["/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { IClientWellKnown, IDelegatedAuthConfig, M_AUTHENTICATION } from \"../client\";\nimport { logger } from \"../logger\";\n\nexport enum OidcDiscoveryError {\n    NotSupported = \"OIDC authentication not supported\",\n    Misconfigured = \"OIDC is misconfigured\",\n    General = \"Something went wrong with OIDC discovery\",\n    OpSupport = \"Configured OIDC OP does not support required functions\",\n}\n\nexport type ValidatedIssuerConfig = {\n    authorizationEndpoint: string;\n    tokenEndpoint: string;\n    registrationEndpoint?: string;\n};\n\n/**\n * Validates MSC2965 m.authentication config\n * Returns valid configuration\n * @param wellKnown - client well known as returned from ./well-known/client/matrix\n * @returns config - when present and valid\n * @throws when config is not found or invalid\n */\nexport const validateWellKnownAuthentication = (wellKnown: IClientWellKnown): IDelegatedAuthConfig => {\n    const authentication = M_AUTHENTICATION.findIn<IDelegatedAuthConfig>(wellKnown);\n\n    if (!authentication) {\n        throw new Error(OidcDiscoveryError.NotSupported);\n    }\n\n    if (\n        typeof authentication.issuer === \"string\" &&\n        (!authentication.hasOwnProperty(\"account\") || typeof authentication.account === \"string\")\n    ) {\n        return {\n            issuer: authentication.issuer,\n            account: authentication.account,\n        };\n    }\n\n    throw new Error(OidcDiscoveryError.Misconfigured);\n};\n\nconst isRecord = (value: unknown): value is Record<string, unknown> =>\n    !!value && typeof value === \"object\" && !Array.isArray(value);\nconst requiredStringProperty = (wellKnown: Record<string, unknown>, key: string): boolean => {\n    if (!wellKnown[key] || !optionalStringProperty(wellKnown, key)) {\n        logger.error(`OIDC issuer configuration: ${key} is invalid`);\n        return false;\n    }\n    return true;\n};\nconst optionalStringProperty = (wellKnown: Record<string, unknown>, key: string): boolean => {\n    if (!!wellKnown[key] && typeof wellKnown[key] !== \"string\") {\n        logger.error(`OIDC issuer configuration: ${key} is invalid`);\n        return false;\n    }\n    return true;\n};\nconst requiredArrayValue = (wellKnown: Record<string, unknown>, key: string, value: any): boolean => {\n    const array = wellKnown[key];\n    if (!array || !Array.isArray(array) || !array.includes(value)) {\n        logger.error(`OIDC issuer configuration: ${key} is invalid. ${value} is required.`);\n        return false;\n    }\n    return true;\n};\n\n/**\n * Validates issue `.well-known/openid-configuration`\n * As defined in RFC5785 https://openid.net/specs/openid-connect-discovery-1_0.html\n * validates that OP is compatible with Element's OIDC flow\n * @param wellKnown - json object\n * @returns valid issuer config\n * @throws Error - when issuer config is not found or is invalid\n */\nexport const validateOIDCIssuerWellKnown = (wellKnown: unknown): ValidatedIssuerConfig => {\n    if (!isRecord(wellKnown)) {\n        logger.error(\"Issuer configuration not found or malformed\");\n        throw new Error(OidcDiscoveryError.OpSupport);\n    }\n\n    const isInvalid = [\n        requiredStringProperty(wellKnown, \"authorization_endpoint\"),\n        requiredStringProperty(wellKnown, \"token_endpoint\"),\n        optionalStringProperty(wellKnown, \"registration_endpoint\"),\n        requiredArrayValue(wellKnown, \"response_types_supported\", \"code\"),\n        requiredArrayValue(wellKnown, \"grant_types_supported\", \"authorization_code\"),\n        requiredArrayValue(wellKnown, \"code_challenge_methods_supported\", \"S256\"),\n    ].some((isValid) => !isValid);\n\n    if (!isInvalid) {\n        return {\n            authorizationEndpoint: wellKnown[\"authorization_endpoint\"],\n            tokenEndpoint: wellKnown[\"token_endpoint\"],\n            registrationEndpoint: wellKnown[\"registration_endpoint\"],\n        } as ValidatedIssuerConfig;\n    }\n\n    logger.error(\"Issuer configuration not valid\");\n    throw new Error(OidcDiscoveryError.OpSupport);\n};\n"],"mappings":"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"}