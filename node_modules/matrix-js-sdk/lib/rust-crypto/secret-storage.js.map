{"version":3,"file":"secret-storage.js","names":["secretStorageContainsCrossSigningKeys","secretStorage","secretStorageMasterKeys","isStored","secretStorageUserSigningKeys","secretStorageSelfSigningKeys","Object","keys","some","secretStorageKey"],"sources":["../../src/rust-crypto/secret-storage.ts"],"sourcesContent":["/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { ServerSideSecretStorage } from \"../secret-storage\";\n\n/**\n * Check that the private cross signing keys (master, self signing, user signing) are stored in the secret storage and encrypted with the same secret storage key.\n *\n * @param secretStorage - The secret store using account data\n * @returns True if the cross-signing keys are all stored and encrypted with the same secret storage key.\n */\nexport async function secretStorageContainsCrossSigningKeys(secretStorage: ServerSideSecretStorage): Promise<boolean> {\n    // Check if the master cross-signing key is stored in secret storage\n    const secretStorageMasterKeys = await secretStorage.isStored(\"m.cross_signing.master\");\n\n    // Master key not stored\n    if (!secretStorageMasterKeys) return false;\n\n    // Get the user signing keys stored into the secret storage\n    const secretStorageUserSigningKeys = (await secretStorage.isStored(`m.cross_signing.user_signing`)) || {};\n    // Get the self signing keys stored into the secret storage\n    const secretStorageSelfSigningKeys = (await secretStorage.isStored(`m.cross_signing.self_signing`)) || {};\n\n    // Check that one of the secret storage keys used to encrypt the master key was also used to encrypt the user-signing and self-signing keys\n    return Object.keys(secretStorageMasterKeys).some(\n        (secretStorageKey) =>\n            secretStorageUserSigningKeys[secretStorageKey] && secretStorageSelfSigningKeys[secretStorageKey],\n    );\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,qCAAqCA,CAACC,aAAsC,EAAoB;EAClH;EACA,MAAMC,uBAAuB,GAAG,MAAMD,aAAa,CAACE,QAAQ,CAAC,wBAAwB,CAAC;;EAEtF;EACA,IAAI,CAACD,uBAAuB,EAAE,OAAO,KAAK;;EAE1C;EACA,MAAME,4BAA4B,GAAG,CAAC,MAAMH,aAAa,CAACE,QAAQ,CAAE,8BAA6B,CAAC,KAAK,CAAC,CAAC;EACzG;EACA,MAAME,4BAA4B,GAAG,CAAC,MAAMJ,aAAa,CAACE,QAAQ,CAAE,8BAA6B,CAAC,KAAK,CAAC,CAAC;;EAEzG;EACA,OAAOG,MAAM,CAACC,IAAI,CAACL,uBAAuB,CAAC,CAACM,IAAI,CAC3CC,gBAAgB,IACbL,4BAA4B,CAACK,gBAAgB,CAAC,IAAIJ,4BAA4B,CAACI,gBAAgB,CACvG,CAAC;AACL"}