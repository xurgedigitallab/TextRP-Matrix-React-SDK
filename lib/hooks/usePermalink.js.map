{"version":3,"file":"usePermalink.js","names":["_Pill","require","_Permalinks","_dispatcher","_interopRequireDefault","_actions","_languageHandler","_usePermalinkTargetRoom","_usePermalinkEvent","_usePermalinkMember","determineType","forcedType","parseResult","permalinkRoom","roomIdOrAlias","eventId","roomId","PillType","EventInSameRoom","EventInOtherRoom","primaryEntityId","prefix","UserMention","RoomMention","usePermalink","_ref","room","type","url","resourceId","parsePermalink","targetRoom","usePermalinkTargetRoom","event","usePermalinkEvent","member","usePermalinkMember","onClick","text","AtRoomMention","name","e","preventDefault","stopPropagation","dis","dispatch","action","Action","ViewUser","_t","exports"],"sources":["../../src/hooks/usePermalink.ts"],"sourcesContent":["/*\r\nCopyright 2023 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { MatrixEvent, Room, RoomMember } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport { ButtonEvent } from \"../components/views/elements/AccessibleButton\";\r\nimport { PillType } from \"../components/views/elements/Pill\";\r\nimport { parsePermalink } from \"../utils/permalinks/Permalinks\";\r\nimport dis from \"../dispatcher/dispatcher\";\r\nimport { Action } from \"../dispatcher/actions\";\r\nimport { PermalinkParts } from \"../utils/permalinks/PermalinkConstructor\";\r\nimport { _t } from \"../languageHandler\";\r\nimport { usePermalinkTargetRoom } from \"./usePermalinkTargetRoom\";\r\nimport { usePermalinkEvent } from \"./usePermalinkEvent\";\r\nimport { usePermalinkMember } from \"./usePermalinkMember\";\r\n\r\ninterface Args {\r\n    /** Room in which the permalink should be displayed. */\r\n    room?: Room;\r\n    /** When set forces the permalink type. */\r\n    type?: PillType;\r\n    /** Permalink URL. */\r\n    url?: string;\r\n}\r\n\r\ninterface HookResult {\r\n    /**\r\n     * Room member of a user mention permalink.\r\n     * null for other links, if the profile was not found or not yet loaded.\r\n     * This can change, for instance, from null to a RoomMember after the profile lookup completed.\r\n     */\r\n    member: RoomMember | null;\r\n    /**\r\n     * Displayable text of the permalink resource. Can for instance be a user or room name.\r\n     * null here means that there is nothing to display. Most likely if the URL was not a permalink.\r\n     */\r\n    text: string | null;\r\n    /**\r\n     * Should be used for click actions on the permalink.\r\n     * In case of a user permalink, a view profile action is dispatched.\r\n     */\r\n    onClick: (e: ButtonEvent) => void;\r\n    /**\r\n     * This can be for instance a user or room Id.\r\n     * null here means that the resource cannot be detected. Most likely if the URL was not a permalink.\r\n     */\r\n    resourceId: string | null;\r\n    /**\r\n     * Target room of the permalink:\r\n     * For an @room mention, this is the room where the permalink should be displayed.\r\n     * For a room permalink, it is the room from the permalink.\r\n     * null for other links or if the room cannot be found.\r\n     */\r\n    targetRoom: Room | null;\r\n    /**\r\n     * Type of the pill plus \"space\" for spaces.\r\n     * null here means that the type cannot be detected. Most likely if the URL was not a permalink.\r\n     */\r\n    type: PillType | \"space\" | null;\r\n    /**\r\n     * Target event of the permalink.\r\n     * Null if unable to load the event.\r\n     */\r\n    event: MatrixEvent | null;\r\n}\r\n\r\n/**\r\n * Tries to determine the pill type.\r\n *\r\n * If forcedType is present it will be returned.\r\n * If the parse result contains a room Id or alias and an event Id:\r\n * - Type is EventInSameRoom if the permalink room Id or alias equals the parsed room Id or alias\r\n * - Type is EventInOtherRoom if the permalink room Id or alias not equals the parsed room Id or alias\r\n * If the parse result contains a primary entity Id it will try to detect the type from it.\r\n * Otherwise returns null.\r\n *\r\n * @param forcedType - Forced pill type. Will be used if present and short-circuits all othe conditions.\r\n * @param parseResult - Permalink parser result\r\n * @param permalinkRoom - Room in which the permalink is displayed.\r\n * @returns Pill type or null if unable to determine.\r\n */\r\nconst determineType = (\r\n    forcedType: PillType | undefined,\r\n    parseResult: PermalinkParts | null,\r\n    permalinkRoom: Room | undefined,\r\n): PillType | null => {\r\n    if (forcedType) return forcedType;\r\n\r\n    if (parseResult?.roomIdOrAlias && parseResult?.eventId) {\r\n        if (parseResult.roomIdOrAlias === permalinkRoom?.roomId) {\r\n            return PillType.EventInSameRoom;\r\n        }\r\n\r\n        return PillType.EventInOtherRoom;\r\n    }\r\n\r\n    if (parseResult?.primaryEntityId) {\r\n        const prefix = parseResult.primaryEntityId[0] || \"\";\r\n        return (\r\n            {\r\n                \"@\": PillType.UserMention,\r\n                \"#\": PillType.RoomMention,\r\n                \"!\": PillType.RoomMention,\r\n            }[prefix] || null\r\n        );\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Can be used to retrieve all information needed to display a permalink.\r\n */\r\nexport const usePermalink: (args: Args) => HookResult = ({\r\n    room: permalinkRoom,\r\n    type: forcedType,\r\n    url,\r\n}): HookResult => {\r\n    let resourceId: string | null = null;\r\n    let parseResult: PermalinkParts | null = null;\r\n\r\n    if (url) {\r\n        parseResult = parsePermalink(url);\r\n\r\n        if (parseResult?.primaryEntityId) {\r\n            resourceId = parseResult.primaryEntityId;\r\n        }\r\n    }\r\n\r\n    const type = determineType(forcedType, parseResult, permalinkRoom);\r\n    const targetRoom = usePermalinkTargetRoom(type, parseResult, permalinkRoom);\r\n    const event = usePermalinkEvent(type, parseResult, targetRoom);\r\n    const member = usePermalinkMember(type, parseResult, targetRoom, event);\r\n\r\n    let onClick: (e: ButtonEvent) => void = () => {};\r\n    let text = resourceId;\r\n\r\n    if (type === PillType.AtRoomMention && permalinkRoom) {\r\n        text = \"@room\";\r\n    } else if (type === PillType.UserMention && member) {\r\n        text = member.name || resourceId;\r\n        onClick = (e: ButtonEvent): void => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            dis.dispatch({\r\n                action: Action.ViewUser,\r\n                member: member,\r\n            });\r\n        };\r\n    } else if (type === PillType.RoomMention) {\r\n        if (targetRoom) {\r\n            text = targetRoom.name || resourceId;\r\n        }\r\n    } else if (type === PillType.EventInSameRoom) {\r\n        text = member?.name || _t(\"User\");\r\n    } else if (type === PillType.EventInOtherRoom) {\r\n        text = targetRoom?.name || _t(\"Room\");\r\n    }\r\n\r\n    return {\r\n        event,\r\n        member,\r\n        onClick,\r\n        resourceId,\r\n        targetRoom,\r\n        text,\r\n        type,\r\n    };\r\n};\r\n"],"mappings":"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"}