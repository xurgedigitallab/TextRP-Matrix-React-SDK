{"version":3,"file":"useSettings.js","names":["_react","require","_SettingsStore","_interopRequireDefault","useSettingValue","settingName","roomId","arguments","length","undefined","excludeDefault","value","setValue","useState","SettingsStore","getValue","useEffect","ref","watchSetting","unwatchSetting","exports","useFeatureEnabled","featureName","enabled","setEnabled"],"sources":["../../src/hooks/useSettings.ts"],"sourcesContent":["/*\r\nCopyright 2020 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport SettingsStore from \"../settings/SettingsStore\";\r\n\r\n// Hook to fetch the value of a setting and dynamically update when it changes\r\nexport const useSettingValue = <T>(settingName: string, roomId: string | null = null, excludeDefault = false): T => {\r\n    const [value, setValue] = useState(SettingsStore.getValue<T>(settingName, roomId, excludeDefault));\r\n\r\n    useEffect(() => {\r\n        const ref = SettingsStore.watchSetting(settingName, roomId, () => {\r\n            setValue(SettingsStore.getValue<T>(settingName, roomId, excludeDefault));\r\n        });\r\n        // clean-up\r\n        return () => {\r\n            SettingsStore.unwatchSetting(ref);\r\n        };\r\n    }, [settingName, roomId, excludeDefault]);\r\n\r\n    return value;\r\n};\r\n\r\n// Hook to fetch whether a feature is enabled and dynamically update when that changes\r\nexport const useFeatureEnabled = (featureName: string, roomId: string | null = null): boolean => {\r\n    const [enabled, setEnabled] = useState(SettingsStore.getValue<boolean>(featureName, roomId));\r\n\r\n    useEffect(() => {\r\n        const ref = SettingsStore.watchSetting(featureName, roomId, () => {\r\n            setEnabled(SettingsStore.getValue(featureName, roomId));\r\n        });\r\n        // clean-up\r\n        return () => {\r\n            SettingsStore.unwatchSetting(ref);\r\n        };\r\n    }, [featureName, roomId]);\r\n\r\n    return enabled;\r\n};\r\n"],"mappings":";;;;;;;AAgBA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,cAAA,GAAAC,sBAAA,CAAAF,OAAA;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACO,MAAMG,eAAe,GAAG,SAAAA,CAAIC,WAAmB,EAA8D;EAAA,IAA5DC,MAAqB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAAA,IAAEG,cAAc,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EACxG,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,GAAG,IAAAC,eAAQ,EAACC,sBAAa,CAACC,QAAQ,CAAIV,WAAW,EAAEC,MAAM,EAAEI,cAAc,CAAC,CAAC;EAElG,IAAAM,gBAAS,EAAC,MAAM;IACZ,MAAMC,GAAG,GAAGH,sBAAa,CAACI,YAAY,CAACb,WAAW,EAAEC,MAAM,EAAE,MAAM;MAC9DM,QAAQ,CAACE,sBAAa,CAACC,QAAQ,CAAIV,WAAW,EAAEC,MAAM,EAAEI,cAAc,CAAC,CAAC;IAC5E,CAAC,CAAC;IACF;IACA,OAAO,MAAM;MACTI,sBAAa,CAACK,cAAc,CAACF,GAAG,CAAC;IACrC,CAAC;EACL,CAAC,EAAE,CAACZ,WAAW,EAAEC,MAAM,EAAEI,cAAc,CAAC,CAAC;EAEzC,OAAOC,KAAK;AAChB,CAAC;;AAED;AAAAS,OAAA,CAAAhB,eAAA,GAAAA,eAAA;AACO,MAAMiB,iBAAiB,GAAG,SAAAA,CAACC,WAAmB,EAA4C;EAAA,IAA1ChB,MAAqB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAC/E,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAG,IAAAX,eAAQ,EAACC,sBAAa,CAACC,QAAQ,CAAUO,WAAW,EAAEhB,MAAM,CAAC,CAAC;EAE5F,IAAAU,gBAAS,EAAC,MAAM;IACZ,MAAMC,GAAG,GAAGH,sBAAa,CAACI,YAAY,CAACI,WAAW,EAAEhB,MAAM,EAAE,MAAM;MAC9DkB,UAAU,CAACV,sBAAa,CAACC,QAAQ,CAACO,WAAW,EAAEhB,MAAM,CAAC,CAAC;IAC3D,CAAC,CAAC;IACF;IACA,OAAO,MAAM;MACTQ,sBAAa,CAACK,cAAc,CAACF,GAAG,CAAC;IACrC,CAAC;EACL,CAAC,EAAE,CAACK,WAAW,EAAEhB,MAAM,CAAC,CAAC;EAEzB,OAAOiB,OAAO;AAClB,CAAC;AAACH,OAAA,CAAAC,iBAAA,GAAAA,iBAAA"}