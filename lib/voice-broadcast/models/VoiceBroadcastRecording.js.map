{"version":3,"file":"VoiceBroadcastRecording.js","names":["_logger","require","_matrix","_typedEventEmitter","_","_ContentMessages","_createVoiceMessageContent","_dispatcher","_interopRequireDefault","_VoiceBroadcastChunkEvents","_RelationsHelper","_connection","_notifications","VoiceBroadcastRecordingEvent","exports","VoiceBroadcastRecording","TypedEventEmitter","constructor","infoEvent","client","initialState","_defineProperty2","default","VoiceBroadcastChunkEvents","event","getId","getTxnId","getContent","msgtype","MsgType","Audio","chunkEvents","addEvent","state","toRetryCopy","toRetry","retryFn","splice","indexOf","length","pause","getState","VoiceBroadcastInfoState","Paused","resume","Started","Resumed","includes","Stopped","setState","destroy","payload","action","currentChunkLength","setTimeLeft","maxLength","getLengthSeconds","chunk","uploadAndSendFn","url","file","uploadFile","sendVoiceMessage","callWithRetry","getMaxBroadcastLength","timeLeft","infoEventId","determineEventIdFromInfoEvent","roomId","determineRoomIdFromInfoEvent","determineInitialStateFromInfoEvent","on","MatrixEventEvent","BeforeRedaction","onBeforeRedaction","dispatcherRef","dis","register","onAction","chunkRelationHelper","initialiseChunkEventRelation","reconnectedListener","createReconnectedListener","onReconnect","ClientEvent","Sync","relationsHelper","RelationsHelper","RelationType","Reference","EventType","RoomMessage","RelationsHelperEvent","Add","onChunkEvent","emitFetchCurrent","catch","err","logger","warn","emitCurrent","Error","getRoomId","room","getRoom","relations","getUnfilteredTimelineSet","getChildEventsForEvent","VoiceBroadcastInfoEventType","relatedEvents","getRelations","find","getTimeLeft","stop","emit","TimeLeftChanged","start","getRecorder","stopRecorder","sendInfoStateEvent","recorder","createVoiceBroadcastRecorder","VoiceBroadcastRecorderEvent","ChunkRecorded","onChunkRecorded","CurrentChunkLengthUpdated","onCurrentChunkLengthUpdated","off","removeAllListeners","unregister","StateChanged","onConnectionError","playConnectionErrorAudioNotification","localNotificationsAreSilenced","audioElement","document","querySelector","play","e","Blob","buffer","type","contentType","sequence","sendMessageFn","content","createVoiceMessageContent","Math","round","rel_type","event_id","sendMessage","sendEventFn","sendStateEvent","device_id","getDeviceId","last_chunk_sequence","getSafeUserId","retryAbleFn","push","arguments","undefined","lastChunk"],"sources":["../../../src/voice-broadcast/models/VoiceBroadcastRecording.ts"],"sourcesContent":["/*\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\nimport {\r\n    ClientEvent,\r\n    ClientEventHandlerMap,\r\n    EventType,\r\n    MatrixClient,\r\n    MatrixEvent,\r\n    MatrixEventEvent,\r\n    MsgType,\r\n    RelationType,\r\n} from \"matrix-js-sdk/src/matrix\";\r\nimport { TypedEventEmitter } from \"matrix-js-sdk/src/models/typed-event-emitter\";\r\n\r\nimport {\r\n    ChunkRecordedPayload,\r\n    createVoiceBroadcastRecorder,\r\n    getMaxBroadcastLength,\r\n    VoiceBroadcastInfoEventContent,\r\n    VoiceBroadcastInfoEventType,\r\n    VoiceBroadcastInfoState,\r\n    VoiceBroadcastRecorder,\r\n    VoiceBroadcastRecorderEvent,\r\n} from \"..\";\r\nimport { uploadFile } from \"../../ContentMessages\";\r\nimport { IEncryptedFile } from \"../../customisations/models/IMediaEventContent\";\r\nimport { createVoiceMessageContent } from \"../../utils/createVoiceMessageContent\";\r\nimport { IDestroyable } from \"../../utils/IDestroyable\";\r\nimport dis from \"../../dispatcher/dispatcher\";\r\nimport { ActionPayload } from \"../../dispatcher/payloads\";\r\nimport { VoiceBroadcastChunkEvents } from \"../utils/VoiceBroadcastChunkEvents\";\r\nimport { RelationsHelper, RelationsHelperEvent } from \"../../events/RelationsHelper\";\r\nimport { createReconnectedListener } from \"../../utils/connection\";\r\nimport { localNotificationsAreSilenced } from \"../../utils/notifications\";\r\n\r\nexport enum VoiceBroadcastRecordingEvent {\r\n    StateChanged = \"liveness_changed\",\r\n    TimeLeftChanged = \"time_left_changed\",\r\n}\r\n\r\nexport type VoiceBroadcastRecordingState = VoiceBroadcastInfoState | \"connection_error\";\r\n\r\ninterface EventMap {\r\n    [VoiceBroadcastRecordingEvent.StateChanged]: (state: VoiceBroadcastRecordingState) => void;\r\n    [VoiceBroadcastRecordingEvent.TimeLeftChanged]: (timeLeft: number) => void;\r\n}\r\n\r\nexport class VoiceBroadcastRecording\r\n    extends TypedEventEmitter<VoiceBroadcastRecordingEvent, EventMap>\r\n    implements IDestroyable\r\n{\r\n    private state: VoiceBroadcastRecordingState;\r\n    private recorder: VoiceBroadcastRecorder | null = null;\r\n    private dispatcherRef: string;\r\n    private chunkEvents = new VoiceBroadcastChunkEvents();\r\n    private chunkRelationHelper: RelationsHelper;\r\n    private maxLength: number;\r\n    private timeLeft: number;\r\n    private toRetry: Array<() => Promise<void>> = [];\r\n    private reconnectedListener: ClientEventHandlerMap[ClientEvent.Sync];\r\n    private roomId: string;\r\n    private infoEventId: string;\r\n\r\n    /**\r\n     * Broadcast chunks have a sequence number to bring them in the correct order and to know if a message is missing.\r\n     * This variable holds the last sequence number.\r\n     * Starts with 0 because there is no chunk at the beginning of a broadcast.\r\n     * Will be incremented when a chunk message is created.\r\n     */\r\n    private sequence = 0;\r\n\r\n    public constructor(\r\n        public readonly infoEvent: MatrixEvent,\r\n        private client: MatrixClient,\r\n        initialState?: VoiceBroadcastInfoState,\r\n    ) {\r\n        super();\r\n        this.maxLength = getMaxBroadcastLength();\r\n        this.timeLeft = this.maxLength;\r\n        this.infoEventId = this.determineEventIdFromInfoEvent();\r\n        this.roomId = this.determineRoomIdFromInfoEvent();\r\n\r\n        if (initialState) {\r\n            this.state = initialState;\r\n        } else {\r\n            this.state = this.determineInitialStateFromInfoEvent();\r\n        }\r\n\r\n        // TODO Michael W: listen for state updates\r\n\r\n        this.infoEvent.on(MatrixEventEvent.BeforeRedaction, this.onBeforeRedaction);\r\n        this.dispatcherRef = dis.register(this.onAction);\r\n        this.chunkRelationHelper = this.initialiseChunkEventRelation();\r\n        this.reconnectedListener = createReconnectedListener(this.onReconnect);\r\n        this.client.on(ClientEvent.Sync, this.reconnectedListener);\r\n    }\r\n\r\n    private initialiseChunkEventRelation(): RelationsHelper {\r\n        const relationsHelper = new RelationsHelper(\r\n            this.infoEvent,\r\n            RelationType.Reference,\r\n            EventType.RoomMessage,\r\n            this.client,\r\n        );\r\n        relationsHelper.on(RelationsHelperEvent.Add, this.onChunkEvent);\r\n\r\n        relationsHelper.emitFetchCurrent().catch((err) => {\r\n            logger.warn(\"error fetching server side relation for voice broadcast chunks\", err);\r\n            // fall back to local events\r\n            relationsHelper.emitCurrent();\r\n        });\r\n\r\n        return relationsHelper;\r\n    }\r\n\r\n    private onChunkEvent = (event: MatrixEvent): void => {\r\n        if (\r\n            (!event.getId() && !event.getTxnId()) ||\r\n            event.getContent()?.msgtype !== MsgType.Audio // don't add non-audio event\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this.chunkEvents.addEvent(event);\r\n    };\r\n\r\n    private determineEventIdFromInfoEvent(): string {\r\n        const infoEventId = this.infoEvent.getId();\r\n\r\n        if (!infoEventId) {\r\n            throw new Error(\"Cannot create broadcast for info event without Id.\");\r\n        }\r\n\r\n        return infoEventId;\r\n    }\r\n\r\n    private determineRoomIdFromInfoEvent(): string {\r\n        const roomId = this.infoEvent.getRoomId();\r\n\r\n        if (!roomId) {\r\n            throw new Error(`Cannot create broadcast for unknown room (info event ${this.infoEventId})`);\r\n        }\r\n\r\n        return roomId;\r\n    }\r\n\r\n    /**\r\n     * Determines the initial broadcast state.\r\n     * Checks all related events. If one has the \"stopped\" state â†’ stopped, else started.\r\n     */\r\n    private determineInitialStateFromInfoEvent(): VoiceBroadcastRecordingState {\r\n        const room = this.client.getRoom(this.roomId);\r\n        const relations = room\r\n            ?.getUnfilteredTimelineSet()\r\n            ?.relations?.getChildEventsForEvent(this.infoEventId, RelationType.Reference, VoiceBroadcastInfoEventType);\r\n        const relatedEvents = relations?.getRelations();\r\n        return !relatedEvents?.find((event: MatrixEvent) => {\r\n            return event.getContent()?.state === VoiceBroadcastInfoState.Stopped;\r\n        })\r\n            ? VoiceBroadcastInfoState.Started\r\n            : VoiceBroadcastInfoState.Stopped;\r\n    }\r\n\r\n    public getTimeLeft(): number {\r\n        return this.timeLeft;\r\n    }\r\n\r\n    /**\r\n     * Retries failed actions on reconnect.\r\n     */\r\n    private onReconnect = async (): Promise<void> => {\r\n        // Do nothing if not in connection_error state.\r\n        if (this.state !== \"connection_error\") return;\r\n\r\n        // Copy the array, so that it is possible to remove elements from it while iterating over the original.\r\n        const toRetryCopy = [...this.toRetry];\r\n\r\n        for (const retryFn of this.toRetry) {\r\n            try {\r\n                await retryFn();\r\n                // Successfully retried. Remove from array copy.\r\n                toRetryCopy.splice(toRetryCopy.indexOf(retryFn), 1);\r\n            } catch {\r\n                // The current retry callback failed. Stop the loop.\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.toRetry = toRetryCopy;\r\n\r\n        if (this.toRetry.length === 0) {\r\n            // Everything has been successfully retried. Recover from error state to paused.\r\n            await this.pause();\r\n        }\r\n    };\r\n\r\n    private async setTimeLeft(timeLeft: number): Promise<void> {\r\n        if (timeLeft <= 0) {\r\n            // time is up - stop the recording\r\n            return await this.stop();\r\n        }\r\n\r\n        // do never increase time left; no action if equals\r\n        if (timeLeft >= this.timeLeft) return;\r\n\r\n        this.timeLeft = timeLeft;\r\n        this.emit(VoiceBroadcastRecordingEvent.TimeLeftChanged, timeLeft);\r\n    }\r\n\r\n    public async start(): Promise<void> {\r\n        return this.getRecorder().start();\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        if (this.state === VoiceBroadcastInfoState.Stopped) return;\r\n\r\n        this.setState(VoiceBroadcastInfoState.Stopped);\r\n        await this.stopRecorder();\r\n        await this.sendInfoStateEvent(VoiceBroadcastInfoState.Stopped);\r\n    }\r\n\r\n    public async pause(): Promise<void> {\r\n        // stopped or already paused recordings cannot be paused\r\n        if (\r\n            (\r\n                [VoiceBroadcastInfoState.Stopped, VoiceBroadcastInfoState.Paused] as VoiceBroadcastRecordingState[]\r\n            ).includes(this.state)\r\n        )\r\n            return;\r\n\r\n        this.setState(VoiceBroadcastInfoState.Paused);\r\n        await this.stopRecorder();\r\n        await this.sendInfoStateEvent(VoiceBroadcastInfoState.Paused);\r\n    }\r\n\r\n    public async resume(): Promise<void> {\r\n        if (this.state !== VoiceBroadcastInfoState.Paused) return;\r\n\r\n        this.setState(VoiceBroadcastInfoState.Resumed);\r\n        await this.getRecorder().start();\r\n        await this.sendInfoStateEvent(VoiceBroadcastInfoState.Resumed);\r\n    }\r\n\r\n    public toggle = async (): Promise<void> => {\r\n        if (this.getState() === VoiceBroadcastInfoState.Paused) return this.resume();\r\n\r\n        if (\r\n            (\r\n                [VoiceBroadcastInfoState.Started, VoiceBroadcastInfoState.Resumed] as VoiceBroadcastRecordingState[]\r\n            ).includes(this.getState())\r\n        ) {\r\n            return this.pause();\r\n        }\r\n    };\r\n\r\n    public getState(): VoiceBroadcastRecordingState {\r\n        return this.state;\r\n    }\r\n\r\n    private getRecorder(): VoiceBroadcastRecorder {\r\n        if (!this.recorder) {\r\n            this.recorder = createVoiceBroadcastRecorder();\r\n            this.recorder.on(VoiceBroadcastRecorderEvent.ChunkRecorded, this.onChunkRecorded);\r\n            this.recorder.on(VoiceBroadcastRecorderEvent.CurrentChunkLengthUpdated, this.onCurrentChunkLengthUpdated);\r\n        }\r\n\r\n        return this.recorder;\r\n    }\r\n\r\n    public async destroy(): Promise<void> {\r\n        if (this.recorder) {\r\n            this.recorder.stop();\r\n            this.recorder.destroy();\r\n        }\r\n\r\n        this.infoEvent.off(MatrixEventEvent.BeforeRedaction, this.onBeforeRedaction);\r\n        this.removeAllListeners();\r\n        dis.unregister(this.dispatcherRef);\r\n        this.chunkEvents = new VoiceBroadcastChunkEvents();\r\n        this.chunkRelationHelper.destroy();\r\n        this.client.off(ClientEvent.Sync, this.reconnectedListener);\r\n    }\r\n\r\n    private onBeforeRedaction = (): void => {\r\n        if (this.getState() !== VoiceBroadcastInfoState.Stopped) {\r\n            this.setState(VoiceBroadcastInfoState.Stopped);\r\n            // destroy cleans up everything\r\n            this.destroy();\r\n        }\r\n    };\r\n\r\n    private onAction = (payload: ActionPayload): void => {\r\n        if (payload.action !== \"call_state\") return;\r\n\r\n        // pause on any call action\r\n        this.pause();\r\n    };\r\n\r\n    private setState(state: VoiceBroadcastRecordingState): void {\r\n        this.state = state;\r\n        this.emit(VoiceBroadcastRecordingEvent.StateChanged, this.state);\r\n    }\r\n\r\n    private onCurrentChunkLengthUpdated = (currentChunkLength: number): void => {\r\n        this.setTimeLeft(this.maxLength - this.chunkEvents.getLengthSeconds() - currentChunkLength);\r\n    };\r\n\r\n    private onChunkRecorded = async (chunk: ChunkRecordedPayload): Promise<void> => {\r\n        const uploadAndSendFn = async (): Promise<void> => {\r\n            const { url, file } = await this.uploadFile(chunk);\r\n            await this.sendVoiceMessage(chunk, url, file);\r\n        };\r\n\r\n        await this.callWithRetry(uploadAndSendFn);\r\n    };\r\n\r\n    /**\r\n     * This function is called on connection errors.\r\n     * It sets the connection error state and stops the recorder.\r\n     */\r\n    private async onConnectionError(): Promise<void> {\r\n        this.playConnectionErrorAudioNotification().catch(() => {\r\n            // Error logged in playConnectionErrorAudioNotification().\r\n        });\r\n        await this.stopRecorder(false);\r\n        this.setState(\"connection_error\");\r\n    }\r\n\r\n    private async playConnectionErrorAudioNotification(): Promise<void> {\r\n        if (localNotificationsAreSilenced(this.client)) {\r\n            return;\r\n        }\r\n\r\n        // Audio files are added to the document in Element Web.\r\n        // See <audio> elements in https://github.com/vector-im/element-web/blob/develop/src/vector/index.html\r\n        const audioElement = document.querySelector<HTMLAudioElement>(\"audio#errorAudio\");\r\n\r\n        try {\r\n            await audioElement?.play();\r\n        } catch (e) {\r\n            logger.warn(\"error playing 'errorAudio'\", e);\r\n        }\r\n    }\r\n\r\n    private async uploadFile(chunk: ChunkRecordedPayload): ReturnType<typeof uploadFile> {\r\n        return uploadFile(\r\n            this.client,\r\n            this.roomId,\r\n            new Blob([chunk.buffer], {\r\n                type: this.getRecorder().contentType,\r\n            }),\r\n        );\r\n    }\r\n\r\n    private async sendVoiceMessage(chunk: ChunkRecordedPayload, url?: string, file?: IEncryptedFile): Promise<void> {\r\n        /**\r\n         * Increment the last sequence number and use it for this message.\r\n         * Done outside of the sendMessageFn to get a scoped value.\r\n         * Also see {@link VoiceBroadcastRecording.sequence}.\r\n         */\r\n        const sequence = ++this.sequence;\r\n\r\n        const sendMessageFn = async (): Promise<void> => {\r\n            const content = createVoiceMessageContent(\r\n                url,\r\n                this.getRecorder().contentType,\r\n                Math.round(chunk.length * 1000),\r\n                chunk.buffer.length,\r\n                file,\r\n            );\r\n            content[\"m.relates_to\"] = {\r\n                rel_type: RelationType.Reference,\r\n                event_id: this.infoEventId,\r\n            };\r\n            content[\"io.element.voice_broadcast_chunk\"] = {\r\n                sequence,\r\n            };\r\n\r\n            await this.client.sendMessage(this.roomId, content);\r\n        };\r\n\r\n        await this.callWithRetry(sendMessageFn);\r\n    }\r\n\r\n    /**\r\n     * Sends an info state event with given state.\r\n     * On error stores a resend function and setState(state) in {@link toRetry} and\r\n     * sets the broadcast state to connection_error.\r\n     */\r\n    private async sendInfoStateEvent(state: VoiceBroadcastInfoState): Promise<void> {\r\n        const sendEventFn = async (): Promise<void> => {\r\n            await this.client.sendStateEvent(\r\n                this.roomId,\r\n                VoiceBroadcastInfoEventType,\r\n                {\r\n                    device_id: this.client.getDeviceId(),\r\n                    state,\r\n                    last_chunk_sequence: this.sequence,\r\n                    [\"m.relates_to\"]: {\r\n                        rel_type: RelationType.Reference,\r\n                        event_id: this.infoEventId,\r\n                    },\r\n                } as VoiceBroadcastInfoEventContent,\r\n                this.client.getSafeUserId(),\r\n            );\r\n        };\r\n\r\n        await this.callWithRetry(sendEventFn);\r\n    }\r\n\r\n    /**\r\n     * Calls the function.\r\n     * On failure adds it to the retry list and triggers connection error.\r\n     * {@link toRetry}\r\n     * {@link onConnectionError}\r\n     */\r\n    private async callWithRetry(retryAbleFn: () => Promise<void>): Promise<void> {\r\n        try {\r\n            await retryAbleFn();\r\n        } catch {\r\n            this.toRetry.push(retryAbleFn);\r\n            this.onConnectionError();\r\n        }\r\n    }\r\n\r\n    private async stopRecorder(emit = true): Promise<void> {\r\n        if (!this.recorder) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const lastChunk = await this.recorder.stop();\r\n            if (lastChunk && emit) {\r\n                await this.onChunkRecorded(lastChunk);\r\n            }\r\n        } catch (err) {\r\n            logger.warn(\"error stopping voice broadcast recorder\", err);\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;AAgBA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AAUA,IAAAE,kBAAA,GAAAF,OAAA;AAEA,IAAAG,CAAA,GAAAH,OAAA;AAUA,IAAAI,gBAAA,GAAAJ,OAAA;AAEA,IAAAK,0BAAA,GAAAL,OAAA;AAEA,IAAAM,WAAA,GAAAC,sBAAA,CAAAP,OAAA;AAEA,IAAAQ,0BAAA,GAAAR,OAAA;AACA,IAAAS,gBAAA,GAAAT,OAAA;AACA,IAAAU,WAAA,GAAAV,OAAA;AACA,IAAAW,cAAA,GAAAX,OAAA;AAhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA,IAkDYY,4BAA4B,0BAA5BA,4BAA4B;EAA5BA,4BAA4B;EAA5BA,4BAA4B;EAAA,OAA5BA,4BAA4B;AAAA;AAAAC,OAAA,CAAAD,4BAAA,GAAAA,4BAAA;AAYjC,MAAME,uBAAuB,SACxBC,oCAAiB,CAE7B;EAqBWC,WAAWA,CACEC,SAAsB,EAC9BC,MAAoB,EAC5BC,YAAsC,EACxC;IACE,KAAK,CAAC,CAAC;IAAC,KAJQF,SAAsB,GAAtBA,SAAsB;IAAA,KAC9BC,MAAoB,GAApBA,MAAoB;IAAA,IAAAE,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA,oBArBkB,IAAI;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA,uBAEhC,IAAIC,oDAAyB,CAAC,CAAC;IAAA,IAAAF,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA,mBAIP,EAAE;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAKhD;AACJ;AACA;AACA;AACA;AACA;IALI,IAAAD,gBAAA,CAAAC,OAAA,oBAMmB,CAAC;IAAA,IAAAD,gBAAA,CAAAC,OAAA,wBA8CIE,KAAkB,IAAW;MACjD,IACK,CAACA,KAAK,CAACC,KAAK,CAAC,CAAC,IAAI,CAACD,KAAK,CAACE,QAAQ,CAAC,CAAC,IACpCF,KAAK,CAACG,UAAU,CAAC,CAAC,EAAEC,OAAO,KAAKC,eAAO,CAACC,KAAK,CAAC;MAAA,EAChD;QACE;MACJ;MAEA,IAAI,CAACC,WAAW,CAACC,QAAQ,CAACR,KAAK,CAAC;IACpC,CAAC;IA2CD;AACJ;AACA;IAFI,IAAAH,gBAAA,CAAAC,OAAA,uBAGsB,YAA2B;MAC7C;MACA,IAAI,IAAI,CAACW,KAAK,KAAK,kBAAkB,EAAE;;MAEvC;MACA,MAAMC,WAAW,GAAG,CAAC,GAAG,IAAI,CAACC,OAAO,CAAC;MAErC,KAAK,MAAMC,OAAO,IAAI,IAAI,CAACD,OAAO,EAAE;QAChC,IAAI;UACA,MAAMC,OAAO,CAAC,CAAC;UACf;UACAF,WAAW,CAACG,MAAM,CAACH,WAAW,CAACI,OAAO,CAACF,OAAO,CAAC,EAAE,CAAC,CAAC;QACvD,CAAC,CAAC,MAAM;UACJ;UACA;QACJ;MACJ;MAEA,IAAI,CAACD,OAAO,GAAGD,WAAW;MAE1B,IAAI,IAAI,CAACC,OAAO,CAACI,MAAM,KAAK,CAAC,EAAE;QAC3B;QACA,MAAM,IAAI,CAACC,KAAK,CAAC,CAAC;MACtB;IACJ,CAAC;IAAA,IAAAnB,gBAAA,CAAAC,OAAA,kBAiDe,YAA2B;MACvC,IAAI,IAAI,CAACmB,QAAQ,CAAC,CAAC,KAAKC,yBAAuB,CAACC,MAAM,EAAE,OAAO,IAAI,CAACC,MAAM,CAAC,CAAC;MAE5E,IAEQ,CAACF,yBAAuB,CAACG,OAAO,EAAEH,yBAAuB,CAACI,OAAO,CAAC,CACpEC,QAAQ,CAAC,IAAI,CAACN,QAAQ,CAAC,CAAC,CAAC,EAC7B;QACE,OAAO,IAAI,CAACD,KAAK,CAAC,CAAC;MACvB;IACJ,CAAC;IAAA,IAAAnB,gBAAA,CAAAC,OAAA,6BA8B2B,MAAY;MACpC,IAAI,IAAI,CAACmB,QAAQ,CAAC,CAAC,KAAKC,yBAAuB,CAACM,OAAO,EAAE;QACrD,IAAI,CAACC,QAAQ,CAACP,yBAAuB,CAACM,OAAO,CAAC;QAC9C;QACA,IAAI,CAACE,OAAO,CAAC,CAAC;MAClB;IACJ,CAAC;IAAA,IAAA7B,gBAAA,CAAAC,OAAA,oBAEmB6B,OAAsB,IAAW;MACjD,IAAIA,OAAO,CAACC,MAAM,KAAK,YAAY,EAAE;;MAErC;MACA,IAAI,CAACZ,KAAK,CAAC,CAAC;IAChB,CAAC;IAAA,IAAAnB,gBAAA,CAAAC,OAAA,uCAOsC+B,kBAA0B,IAAW;MACxE,IAAI,CAACC,WAAW,CAAC,IAAI,CAACC,SAAS,GAAG,IAAI,CAACxB,WAAW,CAACyB,gBAAgB,CAAC,CAAC,GAAGH,kBAAkB,CAAC;IAC/F,CAAC;IAAA,IAAAhC,gBAAA,CAAAC,OAAA,2BAEyB,MAAOmC,KAA2B,IAAoB;MAC5E,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAA2B;QAC/C,MAAM;UAAEC,GAAG;UAAEC;QAAK,CAAC,GAAG,MAAM,IAAI,CAACC,UAAU,CAACJ,KAAK,CAAC;QAClD,MAAM,IAAI,CAACK,gBAAgB,CAACL,KAAK,EAAEE,GAAG,EAAEC,IAAI,CAAC;MACjD,CAAC;MAED,MAAM,IAAI,CAACG,aAAa,CAACL,eAAe,CAAC;IAC7C,CAAC;IA7OG,IAAI,CAACH,SAAS,GAAG,IAAAS,uBAAqB,EAAC,CAAC;IACxC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACV,SAAS;IAC9B,IAAI,CAACW,WAAW,GAAG,IAAI,CAACC,6BAA6B,CAAC,CAAC;IACvD,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,4BAA4B,CAAC,CAAC;IAEjD,IAAIjD,YAAY,EAAE;MACd,IAAI,CAACa,KAAK,GAAGb,YAAY;IAC7B,CAAC,MAAM;MACH,IAAI,CAACa,KAAK,GAAG,IAAI,CAACqC,kCAAkC,CAAC,CAAC;IAC1D;;IAEA;;IAEA,IAAI,CAACpD,SAAS,CAACqD,EAAE,CAACC,wBAAgB,CAACC,eAAe,EAAE,IAAI,CAACC,iBAAiB,CAAC;IAC3E,IAAI,CAACC,aAAa,GAAGC,mBAAG,CAACC,QAAQ,CAAC,IAAI,CAACC,QAAQ,CAAC;IAChD,IAAI,CAACC,mBAAmB,GAAG,IAAI,CAACC,4BAA4B,CAAC,CAAC;IAC9D,IAAI,CAACC,mBAAmB,GAAG,IAAAC,qCAAyB,EAAC,IAAI,CAACC,WAAW,CAAC;IACtE,IAAI,CAAChE,MAAM,CAACoD,EAAE,CAACa,mBAAW,CAACC,IAAI,EAAE,IAAI,CAACJ,mBAAmB,CAAC;EAC9D;EAEQD,4BAA4BA,CAAA,EAAoB;IACpD,MAAMM,eAAe,GAAG,IAAIC,gCAAe,CACvC,IAAI,CAACrE,SAAS,EACdsE,oBAAY,CAACC,SAAS,EACtBC,iBAAS,CAACC,WAAW,EACrB,IAAI,CAACxE,MACT,CAAC;IACDmE,eAAe,CAACf,EAAE,CAACqB,qCAAoB,CAACC,GAAG,EAAE,IAAI,CAACC,YAAY,CAAC;IAE/DR,eAAe,CAACS,gBAAgB,CAAC,CAAC,CAACC,KAAK,CAAEC,GAAG,IAAK;MAC9CC,cAAM,CAACC,IAAI,CAAC,gEAAgE,EAAEF,GAAG,CAAC;MAClF;MACAX,eAAe,CAACc,WAAW,CAAC,CAAC;IACjC,CAAC,CAAC;IAEF,OAAOd,eAAe;EAC1B;EAaQnB,6BAA6BA,CAAA,EAAW;IAC5C,MAAMD,WAAW,GAAG,IAAI,CAAChD,SAAS,CAACO,KAAK,CAAC,CAAC;IAE1C,IAAI,CAACyC,WAAW,EAAE;MACd,MAAM,IAAImC,KAAK,CAAC,oDAAoD,CAAC;IACzE;IAEA,OAAOnC,WAAW;EACtB;EAEQG,4BAA4BA,CAAA,EAAW;IAC3C,MAAMD,MAAM,GAAG,IAAI,CAAClD,SAAS,CAACoF,SAAS,CAAC,CAAC;IAEzC,IAAI,CAAClC,MAAM,EAAE;MACT,MAAM,IAAIiC,KAAK,CAAE,wDAAuD,IAAI,CAACnC,WAAY,GAAE,CAAC;IAChG;IAEA,OAAOE,MAAM;EACjB;;EAEA;AACJ;AACA;AACA;EACYE,kCAAkCA,CAAA,EAAiC;IACvE,MAAMiC,IAAI,GAAG,IAAI,CAACpF,MAAM,CAACqF,OAAO,CAAC,IAAI,CAACpC,MAAM,CAAC;IAC7C,MAAMqC,SAAS,GAAGF,IAAI,EAChBG,wBAAwB,CAAC,CAAC,EAC1BD,SAAS,EAAEE,sBAAsB,CAAC,IAAI,CAACzC,WAAW,EAAEsB,oBAAY,CAACC,SAAS,EAAEmB,6BAA2B,CAAC;IAC9G,MAAMC,aAAa,GAAGJ,SAAS,EAAEK,YAAY,CAAC,CAAC;IAC/C,OAAO,CAACD,aAAa,EAAEE,IAAI,CAAEvF,KAAkB,IAAK;MAChD,OAAOA,KAAK,CAACG,UAAU,CAAC,CAAC,EAAEM,KAAK,KAAKS,yBAAuB,CAACM,OAAO;IACxE,CAAC,CAAC,GACIN,yBAAuB,CAACG,OAAO,GAC/BH,yBAAuB,CAACM,OAAO;EACzC;EAEOgE,WAAWA,CAAA,EAAW;IACzB,OAAO,IAAI,CAAC/C,QAAQ;EACxB;EA+BA,MAAcX,WAAWA,CAACW,QAAgB,EAAiB;IACvD,IAAIA,QAAQ,IAAI,CAAC,EAAE;MACf;MACA,OAAO,MAAM,IAAI,CAACgD,IAAI,CAAC,CAAC;IAC5B;;IAEA;IACA,IAAIhD,QAAQ,IAAI,IAAI,CAACA,QAAQ,EAAE;IAE/B,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACiD,IAAI,CAACrG,4BAA4B,CAACsG,eAAe,EAAElD,QAAQ,CAAC;EACrE;EAEA,MAAamD,KAAKA,CAAA,EAAkB;IAChC,OAAO,IAAI,CAACC,WAAW,CAAC,CAAC,CAACD,KAAK,CAAC,CAAC;EACrC;EAEA,MAAaH,IAAIA,CAAA,EAAkB;IAC/B,IAAI,IAAI,CAAChF,KAAK,KAAKS,yBAAuB,CAACM,OAAO,EAAE;IAEpD,IAAI,CAACC,QAAQ,CAACP,yBAAuB,CAACM,OAAO,CAAC;IAC9C,MAAM,IAAI,CAACsE,YAAY,CAAC,CAAC;IACzB,MAAM,IAAI,CAACC,kBAAkB,CAAC7E,yBAAuB,CAACM,OAAO,CAAC;EAClE;EAEA,MAAaR,KAAKA,CAAA,EAAkB;IAChC;IACA,IAEQ,CAACE,yBAAuB,CAACM,OAAO,EAAEN,yBAAuB,CAACC,MAAM,CAAC,CACnEI,QAAQ,CAAC,IAAI,CAACd,KAAK,CAAC,EAEtB;IAEJ,IAAI,CAACgB,QAAQ,CAACP,yBAAuB,CAACC,MAAM,CAAC;IAC7C,MAAM,IAAI,CAAC2E,YAAY,CAAC,CAAC;IACzB,MAAM,IAAI,CAACC,kBAAkB,CAAC7E,yBAAuB,CAACC,MAAM,CAAC;EACjE;EAEA,MAAaC,MAAMA,CAAA,EAAkB;IACjC,IAAI,IAAI,CAACX,KAAK,KAAKS,yBAAuB,CAACC,MAAM,EAAE;IAEnD,IAAI,CAACM,QAAQ,CAACP,yBAAuB,CAACI,OAAO,CAAC;IAC9C,MAAM,IAAI,CAACuE,WAAW,CAAC,CAAC,CAACD,KAAK,CAAC,CAAC;IAChC,MAAM,IAAI,CAACG,kBAAkB,CAAC7E,yBAAuB,CAACI,OAAO,CAAC;EAClE;EAcOL,QAAQA,CAAA,EAAiC;IAC5C,OAAO,IAAI,CAACR,KAAK;EACrB;EAEQoF,WAAWA,CAAA,EAA2B;IAC1C,IAAI,CAAC,IAAI,CAACG,QAAQ,EAAE;MAChB,IAAI,CAACA,QAAQ,GAAG,IAAAC,8BAA4B,EAAC,CAAC;MAC9C,IAAI,CAACD,QAAQ,CAACjD,EAAE,CAACmD,6BAA2B,CAACC,aAAa,EAAE,IAAI,CAACC,eAAe,CAAC;MACjF,IAAI,CAACJ,QAAQ,CAACjD,EAAE,CAACmD,6BAA2B,CAACG,yBAAyB,EAAE,IAAI,CAACC,2BAA2B,CAAC;IAC7G;IAEA,OAAO,IAAI,CAACN,QAAQ;EACxB;EAEA,MAAatE,OAAOA,CAAA,EAAkB;IAClC,IAAI,IAAI,CAACsE,QAAQ,EAAE;MACf,IAAI,CAACA,QAAQ,CAACP,IAAI,CAAC,CAAC;MACpB,IAAI,CAACO,QAAQ,CAACtE,OAAO,CAAC,CAAC;IAC3B;IAEA,IAAI,CAAChC,SAAS,CAAC6G,GAAG,CAACvD,wBAAgB,CAACC,eAAe,EAAE,IAAI,CAACC,iBAAiB,CAAC;IAC5E,IAAI,CAACsD,kBAAkB,CAAC,CAAC;IACzBpD,mBAAG,CAACqD,UAAU,CAAC,IAAI,CAACtD,aAAa,CAAC;IAClC,IAAI,CAAC5C,WAAW,GAAG,IAAIR,oDAAyB,CAAC,CAAC;IAClD,IAAI,CAACwD,mBAAmB,CAAC7B,OAAO,CAAC,CAAC;IAClC,IAAI,CAAC/B,MAAM,CAAC4G,GAAG,CAAC3C,mBAAW,CAACC,IAAI,EAAE,IAAI,CAACJ,mBAAmB,CAAC;EAC/D;EAiBQhC,QAAQA,CAAChB,KAAmC,EAAQ;IACxD,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACiF,IAAI,CAACrG,4BAA4B,CAACqH,YAAY,EAAE,IAAI,CAACjG,KAAK,CAAC;EACpE;EAeA;AACJ;AACA;AACA;EACI,MAAckG,iBAAiBA,CAAA,EAAkB;IAC7C,IAAI,CAACC,oCAAoC,CAAC,CAAC,CAACpC,KAAK,CAAC,MAAM;MACpD;IAAA,CACH,CAAC;IACF,MAAM,IAAI,CAACsB,YAAY,CAAC,KAAK,CAAC;IAC9B,IAAI,CAACrE,QAAQ,CAAC,kBAAkB,CAAC;EACrC;EAEA,MAAcmF,oCAAoCA,CAAA,EAAkB;IAChE,IAAI,IAAAC,4CAA6B,EAAC,IAAI,CAAClH,MAAM,CAAC,EAAE;MAC5C;IACJ;;IAEA;IACA;IACA,MAAMmH,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAmB,kBAAkB,CAAC;IAEjF,IAAI;MACA,MAAMF,YAAY,EAAEG,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,CAAC,EAAE;MACRxC,cAAM,CAACC,IAAI,CAAC,4BAA4B,EAAEuC,CAAC,CAAC;IAChD;EACJ;EAEA,MAAc7E,UAAUA,CAACJ,KAA2B,EAAiC;IACjF,OAAO,IAAAI,2BAAU,EACb,IAAI,CAAC1C,MAAM,EACX,IAAI,CAACiD,MAAM,EACX,IAAIuE,IAAI,CAAC,CAAClF,KAAK,CAACmF,MAAM,CAAC,EAAE;MACrBC,IAAI,EAAE,IAAI,CAACxB,WAAW,CAAC,CAAC,CAACyB;IAC7B,CAAC,CACL,CAAC;EACL;EAEA,MAAchF,gBAAgBA,CAACL,KAA2B,EAAEE,GAAY,EAAEC,IAAqB,EAAiB;IAC5G;AACR;AACA;AACA;AACA;IACQ,MAAMmF,QAAQ,GAAG,EAAE,IAAI,CAACA,QAAQ;IAEhC,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAA2B;MAC7C,MAAMC,OAAO,GAAG,IAAAC,oDAAyB,EACrCvF,GAAG,EACH,IAAI,CAAC0D,WAAW,CAAC,CAAC,CAACyB,WAAW,EAC9BK,IAAI,CAACC,KAAK,CAAC3F,KAAK,CAAClB,MAAM,GAAG,IAAI,CAAC,EAC/BkB,KAAK,CAACmF,MAAM,CAACrG,MAAM,EACnBqB,IACJ,CAAC;MACDqF,OAAO,CAAC,cAAc,CAAC,GAAG;QACtBI,QAAQ,EAAE7D,oBAAY,CAACC,SAAS;QAChC6D,QAAQ,EAAE,IAAI,CAACpF;MACnB,CAAC;MACD+E,OAAO,CAAC,kCAAkC,CAAC,GAAG;QAC1CF;MACJ,CAAC;MAED,MAAM,IAAI,CAAC5H,MAAM,CAACoI,WAAW,CAAC,IAAI,CAACnF,MAAM,EAAE6E,OAAO,CAAC;IACvD,CAAC;IAED,MAAM,IAAI,CAAClF,aAAa,CAACiF,aAAa,CAAC;EAC3C;;EAEA;AACJ;AACA;AACA;AACA;EACI,MAAczB,kBAAkBA,CAACtF,KAA8B,EAAiB;IAC5E,MAAMuH,WAAW,GAAG,MAAAA,CAAA,KAA2B;MAC3C,MAAM,IAAI,CAACrI,MAAM,CAACsI,cAAc,CAC5B,IAAI,CAACrF,MAAM,EACXwC,6BAA2B,EAC3B;QACI8C,SAAS,EAAE,IAAI,CAACvI,MAAM,CAACwI,WAAW,CAAC,CAAC;QACpC1H,KAAK;QACL2H,mBAAmB,EAAE,IAAI,CAACb,QAAQ;QAClC,CAAC,cAAc,GAAG;UACdM,QAAQ,EAAE7D,oBAAY,CAACC,SAAS;UAChC6D,QAAQ,EAAE,IAAI,CAACpF;QACnB;MACJ,CAAC,EACD,IAAI,CAAC/C,MAAM,CAAC0I,aAAa,CAAC,CAC9B,CAAC;IACL,CAAC;IAED,MAAM,IAAI,CAAC9F,aAAa,CAACyF,WAAW,CAAC;EACzC;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAczF,aAAaA,CAAC+F,WAAgC,EAAiB;IACzE,IAAI;MACA,MAAMA,WAAW,CAAC,CAAC;IACvB,CAAC,CAAC,MAAM;MACJ,IAAI,CAAC3H,OAAO,CAAC4H,IAAI,CAACD,WAAW,CAAC;MAC9B,IAAI,CAAC3B,iBAAiB,CAAC,CAAC;IAC5B;EACJ;EAEA,MAAcb,YAAYA,CAAA,EAA6B;IAAA,IAA5BJ,IAAI,GAAA8C,SAAA,CAAAzH,MAAA,QAAAyH,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI;IAClC,IAAI,CAAC,IAAI,CAACxC,QAAQ,EAAE;MAChB;IACJ;IAEA,IAAI;MACA,MAAM0C,SAAS,GAAG,MAAM,IAAI,CAAC1C,QAAQ,CAACP,IAAI,CAAC,CAAC;MAC5C,IAAIiD,SAAS,IAAIhD,IAAI,EAAE;QACnB,MAAM,IAAI,CAACU,eAAe,CAACsC,SAAS,CAAC;MACzC;IACJ,CAAC,CAAC,OAAOjE,GAAG,EAAE;MACVC,cAAM,CAACC,IAAI,CAAC,yCAAyC,EAAEF,GAAG,CAAC;IAC/D;EACJ;AACJ;AAACnF,OAAA,CAAAC,uBAAA,GAAAA,uBAAA"}