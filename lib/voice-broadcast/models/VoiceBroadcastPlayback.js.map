{"version":3,"file":"VoiceBroadcastPlayback.js","names":["_matrix","require","_typedEventEmitter","_matrixWidgetApi","_logger","_utils","_Playback","_PlaybackManager","_AsyncStore","_MediaEventHelper","_","_RelationsHelper","_VoiceBroadcastChunkEvents","_determineVoiceBroadcastLiveness","_languageHandler","VoiceBroadcastPlaybackState","exports","VoiceBroadcastPlaybackEvent","VoiceBroadcastPlayback","TypedEventEmitter","constructor","infoEvent","client","recordings","_defineProperty2","default","Stopped","VoiceBroadcastChunkEvents","Map","SimpleObservable","event","getId","getTxnId","isDecryptionFailure","onChunkEventDecryptionFailure","getContent","msgtype","MsgType","Audio","chunkEvents","addEvent","setDuration","getLength","getState","Buffering","startOrPlayNext","eventId","logger","warn","broadcast","utdChunkEvents","has","once","MatrixEventEvent","Decrypted","onChunkEventDecrypted","set","setError","delete","addChunkEvent","size","setState","Paused","currentlyPlaying","playNext","start","lastInfoEvent","getTs","state","Object","values","VoiceBroadcastInfoState","includes","setInfoState","stop","destroy","position","newPosition","getLengthTo","setPosition","newState","PlaybackState","unloadPlayback","addInfoEvent","on","BeforeRedaction","onBeforeRedaction","setUpRelationsHelper","infoRelationHelper","RelationsHelper","RelationType","Reference","VoiceBroadcastInfoEventType","getCurrent","forEach","infoState","RelationsHelperEvent","Add","emitFetchCurrent","err","emitCurrent","chunkRelationHelper","EventType","RoomMessage","tryLoadPlayback","chunkEvent","loadPlayback","message","broadcastId","chunkId","Error","helper","MediaEventHelper","blob","sourceBlob","value","buffer","arrayBuffer","playback","PlaybackManager","instance","createPlaybackInstance","prepare","clockInfo","populatePlaceholdersFrom","playbacks","UPDATE_EVENT","onPlaybackStateChange","liveData","onUpdate","_ref","onPlaybackPositionUpdate","get","duration","emitTimesChanged","update","timeSeconds","durationSeconds","emit","TimesChanged","timeLeft","timeLeftSeconds","next","getNext","playEvent","getInfoState","getSequenceForEvent","lastChunkSequence","last_chunk_sequence","getNumberOfEvents","Playing","tryGetOrLoadPlaybackForEvent","play","getOrLoadPlaybackForEvent","currentState","nextEvent","getCurrentPlayback","getLiveness","liveness","setLiveness","LivenessChanged","Math","max","round","skipTo","skipToNext","skipToDeferred","promise","defer","undefined","doSkipTo","resolve","time","findByTime","currentPlayback","skipToPlayback","currentPlaybackEvent","off","offsetInChunk","isPlaying","currentRecording","shouldStopRecording","showConfirmListenBroadcastStopCurrentDialog","getEvents","toPlay","length","pause","resume","toggle","StateChanged","InfoStateChanged","determineVoiceBroadcastLiveness","errorMessage","_t","utdEvent","clear","removeAllListeners","p"],"sources":["../../../src/voice-broadcast/models/VoiceBroadcastPlayback.ts"],"sourcesContent":["/*\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport {\r\n    EventType,\r\n    MatrixClient,\r\n    MatrixEvent,\r\n    MatrixEventEvent,\r\n    MsgType,\r\n    RelationType,\r\n} from \"matrix-js-sdk/src/matrix\";\r\nimport { TypedEventEmitter } from \"matrix-js-sdk/src/models/typed-event-emitter\";\r\nimport { SimpleObservable } from \"matrix-widget-api\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\nimport { defer, IDeferred } from \"matrix-js-sdk/src/utils\";\r\n\r\nimport { Playback, PlaybackInterface, PlaybackState } from \"../../audio/Playback\";\r\nimport { PlaybackManager } from \"../../audio/PlaybackManager\";\r\nimport { UPDATE_EVENT } from \"../../stores/AsyncStore\";\r\nimport { MediaEventHelper } from \"../../utils/MediaEventHelper\";\r\nimport { IDestroyable } from \"../../utils/IDestroyable\";\r\nimport {\r\n    VoiceBroadcastLiveness,\r\n    VoiceBroadcastInfoEventType,\r\n    VoiceBroadcastInfoState,\r\n    VoiceBroadcastInfoEventContent,\r\n    VoiceBroadcastRecordingsStore,\r\n    showConfirmListenBroadcastStopCurrentDialog,\r\n} from \"..\";\r\nimport { RelationsHelper, RelationsHelperEvent } from \"../../events/RelationsHelper\";\r\nimport { VoiceBroadcastChunkEvents } from \"../utils/VoiceBroadcastChunkEvents\";\r\nimport { determineVoiceBroadcastLiveness } from \"../utils/determineVoiceBroadcastLiveness\";\r\nimport { _t } from \"../../languageHandler\";\r\n\r\nexport enum VoiceBroadcastPlaybackState {\r\n    Paused = \"pause\",\r\n    Playing = \"playing\",\r\n    Stopped = \"stopped\",\r\n    Buffering = \"buffering\",\r\n    Error = \"error\",\r\n}\r\n\r\nexport enum VoiceBroadcastPlaybackEvent {\r\n    TimesChanged = \"times_changed\",\r\n    LivenessChanged = \"liveness_changed\",\r\n    StateChanged = \"state_changed\",\r\n    InfoStateChanged = \"info_state_changed\",\r\n}\r\n\r\nexport type VoiceBroadcastPlaybackTimes = {\r\n    duration: number;\r\n    position: number;\r\n    timeLeft: number;\r\n};\r\n\r\ninterface EventMap {\r\n    [VoiceBroadcastPlaybackEvent.TimesChanged]: (times: VoiceBroadcastPlaybackTimes) => void;\r\n    [VoiceBroadcastPlaybackEvent.LivenessChanged]: (liveness: VoiceBroadcastLiveness) => void;\r\n    [VoiceBroadcastPlaybackEvent.StateChanged]: (\r\n        state: VoiceBroadcastPlaybackState,\r\n        playback: VoiceBroadcastPlayback,\r\n    ) => void;\r\n    [VoiceBroadcastPlaybackEvent.InfoStateChanged]: (state: VoiceBroadcastInfoState) => void;\r\n}\r\n\r\nexport class VoiceBroadcastPlayback\r\n    extends TypedEventEmitter<VoiceBroadcastPlaybackEvent, EventMap>\r\n    implements IDestroyable, PlaybackInterface\r\n{\r\n    private state = VoiceBroadcastPlaybackState.Stopped;\r\n    private chunkEvents = new VoiceBroadcastChunkEvents();\r\n    /** @var Map: event Id â†’ undecryptable event */\r\n    private utdChunkEvents: Map<string, MatrixEvent> = new Map();\r\n    private playbacks = new Map<string, Playback>();\r\n    private currentlyPlaying: MatrixEvent | null = null;\r\n    /** @var total duration of all chunks in milliseconds */\r\n    private duration = 0;\r\n    /** @var current playback position in milliseconds */\r\n    private position = 0;\r\n    public readonly liveData = new SimpleObservable<number[]>();\r\n    private liveness: VoiceBroadcastLiveness = \"not-live\";\r\n\r\n    // set via addInfoEvent() in constructor\r\n    private infoState!: VoiceBroadcastInfoState;\r\n    private lastInfoEvent!: MatrixEvent;\r\n\r\n    // set via setUpRelationsHelper() in constructor\r\n    private chunkRelationHelper!: RelationsHelper;\r\n    private infoRelationHelper!: RelationsHelper;\r\n\r\n    private skipToNext?: number;\r\n    private skipToDeferred?: IDeferred<void>;\r\n\r\n    public constructor(\r\n        public readonly infoEvent: MatrixEvent,\r\n        private client: MatrixClient,\r\n        private recordings: VoiceBroadcastRecordingsStore,\r\n    ) {\r\n        super();\r\n        this.addInfoEvent(this.infoEvent);\r\n        this.infoEvent.on(MatrixEventEvent.BeforeRedaction, this.onBeforeRedaction);\r\n        this.setUpRelationsHelper();\r\n    }\r\n\r\n    private async setUpRelationsHelper(): Promise<void> {\r\n        this.infoRelationHelper = new RelationsHelper(\r\n            this.infoEvent,\r\n            RelationType.Reference,\r\n            VoiceBroadcastInfoEventType,\r\n            this.client,\r\n        );\r\n        this.infoRelationHelper.getCurrent().forEach(this.addInfoEvent);\r\n\r\n        if (this.infoState !== VoiceBroadcastInfoState.Stopped) {\r\n            // Only required if not stopped. Stopped is the final state.\r\n            this.infoRelationHelper.on(RelationsHelperEvent.Add, this.addInfoEvent);\r\n\r\n            try {\r\n                await this.infoRelationHelper.emitFetchCurrent();\r\n            } catch (err) {\r\n                logger.warn(\"error fetching server side relation for voice broadcast info\", err);\r\n                // fall back to local events\r\n                this.infoRelationHelper.emitCurrent();\r\n            }\r\n        }\r\n\r\n        this.chunkRelationHelper = new RelationsHelper(\r\n            this.infoEvent,\r\n            RelationType.Reference,\r\n            EventType.RoomMessage,\r\n            this.client,\r\n        );\r\n        this.chunkRelationHelper.on(RelationsHelperEvent.Add, this.addChunkEvent);\r\n\r\n        try {\r\n            // TODO Michael W: only fetch events if needed, blocked by PSF-1708\r\n            await this.chunkRelationHelper.emitFetchCurrent();\r\n        } catch (err) {\r\n            logger.warn(\"error fetching server side relation for voice broadcast chunks\", err);\r\n            // fall back to local events\r\n            this.chunkRelationHelper.emitCurrent();\r\n        }\r\n    }\r\n\r\n    private addChunkEvent = async (event: MatrixEvent): Promise<boolean> => {\r\n        if (!event.getId() && !event.getTxnId()) {\r\n            // skip events without id and txn id\r\n            return false;\r\n        }\r\n\r\n        if (event.isDecryptionFailure()) {\r\n            this.onChunkEventDecryptionFailure(event);\r\n            return false;\r\n        }\r\n\r\n        if (event.getContent()?.msgtype !== MsgType.Audio) {\r\n            // skip non-audio event\r\n            return false;\r\n        }\r\n\r\n        this.chunkEvents.addEvent(event);\r\n        this.setDuration(this.chunkEvents.getLength());\r\n\r\n        if (this.getState() === VoiceBroadcastPlaybackState.Buffering) {\r\n            await this.startOrPlayNext();\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    private onChunkEventDecryptionFailure = (event: MatrixEvent): void => {\r\n        const eventId = event.getId();\r\n\r\n        if (!eventId) {\r\n            // This should not happen, as the existence of the Id is checked before the call.\r\n            // Log anyway and return.\r\n            logger.warn(\"Broadcast chunk decryption failure for event without Id\", {\r\n                broadcast: this.infoEvent.getId(),\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (!this.utdChunkEvents.has(eventId)) {\r\n            event.once(MatrixEventEvent.Decrypted, this.onChunkEventDecrypted);\r\n        }\r\n\r\n        this.utdChunkEvents.set(eventId, event);\r\n        this.setError();\r\n    };\r\n\r\n    private onChunkEventDecrypted = async (event: MatrixEvent): Promise<void> => {\r\n        const eventId = event.getId();\r\n\r\n        if (!eventId) {\r\n            // This should not happen, as the existence of the Id is checked before the call.\r\n            // Log anyway and return.\r\n            logger.warn(\"Broadcast chunk decrypted for event without Id\", { broadcast: this.infoEvent.getId() });\r\n            return;\r\n        }\r\n\r\n        this.utdChunkEvents.delete(eventId);\r\n        await this.addChunkEvent(event);\r\n\r\n        if (this.utdChunkEvents.size === 0) {\r\n            // no more UTD events, recover from error to paused\r\n            this.setState(VoiceBroadcastPlaybackState.Paused);\r\n        }\r\n    };\r\n\r\n    private startOrPlayNext = async (): Promise<void> => {\r\n        if (this.currentlyPlaying) {\r\n            return this.playNext();\r\n        }\r\n\r\n        return await this.start();\r\n    };\r\n\r\n    private addInfoEvent = (event: MatrixEvent): void => {\r\n        if (this.lastInfoEvent && this.lastInfoEvent.getTs() >= event.getTs()) {\r\n            // Only handle newer events\r\n            return;\r\n        }\r\n\r\n        const state = event.getContent()?.state;\r\n\r\n        if (!Object.values(VoiceBroadcastInfoState).includes(state)) {\r\n            // Do not handle unknown voice broadcast states\r\n            return;\r\n        }\r\n\r\n        this.lastInfoEvent = event;\r\n        this.setInfoState(state);\r\n    };\r\n\r\n    private onBeforeRedaction = (): void => {\r\n        if (this.getState() !== VoiceBroadcastPlaybackState.Stopped) {\r\n            this.stop();\r\n            // destroy cleans up everything\r\n            this.destroy();\r\n        }\r\n    };\r\n\r\n    private async tryLoadPlayback(chunkEvent: MatrixEvent): Promise<void> {\r\n        try {\r\n            return await this.loadPlayback(chunkEvent);\r\n        } catch (err: any) {\r\n            logger.warn(\"Unable to load broadcast playback\", {\r\n                message: err.message,\r\n                broadcastId: this.infoEvent.getId(),\r\n                chunkId: chunkEvent.getId(),\r\n            });\r\n            this.setError();\r\n        }\r\n    }\r\n\r\n    private async loadPlayback(chunkEvent: MatrixEvent): Promise<void> {\r\n        const eventId = chunkEvent.getId();\r\n\r\n        if (!eventId) {\r\n            throw new Error(\"Broadcast chunk event without Id occurred\");\r\n        }\r\n\r\n        const helper = new MediaEventHelper(chunkEvent);\r\n        const blob = await helper.sourceBlob.value;\r\n        const buffer = await blob.arrayBuffer();\r\n        const playback = PlaybackManager.instance.createPlaybackInstance(buffer);\r\n        await playback.prepare();\r\n        playback.clockInfo.populatePlaceholdersFrom(chunkEvent);\r\n        this.playbacks.set(eventId, playback);\r\n        playback.on(UPDATE_EVENT, (state) => this.onPlaybackStateChange(chunkEvent, state));\r\n        playback.clockInfo.liveData.onUpdate(([position]) => {\r\n            this.onPlaybackPositionUpdate(chunkEvent, position);\r\n        });\r\n    }\r\n\r\n    private unloadPlayback(event: MatrixEvent): void {\r\n        const playback = this.playbacks.get(event.getId()!);\r\n        if (!playback) return;\r\n\r\n        playback.destroy();\r\n        this.playbacks.delete(event.getId()!);\r\n    }\r\n\r\n    private onPlaybackPositionUpdate = (event: MatrixEvent, position: number): void => {\r\n        if (event !== this.currentlyPlaying) return;\r\n\r\n        const newPosition = this.chunkEvents.getLengthTo(event) + position * 1000; // observable sends seconds\r\n\r\n        // do not jump backwards - this can happen when transiting from one to another chunk\r\n        if (newPosition < this.position) return;\r\n\r\n        this.setPosition(newPosition);\r\n    };\r\n\r\n    private setDuration(duration: number): void {\r\n        if (this.duration === duration) return;\r\n\r\n        this.duration = duration;\r\n        this.emitTimesChanged();\r\n        this.liveData.update([this.timeSeconds, this.durationSeconds]);\r\n    }\r\n\r\n    private setPosition(position: number): void {\r\n        if (this.position === position) return;\r\n\r\n        this.position = position;\r\n        this.emitTimesChanged();\r\n        this.liveData.update([this.timeSeconds, this.durationSeconds]);\r\n    }\r\n\r\n    private emitTimesChanged(): void {\r\n        this.emit(VoiceBroadcastPlaybackEvent.TimesChanged, {\r\n            duration: this.durationSeconds,\r\n            position: this.timeSeconds,\r\n            timeLeft: this.timeLeftSeconds,\r\n        });\r\n    }\r\n\r\n    private onPlaybackStateChange = async (event: MatrixEvent, newState: PlaybackState): Promise<void> => {\r\n        if (event !== this.currentlyPlaying) return;\r\n        if (newState !== PlaybackState.Stopped) return;\r\n\r\n        await this.playNext();\r\n        this.unloadPlayback(event);\r\n    };\r\n\r\n    private async playNext(): Promise<void> {\r\n        if (!this.currentlyPlaying) return;\r\n\r\n        const next = this.chunkEvents.getNext(this.currentlyPlaying);\r\n\r\n        if (next) {\r\n            return this.playEvent(next);\r\n        }\r\n\r\n        if (\r\n            this.getInfoState() === VoiceBroadcastInfoState.Stopped &&\r\n            this.chunkEvents.getSequenceForEvent(this.currentlyPlaying) === this.lastChunkSequence\r\n        ) {\r\n            this.stop();\r\n        } else {\r\n            // No more chunks available, although the broadcast is not finished â†’ enter buffering state.\r\n            this.setState(VoiceBroadcastPlaybackState.Buffering);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {number} The last chunk sequence from the latest info event.\r\n     *                   Falls back to the length of received chunks if the info event does not provide the number.\r\n     */\r\n    private get lastChunkSequence(): number {\r\n        return (\r\n            this.lastInfoEvent.getContent<VoiceBroadcastInfoEventContent>()?.last_chunk_sequence ||\r\n            this.chunkEvents.getNumberOfEvents()\r\n        );\r\n    }\r\n\r\n    private async playEvent(event: MatrixEvent): Promise<void> {\r\n        this.setState(VoiceBroadcastPlaybackState.Playing);\r\n        this.currentlyPlaying = event;\r\n        const playback = await this.tryGetOrLoadPlaybackForEvent(event);\r\n        playback?.play();\r\n    }\r\n\r\n    private async tryGetOrLoadPlaybackForEvent(event: MatrixEvent): Promise<Playback | undefined> {\r\n        try {\r\n            return await this.getOrLoadPlaybackForEvent(event);\r\n        } catch (err: any) {\r\n            logger.warn(\"Unable to load broadcast playback\", {\r\n                message: err.message,\r\n                broadcastId: this.infoEvent.getId(),\r\n                chunkId: event.getId(),\r\n            });\r\n            this.setError();\r\n        }\r\n    }\r\n\r\n    private async getOrLoadPlaybackForEvent(event: MatrixEvent): Promise<Playback | undefined> {\r\n        const eventId = event.getId();\r\n\r\n        if (!eventId) {\r\n            throw new Error(\"Broadcast chunk event without Id occurred\");\r\n        }\r\n\r\n        if (!this.playbacks.has(eventId)) {\r\n            // set to buffering while loading the chunk data\r\n            const currentState = this.getState();\r\n            this.setState(VoiceBroadcastPlaybackState.Buffering);\r\n            await this.loadPlayback(event);\r\n            this.setState(currentState);\r\n        }\r\n\r\n        const playback = this.playbacks.get(eventId);\r\n\r\n        if (!playback) {\r\n            throw new Error(`Unable to find playback for event ${event.getId()}`);\r\n        }\r\n\r\n        // try to load the playback for the next event for a smooth(er) playback\r\n        const nextEvent = this.chunkEvents.getNext(event);\r\n        if (nextEvent) this.tryLoadPlayback(nextEvent);\r\n\r\n        return playback;\r\n    }\r\n\r\n    private getCurrentPlayback(): Playback | undefined {\r\n        if (!this.currentlyPlaying) return;\r\n        return this.playbacks.get(this.currentlyPlaying.getId()!);\r\n    }\r\n\r\n    public getLiveness(): VoiceBroadcastLiveness {\r\n        return this.liveness;\r\n    }\r\n\r\n    private setLiveness(liveness: VoiceBroadcastLiveness): void {\r\n        if (this.liveness === liveness) return;\r\n\r\n        this.liveness = liveness;\r\n        this.emit(VoiceBroadcastPlaybackEvent.LivenessChanged, liveness);\r\n    }\r\n\r\n    public get currentState(): PlaybackState {\r\n        return PlaybackState.Playing;\r\n    }\r\n\r\n    public get timeSeconds(): number {\r\n        return this.position / 1000;\r\n    }\r\n\r\n    public get durationSeconds(): number {\r\n        return this.duration / 1000;\r\n    }\r\n\r\n    public get timeLeftSeconds(): number {\r\n        // Sometimes the meta data and the audio files are a little bit out of sync.\r\n        // Be sure it never returns a negative value.\r\n        return Math.max(0, Math.round(this.durationSeconds) - this.timeSeconds);\r\n    }\r\n\r\n    public async skipTo(timeSeconds: number): Promise<void> {\r\n        this.skipToNext = timeSeconds;\r\n\r\n        if (this.skipToDeferred) {\r\n            // Skip to position is already in progress. Return the promise for that.\r\n            return this.skipToDeferred.promise;\r\n        }\r\n\r\n        this.skipToDeferred = defer();\r\n\r\n        while (this.skipToNext !== undefined) {\r\n            // Skip to position until skipToNext is undefined.\r\n            // skipToNext can be set if skipTo is called while already skipping.\r\n            const skipToNext = this.skipToNext;\r\n            this.skipToNext = undefined;\r\n            await this.doSkipTo(skipToNext);\r\n        }\r\n\r\n        this.skipToDeferred.resolve();\r\n        this.skipToDeferred = undefined;\r\n    }\r\n\r\n    private async doSkipTo(timeSeconds: number): Promise<void> {\r\n        const time = timeSeconds * 1000;\r\n        const event = this.chunkEvents.findByTime(time);\r\n\r\n        if (!event) {\r\n            logger.warn(\"voice broadcast chunk event to skip to not found\");\r\n            return;\r\n        }\r\n\r\n        const currentPlayback = this.getCurrentPlayback();\r\n        const skipToPlayback = await this.tryGetOrLoadPlaybackForEvent(event);\r\n        const currentPlaybackEvent = this.currentlyPlaying;\r\n\r\n        if (!skipToPlayback) {\r\n            logger.warn(\"voice broadcast chunk to skip to not found\", event);\r\n            return;\r\n        }\r\n\r\n        this.currentlyPlaying = event;\r\n\r\n        if (currentPlayback && currentPlaybackEvent && currentPlayback !== skipToPlayback) {\r\n            // only stop and unload the playback here without triggering other effects, e.g. play next\r\n            currentPlayback.off(UPDATE_EVENT, this.onPlaybackStateChange);\r\n            await currentPlayback.stop();\r\n            currentPlayback.on(UPDATE_EVENT, this.onPlaybackStateChange);\r\n            this.unloadPlayback(currentPlaybackEvent);\r\n        }\r\n\r\n        const offsetInChunk = time - this.chunkEvents.getLengthTo(event);\r\n        await skipToPlayback.skipTo(offsetInChunk / 1000);\r\n\r\n        if (this.state === VoiceBroadcastPlaybackState.Playing && !skipToPlayback.isPlaying) {\r\n            await skipToPlayback.play();\r\n        }\r\n\r\n        this.setPosition(time);\r\n    }\r\n\r\n    public async start(): Promise<void> {\r\n        if (this.state === VoiceBroadcastPlaybackState.Playing) return;\r\n\r\n        const currentRecording = this.recordings.getCurrent();\r\n\r\n        if (currentRecording && currentRecording.getState() !== VoiceBroadcastInfoState.Stopped) {\r\n            const shouldStopRecording = await showConfirmListenBroadcastStopCurrentDialog();\r\n\r\n            if (!shouldStopRecording) {\r\n                // keep recording\r\n                return;\r\n            }\r\n\r\n            await this.recordings.getCurrent()?.stop();\r\n        }\r\n\r\n        const chunkEvents = this.chunkEvents.getEvents();\r\n\r\n        const toPlay =\r\n            this.getInfoState() === VoiceBroadcastInfoState.Stopped\r\n                ? chunkEvents[0] // start at the beginning for an ended voice broadcast\r\n                : chunkEvents[chunkEvents.length - 1]; // start at the current chunk for an ongoing voice broadcast\r\n\r\n        if (toPlay) {\r\n            return this.playEvent(toPlay);\r\n        }\r\n\r\n        this.setState(VoiceBroadcastPlaybackState.Buffering);\r\n    }\r\n\r\n    public stop(): void {\r\n        // error is a final state\r\n        if (this.getState() === VoiceBroadcastPlaybackState.Error) return;\r\n\r\n        this.setState(VoiceBroadcastPlaybackState.Stopped);\r\n        this.getCurrentPlayback()?.stop();\r\n        this.currentlyPlaying = null;\r\n        this.setPosition(0);\r\n    }\r\n\r\n    public pause(): void {\r\n        // error is a final state\r\n        if (this.getState() === VoiceBroadcastPlaybackState.Error) return;\r\n\r\n        // stopped voice broadcasts cannot be paused\r\n        if (this.getState() === VoiceBroadcastPlaybackState.Stopped) return;\r\n\r\n        this.setState(VoiceBroadcastPlaybackState.Paused);\r\n        this.getCurrentPlayback()?.pause();\r\n    }\r\n\r\n    public resume(): void {\r\n        // error is a final state\r\n        if (this.getState() === VoiceBroadcastPlaybackState.Error) return;\r\n\r\n        if (!this.currentlyPlaying) {\r\n            // no playback to resume, start from the beginning\r\n            this.start();\r\n            return;\r\n        }\r\n\r\n        this.setState(VoiceBroadcastPlaybackState.Playing);\r\n        this.getCurrentPlayback()?.play();\r\n    }\r\n\r\n    /**\r\n     * Toggles the playback:\r\n     * stopped â†’ playing\r\n     * playing â†’ paused\r\n     * paused â†’ playing\r\n     */\r\n    public async toggle(): Promise<void> {\r\n        // error is a final state\r\n        if (this.getState() === VoiceBroadcastPlaybackState.Error) return;\r\n\r\n        if (this.state === VoiceBroadcastPlaybackState.Stopped) {\r\n            await this.start();\r\n            return;\r\n        }\r\n\r\n        if (this.state === VoiceBroadcastPlaybackState.Paused) {\r\n            this.resume();\r\n            return;\r\n        }\r\n\r\n        this.pause();\r\n    }\r\n\r\n    public getState(): VoiceBroadcastPlaybackState {\r\n        return this.state;\r\n    }\r\n\r\n    private setState(state: VoiceBroadcastPlaybackState): void {\r\n        if (this.state === state) {\r\n            return;\r\n        }\r\n\r\n        this.state = state;\r\n        this.emit(VoiceBroadcastPlaybackEvent.StateChanged, state, this);\r\n    }\r\n\r\n    /**\r\n     * Set error state. Stop current playback, if any.\r\n     */\r\n    private setError(): void {\r\n        this.setState(VoiceBroadcastPlaybackState.Error);\r\n        this.getCurrentPlayback()?.stop();\r\n        this.currentlyPlaying = null;\r\n        this.setPosition(0);\r\n    }\r\n\r\n    public getInfoState(): VoiceBroadcastInfoState {\r\n        return this.infoState;\r\n    }\r\n\r\n    private setInfoState(state: VoiceBroadcastInfoState): void {\r\n        if (this.infoState === state) {\r\n            return;\r\n        }\r\n\r\n        this.infoState = state;\r\n        this.emit(VoiceBroadcastPlaybackEvent.InfoStateChanged, state);\r\n        this.setLiveness(determineVoiceBroadcastLiveness(this.infoState));\r\n    }\r\n\r\n    public get errorMessage(): string {\r\n        if (this.getState() !== VoiceBroadcastPlaybackState.Error) return \"\";\r\n        if (this.utdChunkEvents.size) return _t(\"Unable to decrypt voice broadcast\");\r\n        return _t(\"Unable to play this voice broadcast\");\r\n    }\r\n\r\n    public destroy(): void {\r\n        for (const [, utdEvent] of this.utdChunkEvents) {\r\n            utdEvent.off(MatrixEventEvent.Decrypted, this.onChunkEventDecrypted);\r\n        }\r\n\r\n        this.utdChunkEvents.clear();\r\n\r\n        this.chunkRelationHelper.destroy();\r\n        this.infoRelationHelper.destroy();\r\n        this.removeAllListeners();\r\n\r\n        this.chunkEvents = new VoiceBroadcastChunkEvents();\r\n        this.playbacks.forEach((p) => p.destroy());\r\n        this.playbacks = new Map<string, Playback>();\r\n    }\r\n}\r\n"],"mappings":"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"}