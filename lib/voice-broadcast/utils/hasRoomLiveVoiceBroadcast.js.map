{"version":3,"file":"hasRoomLiveVoiceBroadcast.js","names":["_","require","_arrays","hasRoomLiveVoiceBroadcast","client","room","userId","hasBroadcast","startedByUser","infoEvent","stateEvents","currentState","getStateEvents","VoiceBroadcastInfoEventType","asyncEvery","event","state","getContent","VoiceBroadcastInfoState","Stopped","startEvent","retrieveStartedInfoEvent","isRedacted","getStateKey","exports"],"sources":["../../../src/voice-broadcast/utils/hasRoomLiveVoiceBroadcast.ts"],"sourcesContent":["/*\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { MatrixClient, MatrixEvent, Room } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport { retrieveStartedInfoEvent, VoiceBroadcastInfoEventType, VoiceBroadcastInfoState } from \"..\";\r\nimport { asyncEvery } from \"../../utils/arrays\";\r\n\r\ninterface Result {\r\n    // whether there is a live broadcast in the room\r\n    hasBroadcast: boolean;\r\n    // info event of any live broadcast in the room\r\n    infoEvent: MatrixEvent | null;\r\n    // whether the broadcast was started by the user\r\n    startedByUser: boolean;\r\n}\r\n\r\nexport const hasRoomLiveVoiceBroadcast = async (client: MatrixClient, room: Room, userId?: string): Promise<Result> => {\r\n    let hasBroadcast = false;\r\n    let startedByUser = false;\r\n    let infoEvent: MatrixEvent | null = null;\r\n\r\n    const stateEvents = room.currentState.getStateEvents(VoiceBroadcastInfoEventType);\r\n    await asyncEvery(stateEvents, async (event: MatrixEvent) => {\r\n        const state = event.getContent()?.state;\r\n\r\n        if (state && state !== VoiceBroadcastInfoState.Stopped) {\r\n            const startEvent = await retrieveStartedInfoEvent(event, client);\r\n\r\n            // skip if started voice broadcast event is redacted\r\n            if (startEvent?.isRedacted()) return true;\r\n\r\n            hasBroadcast = true;\r\n            infoEvent = startEvent;\r\n\r\n            // state key = sender's MXID\r\n            if (event.getStateKey() === userId) {\r\n                startedByUser = true;\r\n                // break here, because more than true / true is not possible\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    });\r\n\r\n    return {\r\n        hasBroadcast,\r\n        infoEvent,\r\n        startedByUser,\r\n    };\r\n};\r\n"],"mappings":";;;;;;AAkBA,IAAAA,CAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAgBO,MAAME,yBAAyB,GAAG,MAAAA,CAAOC,MAAoB,EAAEC,IAAU,EAAEC,MAAe,KAAsB;EACnH,IAAIC,YAAY,GAAG,KAAK;EACxB,IAAIC,aAAa,GAAG,KAAK;EACzB,IAAIC,SAA6B,GAAG,IAAI;EAExC,MAAMC,WAAW,GAAGL,IAAI,CAACM,YAAY,CAACC,cAAc,CAACC,6BAA2B,CAAC;EACjF,MAAM,IAAAC,kBAAU,EAACJ,WAAW,EAAE,MAAOK,KAAkB,IAAK;IACxD,MAAMC,KAAK,GAAGD,KAAK,CAACE,UAAU,CAAC,CAAC,EAAED,KAAK;IAEvC,IAAIA,KAAK,IAAIA,KAAK,KAAKE,yBAAuB,CAACC,OAAO,EAAE;MACpD,MAAMC,UAAU,GAAG,MAAM,IAAAC,0BAAwB,EAACN,KAAK,EAAEX,MAAM,CAAC;;MAEhE;MACA,IAAIgB,UAAU,EAAEE,UAAU,CAAC,CAAC,EAAE,OAAO,IAAI;MAEzCf,YAAY,GAAG,IAAI;MACnBE,SAAS,GAAGW,UAAU;;MAEtB;MACA,IAAIL,KAAK,CAACQ,WAAW,CAAC,CAAC,KAAKjB,MAAM,EAAE;QAChCE,aAAa,GAAG,IAAI;QACpB;QACA,OAAO,KAAK;MAChB;IACJ;IAEA,OAAO,IAAI;EACf,CAAC,CAAC;EAEF,OAAO;IACHD,YAAY;IACZE,SAAS;IACTD;EACJ,CAAC;AACL,CAAC;AAACgB,OAAA,CAAArB,yBAAA,GAAAA,yBAAA"}