{"version":3,"file":"doMaybeSetCurrentVoiceBroadcastPlayback.js","names":["_","require","doMaybeSetCurrentVoiceBroadcastPlayback","room","client","voiceBroadcastPlaybacksStore","voiceBroadcastRecordingsStore","hasCurrent","currentPlayback","getCurrent","getState","VoiceBroadcastPlaybackState","Stopped","infoEvent","hasRoomLiveVoiceBroadcast","voiceBroadcastPlayback","getByInfoEvent","setCurrent","clearCurrent","exports"],"sources":["../../../src/voice-broadcast/utils/doMaybeSetCurrentVoiceBroadcastPlayback.ts"],"sourcesContent":["/*\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { MatrixClient, Room } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport {\r\n    hasRoomLiveVoiceBroadcast,\r\n    VoiceBroadcastPlaybacksStore,\r\n    VoiceBroadcastPlaybackState,\r\n    VoiceBroadcastRecordingsStore,\r\n} from \"..\";\r\n\r\n/**\r\n * When a live voice broadcast is in the room and\r\n * another voice broadcast is not currently being listened to or recorded\r\n * the live broadcast in the room is set as the current broadcast to listen to.\r\n * When there is no live broadcast in the room: clear current broadcast.\r\n *\r\n * @param {Room} room The room to check for a live voice broadcast\r\n * @param {MatrixClient} client\r\n * @param {VoiceBroadcastPlaybacksStore} voiceBroadcastPlaybacksStore\r\n * @param {VoiceBroadcastRecordingsStore} voiceBroadcastRecordingsStore\r\n */\r\nexport const doMaybeSetCurrentVoiceBroadcastPlayback = async (\r\n    room: Room,\r\n    client: MatrixClient,\r\n    voiceBroadcastPlaybacksStore: VoiceBroadcastPlaybacksStore,\r\n    voiceBroadcastRecordingsStore: VoiceBroadcastRecordingsStore,\r\n): Promise<void> => {\r\n    // do not disturb the current recording\r\n    if (voiceBroadcastRecordingsStore.hasCurrent()) return;\r\n\r\n    const currentPlayback = voiceBroadcastPlaybacksStore.getCurrent();\r\n\r\n    if (currentPlayback && currentPlayback.getState() !== VoiceBroadcastPlaybackState.Stopped) {\r\n        // do not disturb the current playback\r\n        return;\r\n    }\r\n\r\n    const { infoEvent } = await hasRoomLiveVoiceBroadcast(client, room);\r\n\r\n    if (infoEvent) {\r\n        // live broadcast in the room + no recording + not listening yet: set the current broadcast\r\n        const voiceBroadcastPlayback = voiceBroadcastPlaybacksStore.getByInfoEvent(infoEvent, client);\r\n        voiceBroadcastPlaybacksStore.setCurrent(voiceBroadcastPlayback);\r\n        return;\r\n    }\r\n\r\n    // no broadcast; not listening: clear current\r\n    voiceBroadcastPlaybacksStore.clearCurrent();\r\n};\r\n"],"mappings":";;;;;;AAkBA,IAAAA,CAAA,GAAAC,OAAA;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,uCAAuC,GAAG,MAAAA,CACnDC,IAAU,EACVC,MAAoB,EACpBC,4BAA0D,EAC1DC,6BAA4D,KAC5C;EAChB;EACA,IAAIA,6BAA6B,CAACC,UAAU,CAAC,CAAC,EAAE;EAEhD,MAAMC,eAAe,GAAGH,4BAA4B,CAACI,UAAU,CAAC,CAAC;EAEjE,IAAID,eAAe,IAAIA,eAAe,CAACE,QAAQ,CAAC,CAAC,KAAKC,6BAA2B,CAACC,OAAO,EAAE;IACvF;IACA;EACJ;EAEA,MAAM;IAAEC;EAAU,CAAC,GAAG,MAAM,IAAAC,2BAAyB,EAACV,MAAM,EAAED,IAAI,CAAC;EAEnE,IAAIU,SAAS,EAAE;IACX;IACA,MAAME,sBAAsB,GAAGV,4BAA4B,CAACW,cAAc,CAACH,SAAS,EAAET,MAAM,CAAC;IAC7FC,4BAA4B,CAACY,UAAU,CAACF,sBAAsB,CAAC;IAC/D;EACJ;;EAEA;EACAV,4BAA4B,CAACa,YAAY,CAAC,CAAC;AAC/C,CAAC;AAACC,OAAA,CAAAjB,uCAAA,GAAAA,uCAAA"}