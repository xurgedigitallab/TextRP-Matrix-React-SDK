{"version":3,"file":"VoiceBroadcastChunkEvents.js","names":["_","require","VoiceBroadcastChunkEvents","constructor","_defineProperty2","default","event","events","filter","e","equalByTxnIdOrId","push","a","b","aSequence","getContent","VoiceBroadcastChunkEventType","sequence","bSequence","getTs","getEvents","getNext","indexOf","addEvent","addOrReplaceEvent","sort","addEvents","atLeastOneNew","reduce","newSoFar","includes","find","getLength","length","calculateChunkLength","getLengthSeconds","getLengthTo","i","findByTime","time","lengthSoFar","isLast","getSequenceForEvent","parseInt","isNaN","getNumberOfEvents","duration","info","eventA","eventB","getTxnId","getId","compareFn","allHaveSequence","compareBySequence","compareByTimestamp","some","exports"],"sources":["../../../src/voice-broadcast/utils/VoiceBroadcastChunkEvents.ts"],"sourcesContent":["/*\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { MatrixEvent } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport { VoiceBroadcastChunkEventType } from \"..\";\r\n\r\n/**\r\n * Voice broadcast chunk collection.\r\n * Orders chunks by sequence (if available) or timestamp.\r\n */\r\nexport class VoiceBroadcastChunkEvents {\r\n    private events: MatrixEvent[] = [];\r\n\r\n    public getEvents(): MatrixEvent[] {\r\n        return [...this.events];\r\n    }\r\n\r\n    public getNext(event: MatrixEvent): MatrixEvent | undefined {\r\n        return this.events[this.events.indexOf(event) + 1];\r\n    }\r\n\r\n    public addEvent(event: MatrixEvent): void {\r\n        if (this.addOrReplaceEvent(event)) {\r\n            this.sort();\r\n        }\r\n    }\r\n\r\n    public addEvents(events: MatrixEvent[]): void {\r\n        const atLeastOneNew = events.reduce((newSoFar: boolean, event: MatrixEvent): boolean => {\r\n            return this.addOrReplaceEvent(event) || newSoFar;\r\n        }, false);\r\n\r\n        if (atLeastOneNew) {\r\n            this.sort();\r\n        }\r\n    }\r\n\r\n    public includes(event: MatrixEvent): boolean {\r\n        return !!this.events.find((e) => this.equalByTxnIdOrId(event, e));\r\n    }\r\n\r\n    /**\r\n     * @returns {number} Length in milliseconds\r\n     */\r\n    public getLength(): number {\r\n        return this.events.reduce((length: number, event: MatrixEvent) => {\r\n            return length + this.calculateChunkLength(event);\r\n        }, 0);\r\n    }\r\n\r\n    public getLengthSeconds(): number {\r\n        return this.getLength() / 1000;\r\n    }\r\n\r\n    /**\r\n     * Returns the accumulated length to (excl.) a chunk event.\r\n     */\r\n    public getLengthTo(event: MatrixEvent): number {\r\n        let length = 0;\r\n\r\n        for (let i = 0; i < this.events.indexOf(event); i++) {\r\n            length += this.calculateChunkLength(this.events[i]);\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    public findByTime(time: number): MatrixEvent | null {\r\n        let lengthSoFar = 0;\r\n\r\n        for (let i = 0; i < this.events.length; i++) {\r\n            lengthSoFar += this.calculateChunkLength(this.events[i]);\r\n\r\n            if (lengthSoFar >= time) {\r\n                return this.events[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public isLast(event: MatrixEvent): boolean {\r\n        return this.events.indexOf(event) >= this.events.length - 1;\r\n    }\r\n\r\n    public getSequenceForEvent(event: MatrixEvent): number | null {\r\n        const sequence = parseInt(event.getContent()?.[VoiceBroadcastChunkEventType]?.sequence, 10);\r\n        if (!isNaN(sequence)) return sequence;\r\n\r\n        if (this.events.includes(event)) return this.events.indexOf(event) + 1;\r\n\r\n        return null;\r\n    }\r\n\r\n    public getNumberOfEvents(): number {\r\n        return this.events.length;\r\n    }\r\n\r\n    private calculateChunkLength(event: MatrixEvent): number {\r\n        return event.getContent()?.[\"org.matrix.msc1767.audio\"]?.duration || event.getContent()?.info?.duration || 0;\r\n    }\r\n\r\n    private addOrReplaceEvent = (event: MatrixEvent): boolean => {\r\n        this.events = this.events.filter((e) => !this.equalByTxnIdOrId(event, e));\r\n        this.events.push(event);\r\n        return true;\r\n    };\r\n\r\n    private equalByTxnIdOrId(eventA: MatrixEvent, eventB: MatrixEvent): boolean {\r\n        return (\r\n            (eventA.getTxnId() && eventB.getTxnId() && eventA.getTxnId() === eventB.getTxnId()) ||\r\n            eventA.getId() === eventB.getId()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sort by sequence, if available for all events.\r\n     * Else fall back to timestamp.\r\n     */\r\n    private sort(): void {\r\n        const compareFn = this.allHaveSequence() ? this.compareBySequence : this.compareByTimestamp;\r\n        this.events.sort(compareFn);\r\n    }\r\n\r\n    private compareBySequence = (a: MatrixEvent, b: MatrixEvent): number => {\r\n        const aSequence = a.getContent()?.[VoiceBroadcastChunkEventType]?.sequence || 0;\r\n        const bSequence = b.getContent()?.[VoiceBroadcastChunkEventType]?.sequence || 0;\r\n        return aSequence - bSequence;\r\n    };\r\n\r\n    private compareByTimestamp = (a: MatrixEvent, b: MatrixEvent): number => {\r\n        return a.getTs() - b.getTs();\r\n    };\r\n\r\n    private allHaveSequence(): boolean {\r\n        return !this.events.some((event: MatrixEvent) => {\r\n            const sequence = event.getContent()?.[VoiceBroadcastChunkEventType]?.sequence;\r\n            return parseInt(sequence, 10) !== sequence;\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"}