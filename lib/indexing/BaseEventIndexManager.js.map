{"version":3,"file":"BaseEventIndexManager.js","names":["BaseEventIndexManager","supportsEventIndexing","initEventIndex","userId","deviceId","Error","addEventToIndex","ev","profile","deleteEvent","eventId","isEventIndexEmpty","indexIsEmpty","isRoomIndexed","roomId","getStats","getUserVersion","setUserVersion","version","commitLiveEvents","searchEventIndex","searchArgs","addHistoricEvents","events","checkpoint","oldCheckpoint","addCrawlerCheckpoint","removeCrawlerCheckpoint","loadCheckpoints","loadFileEvents","args","closeEventIndex","deleteEventIndex","exports","default"],"sources":["../../src/indexing/BaseEventIndexManager.ts"],"sourcesContent":["/*\r\nCopyright 2019-2021 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { IMatrixProfile, IEventWithRoomId as IMatrixEvent, IResultRoomEvents } from \"matrix-js-sdk/src/@types/search\";\r\nimport { Direction } from \"matrix-js-sdk/src/matrix\";\r\n\r\n// The following interfaces take their names and member names from seshat and the spec\r\n/* eslint-disable camelcase */\r\nexport interface ICrawlerCheckpoint {\r\n    roomId: string;\r\n    token: string | null;\r\n    fullCrawl?: boolean;\r\n    direction: Direction;\r\n}\r\n\r\nexport interface ISearchArgs {\r\n    search_term: string;\r\n    before_limit: number;\r\n    after_limit: number;\r\n    order_by_recency: boolean;\r\n    room_id?: string;\r\n    limit: number;\r\n    next_batch?: string;\r\n}\r\n\r\nexport interface IEventAndProfile {\r\n    event: IMatrixEvent;\r\n    profile: IMatrixProfile;\r\n}\r\n\r\nexport interface ILoadArgs {\r\n    roomId: string;\r\n    limit: number;\r\n    fromEvent?: string;\r\n    direction?: string;\r\n}\r\n\r\nexport interface IIndexStats {\r\n    size: number;\r\n    eventCount: number;\r\n    roomCount: number;\r\n}\r\n\r\n/**\r\n * Base class for classes that provide platform-specific event indexing.\r\n *\r\n * Instances of this class are provided by the application.\r\n */\r\nexport default abstract class BaseEventIndexManager {\r\n    /**\r\n     * Does our EventIndexManager support event indexing.\r\n     *\r\n     * If an EventIndexManager implementor has runtime dependencies that\r\n     * optionally enable event indexing they may override this method to perform\r\n     * the necessary runtime checks here.\r\n     *\r\n     * @return {Promise} A promise that will resolve to true if event indexing\r\n     * is supported, false otherwise.\r\n     */\r\n    public async supportsEventIndexing(): Promise<boolean> {\r\n        return true;\r\n    }\r\n    /**\r\n     * Initialize the event index for the given user.\r\n     *\r\n     * @param {string} userId The event that should be added to the index.\r\n     * @param {string} deviceId The profile of the event sender at the\r\n     *\r\n     * @return {Promise} A promise that will resolve when the event index is\r\n     * initialized.\r\n     */\r\n    public async initEventIndex(userId: string, deviceId: string): Promise<void> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    /**\r\n     * Queue up an event to be added to the index.\r\n     *\r\n     * @param {MatrixEvent} ev The event that should be added to the index.\r\n     * @param {IMatrixProfile} profile The profile of the event sender at the\r\n     * time the event was received.\r\n     *\r\n     * @return {Promise} A promise that will resolve when the was queued up for\r\n     * addition.\r\n     */\r\n    public async addEventToIndex(ev: IMatrixEvent, profile: IMatrixProfile): Promise<void> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    public async deleteEvent(eventId: string): Promise<boolean> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    public async isEventIndexEmpty(): Promise<boolean> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    /**\r\n     * Check if our event index is empty.\r\n     */\r\n    public indexIsEmpty(): Promise<boolean> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    /**\r\n     * Check if the room with the given id is already indexed.\r\n     *\r\n     * @param {string} roomId The ID of the room which we want to check if it\r\n     * has been already indexed.\r\n     *\r\n     * @return {Promise<boolean>} Returns true if the index contains events for\r\n     * the given room, false otherwise.\r\n     */\r\n    public isRoomIndexed(roomId: string): Promise<boolean> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    /**\r\n     * Get statistical information of the index.\r\n     *\r\n     * @return {Promise<IIndexStats>} A promise that will resolve to the index\r\n     * statistics.\r\n     */\r\n    public async getStats(): Promise<IIndexStats> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    /**\r\n     * Get the user version of the database.\r\n     * @return {Promise<number>} A promise that will resolve to the user stored\r\n     * version number.\r\n     */\r\n    public async getUserVersion(): Promise<number> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    /**\r\n     * Set the user stored version to the given version number.\r\n     *\r\n     * @param {number} version The new version that should be stored in the\r\n     * database.\r\n     *\r\n     * @return {Promise<void>} A promise that will resolve once the new version\r\n     * is stored.\r\n     */\r\n    public async setUserVersion(version: number): Promise<void> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    /**\r\n     * Commit the previously queued up events to the index.\r\n     *\r\n     * @return {Promise} A promise that will resolve once the queued up events\r\n     * were added to the index.\r\n     */\r\n    public async commitLiveEvents(): Promise<void> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    /**\r\n     * Search the event index using the given term for matching events.\r\n     *\r\n     * @param {ISearchArgs} searchArgs The search configuration for the search,\r\n     * sets the search term and determines the search result contents.\r\n     *\r\n     * @return {Promise<IResultRoomEvents[]>} A promise that will resolve to an array\r\n     * of search results once the search is done.\r\n     */\r\n    public async searchEventIndex(searchArgs: ISearchArgs): Promise<IResultRoomEvents> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    /**\r\n     * Add events from the room history to the event index.\r\n     *\r\n     * This is used to add a batch of events to the index.\r\n     *\r\n     * @param {[IEventAndProfile]} events The list of events and profiles that\r\n     * should be added to the event index.\r\n     * @param {[ICrawlerCheckpoint]} checkpoint A new crawler checkpoint that\r\n     * should be stored in the index which should be used to continue crawling\r\n     * the room.\r\n     * @param {[ICrawlerCheckpoint]} oldCheckpoint The checkpoint that was used\r\n     * to fetch the current batch of events. This checkpoint will be removed\r\n     * from the index.\r\n     *\r\n     * @return {Promise} A promise that will resolve to true if all the events\r\n     * were already added to the index, false otherwise.\r\n     */\r\n    public async addHistoricEvents(\r\n        events: IEventAndProfile[],\r\n        checkpoint: ICrawlerCheckpoint | null,\r\n        oldCheckpoint: ICrawlerCheckpoint | null,\r\n    ): Promise<boolean> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    /**\r\n     * Add a new crawler checkpoint to the index.\r\n     *\r\n     * @param {ICrawlerCheckpoint} checkpoint The checkpoint that should be added\r\n     * to the index.\r\n     *\r\n     * @return {Promise} A promise that will resolve once the checkpoint has\r\n     * been stored.\r\n     */\r\n    public async addCrawlerCheckpoint(checkpoint: ICrawlerCheckpoint): Promise<void> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    /**\r\n     * Add a new crawler checkpoint to the index.\r\n     *\r\n     * @param {ICrawlerCheckpoint} checkpoint The checkpoint that should be\r\n     * removed from the index.\r\n     *\r\n     * @return {Promise} A promise that will resolve once the checkpoint has\r\n     * been removed.\r\n     */\r\n    public async removeCrawlerCheckpoint(checkpoint: ICrawlerCheckpoint): Promise<void> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    /**\r\n     * Load the stored checkpoints from the index.\r\n     *\r\n     * @return {Promise<[ICrawlerCheckpoint]>} A promise that will resolve to an\r\n     * array of crawler checkpoints once they have been loaded from the index.\r\n     */\r\n    public async loadCheckpoints(): Promise<ICrawlerCheckpoint[]> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    /** Load events that contain an mxc URL to a file from the index.\r\n     *\r\n     * @param  {object} args Arguments object for the method.\r\n     * @param  {string} args.roomId The ID of the room for which the events\r\n     * should be loaded.\r\n     * @param  {number} args.limit The maximum number of events to return.\r\n     * @param  {string} args.fromEvent An event id of a previous event returned\r\n     * by this method. Passing this means that we are going to continue loading\r\n     * events from this point in the history.\r\n     * @param  {string} args.direction The direction to which we should continue\r\n     * loading events from. This is used only if fromEvent is used as well.\r\n     *\r\n     * @return {Promise<[IEventAndProfile]>} A promise that will resolve to an\r\n     * array of Matrix events that contain mxc URLs accompanied with the\r\n     * historic profile of the sender.\r\n     */\r\n    public async loadFileEvents(args: ILoadArgs): Promise<IEventAndProfile[]> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    /**\r\n     * close our event index.\r\n     *\r\n     * @return {Promise} A promise that will resolve once the event index has\r\n     * been closed.\r\n     */\r\n    public async closeEventIndex(): Promise<void> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n\r\n    /**\r\n     * Delete our current event index.\r\n     *\r\n     * @return {Promise} A promise that will resolve once the event index has\r\n     * been deleted.\r\n     */\r\n    public async deleteEventIndex(): Promise<void> {\r\n        throw new Error(\"Unimplemented\");\r\n    }\r\n}\r\n"],"mappings":"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"}