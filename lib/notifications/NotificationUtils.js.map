{"version":3,"file":"NotificationUtils.js","names":["_PushRules","require","NotificationUtils","encodeActions","action","notify","sound","highlight","actions","PushRuleActionName","Notify","push","set_tweak","value","DontNotify","decodeActions","i","length","undefined","result","exports"],"sources":["../../src/notifications/NotificationUtils.ts"],"sourcesContent":["/*\r\nCopyright 2016 - 2021 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { PushRuleAction, PushRuleActionName, TweakHighlight, TweakSound } from \"matrix-js-sdk/src/@types/PushRules\";\r\n\r\ninterface IEncodedActions {\r\n    notify: boolean;\r\n    sound?: string;\r\n    highlight?: boolean;\r\n}\r\n\r\nexport class NotificationUtils {\r\n    // Encodes a dictionary of {\r\n    //   \"notify\": true/false,\r\n    //   \"sound\": string or undefined,\r\n    //   \"highlight: true/false,\r\n    // }\r\n    // to a list of push actions.\r\n    public static encodeActions(action: IEncodedActions): PushRuleAction[] {\r\n        const notify = action.notify;\r\n        const sound = action.sound;\r\n        const highlight = action.highlight;\r\n        if (notify) {\r\n            const actions: PushRuleAction[] = [PushRuleActionName.Notify];\r\n            if (sound) {\r\n                actions.push({ set_tweak: \"sound\", value: sound } as TweakSound);\r\n            }\r\n            if (highlight) {\r\n                actions.push({ set_tweak: \"highlight\" } as TweakHighlight);\r\n            } else {\r\n                actions.push({ set_tweak: \"highlight\", value: false } as TweakHighlight);\r\n            }\r\n            return actions;\r\n        } else {\r\n            return [PushRuleActionName.DontNotify];\r\n        }\r\n    }\r\n\r\n    // Decode a list of actions to a dictionary of {\r\n    //   \"notify\": true/false,\r\n    //   \"sound\": string or undefined,\r\n    //   \"highlight: true/false,\r\n    // }\r\n    // If the actions couldn't be decoded then returns null.\r\n    public static decodeActions(actions: PushRuleAction[]): IEncodedActions | null {\r\n        let notify = false;\r\n        let sound: string | undefined;\r\n        let highlight: boolean | undefined = false;\r\n\r\n        for (let i = 0; i < actions.length; ++i) {\r\n            const action = actions[i];\r\n            if (action === PushRuleActionName.Notify) {\r\n                notify = true;\r\n            } else if (action === PushRuleActionName.DontNotify) {\r\n                notify = false;\r\n            } else if (typeof action === \"object\") {\r\n                if (action.set_tweak === \"sound\") {\r\n                    sound = action.value;\r\n                } else if (action.set_tweak === \"highlight\") {\r\n                    highlight = action.value;\r\n                } else {\r\n                    // We don't understand this kind of tweak, so give up.\r\n                    return null;\r\n                }\r\n            } else {\r\n                // We don't understand this kind of action, so give up.\r\n                return null;\r\n            }\r\n        }\r\n\r\n        if (highlight === undefined) {\r\n            // If a highlight tweak is missing a value then it defaults to true.\r\n            highlight = true;\r\n        }\r\n\r\n        const result: IEncodedActions = { notify, highlight };\r\n        if (sound !== undefined) {\r\n            result.sound = sound;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n"],"mappings":";;;;;;AAgBA,IAAAA,UAAA,GAAAC,OAAA;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUO,MAAMC,iBAAiB,CAAC;EAC3B;EACA;EACA;EACA;EACA;EACA;EACA,OAAcC,aAAaA,CAACC,MAAuB,EAAoB;IACnE,MAAMC,MAAM,GAAGD,MAAM,CAACC,MAAM;IAC5B,MAAMC,KAAK,GAAGF,MAAM,CAACE,KAAK;IAC1B,MAAMC,SAAS,GAAGH,MAAM,CAACG,SAAS;IAClC,IAAIF,MAAM,EAAE;MACR,MAAMG,OAAyB,GAAG,CAACC,6BAAkB,CAACC,MAAM,CAAC;MAC7D,IAAIJ,KAAK,EAAE;QACPE,OAAO,CAACG,IAAI,CAAC;UAAEC,SAAS,EAAE,OAAO;UAAEC,KAAK,EAAEP;QAAM,CAAe,CAAC;MACpE;MACA,IAAIC,SAAS,EAAE;QACXC,OAAO,CAACG,IAAI,CAAC;UAAEC,SAAS,EAAE;QAAY,CAAmB,CAAC;MAC9D,CAAC,MAAM;QACHJ,OAAO,CAACG,IAAI,CAAC;UAAEC,SAAS,EAAE,WAAW;UAAEC,KAAK,EAAE;QAAM,CAAmB,CAAC;MAC5E;MACA,OAAOL,OAAO;IAClB,CAAC,MAAM;MACH,OAAO,CAACC,6BAAkB,CAACK,UAAU,CAAC;IAC1C;EACJ;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA,OAAcC,aAAaA,CAACP,OAAyB,EAA0B;IAC3E,IAAIH,MAAM,GAAG,KAAK;IAClB,IAAIC,KAAyB;IAC7B,IAAIC,SAA8B,GAAG,KAAK;IAE1C,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,OAAO,CAACS,MAAM,EAAE,EAAED,CAAC,EAAE;MACrC,MAAMZ,MAAM,GAAGI,OAAO,CAACQ,CAAC,CAAC;MACzB,IAAIZ,MAAM,KAAKK,6BAAkB,CAACC,MAAM,EAAE;QACtCL,MAAM,GAAG,IAAI;MACjB,CAAC,MAAM,IAAID,MAAM,KAAKK,6BAAkB,CAACK,UAAU,EAAE;QACjDT,MAAM,GAAG,KAAK;MAClB,CAAC,MAAM,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;QACnC,IAAIA,MAAM,CAACQ,SAAS,KAAK,OAAO,EAAE;UAC9BN,KAAK,GAAGF,MAAM,CAACS,KAAK;QACxB,CAAC,MAAM,IAAIT,MAAM,CAACQ,SAAS,KAAK,WAAW,EAAE;UACzCL,SAAS,GAAGH,MAAM,CAACS,KAAK;QAC5B,CAAC,MAAM;UACH;UACA,OAAO,IAAI;QACf;MACJ,CAAC,MAAM;QACH;QACA,OAAO,IAAI;MACf;IACJ;IAEA,IAAIN,SAAS,KAAKW,SAAS,EAAE;MACzB;MACAX,SAAS,GAAG,IAAI;IACpB;IAEA,MAAMY,MAAuB,GAAG;MAAEd,MAAM;MAAEE;IAAU,CAAC;IACrD,IAAID,KAAK,KAAKY,SAAS,EAAE;MACrBC,MAAM,CAACb,KAAK,GAAGA,KAAK;IACxB;IACA,OAAOa,MAAM;EACjB;AACJ;AAACC,OAAA,CAAAlB,iBAAA,GAAAA,iBAAA"}