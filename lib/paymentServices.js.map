{"version":3,"file":"paymentServices.js","names":["_SdkConfig","_interopRequireDefault","require","_axios","_Modal","_ErrorDialog","_MatrixClientPeg","extractWalletAddress","inputString","addressRegex","match","exec","exports","generatePaymentLink","userId","senderId","MatrixClientPeg","get","getUserId","xummStatus","axios","res","SdkConfig","backend_url","env","data","value","addressActiveOn","post","message","kycApproved","amount","headers","console","log","e","Modal","createDialog","ErrorDialog","title","description","test","active","main","dev"],"sources":["../src/paymentServices.ts"],"sourcesContent":["import SdkConfig from \"./SdkConfig\";\r\nimport axios from \"axios\";\r\nimport Modal from \"./Modal\";\r\nimport ErrorDialog from \"./components/views/dialogs/ErrorDialog\";\r\nimport { MatrixClientPeg } from \"./MatrixClientPeg\";\r\nexport const extractWalletAddress = (inputString: string) => {\r\n    // Define a regular expression pattern to match XRPL addresses\r\n    const addressRegex = /@([a-zA-Z0-9]{25,34})/;\r\n\r\n    // Use the RegExp.exec method to find the address in the input string\r\n    const match = addressRegex.exec(inputString);\r\n\r\n    // Check if a match was found and extract the address\r\n    if (match && match[1]) {\r\n        return match[1];\r\n    }\r\n    // Return null if no address was found\r\n    return null;\r\n};\r\nexport const generatePaymentLink = async (userId: string) => {\r\n    //         const notificationMessage = isKYCVerified(senderId) ?\r\n    //   'ðŸ”’ Secure Message Alert! ðŸŒŸ You have a verified message waiting for you on TextRP from a KYC-verified sender. Rest assured, your security is our top priority. View your message safely by logging in at app.textrp.io.' :\r\n    //   'ðŸ”’ Secure Message Alert! ðŸš€ You have a new message on TextRP. While the sender hasn't been KYC-verified, we ensure your login and viewing experience remains safe. Access your message at app.textrp.io.';\r\n    const senderId = MatrixClientPeg.get().getUserId();\r\n    const xummStatus = await axios.get(`https://xumm.app/api/v1/platform/kyc-status/${extractWalletAddress(senderId)}`);\r\n    const res = await axios.get(`${SdkConfig.get().backend_url}/get-all-env`);\r\n\r\n    let env = res.data[0].value === \"xrplMain\" ? \"mainnet\" : res.data[0].value === \"xrplDev\" ? \"devnet\" : \"testnet\";\r\n\r\n    let addressActiveOn = await axios.get(\r\n        `${SdkConfig.get().backend_url}/verify-address-allEnv/${extractWalletAddress(userId)}`,\r\n    );\r\n    try {\r\n        const res = await axios.post(\r\n            `${SdkConfig.get(\"backend_url\")}/accounts/${extractWalletAddress(userId)}/payments`,\r\n            {\r\n                message: xummStatus.data.kycApproved\r\n                    ? \"ðŸ”’ Message Notification ðŸŒŸ You have a new encrypted message from a KYC-verified wallet user. Log in securely at textrp.io to view it. To report spam visit help.textrp.io\" : `ðŸ”’ Message Notification ðŸŒŸ\r\n                    You have a new encrypted message waiting. Sending account not KYC-verified. Log in securely at textrp.io to view it. To report spam visit help.textrp.io`,\r\n                amount: \"0.000001\",\r\n            },\r\n            {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\", // Set the content type to JSON\r\n                },\r\n            },\r\n        );\r\n        console.log(\"GGGGGGG\", res);\r\n\r\n        // window.open(res?.data?.data?.next?.always, '_blank')\r\n    } catch (e) {\r\n        Modal.createDialog(ErrorDialog, {\r\n            title: \"Failed MicroTransaction\",\r\n            description: `${extractWalletAddress(userId)} is active on ${\r\n                addressActiveOn?.data?.test?.active ? \"testnet\" : \"\"\r\n            } ${addressActiveOn?.data?.main?.active ? \"mainnet\" : \"\"} ${\r\n                addressActiveOn?.data?.dev?.active ? \"devnet\" : \"\"\r\n            } and the current xrpl environment is ${env}`,\r\n        });\r\n    }\r\n};\r\n"],"mappings":";;;;;;;AAAA,IAAAA,UAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,MAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,MAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,YAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,gBAAA,GAAAJ,OAAA;AACO,MAAMK,oBAAoB,GAAIC,WAAmB,IAAK;EACzD;EACA,MAAMC,YAAY,GAAG,uBAAuB;;EAE5C;EACA,MAAMC,KAAK,GAAGD,YAAY,CAACE,IAAI,CAACH,WAAW,CAAC;;EAE5C;EACA,IAAIE,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;IACnB,OAAOA,KAAK,CAAC,CAAC,CAAC;EACnB;EACA;EACA,OAAO,IAAI;AACf,CAAC;AAACE,OAAA,CAAAL,oBAAA,GAAAA,oBAAA;AACK,MAAMM,mBAAmB,GAAG,MAAOC,MAAc,IAAK;EACzD;EACA;EACA;EACA,MAAMC,QAAQ,GAAGC,gCAAe,CAACC,GAAG,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC;EAClD,MAAMC,UAAU,GAAG,MAAMC,cAAK,CAACH,GAAG,CAAE,+CAA8CV,oBAAoB,CAACQ,QAAQ,CAAE,EAAC,CAAC;EACnH,MAAMM,GAAG,GAAG,MAAMD,cAAK,CAACH,GAAG,CAAE,GAAEK,kBAAS,CAACL,GAAG,CAAC,CAAC,CAACM,WAAY,cAAa,CAAC;EAEzE,IAAIC,GAAG,GAAGH,GAAG,CAACI,IAAI,CAAC,CAAC,CAAC,CAACC,KAAK,KAAK,UAAU,GAAG,SAAS,GAAGL,GAAG,CAACI,IAAI,CAAC,CAAC,CAAC,CAACC,KAAK,KAAK,SAAS,GAAG,QAAQ,GAAG,SAAS;EAE/G,IAAIC,eAAe,GAAG,MAAMP,cAAK,CAACH,GAAG,CAChC,GAAEK,kBAAS,CAACL,GAAG,CAAC,CAAC,CAACM,WAAY,0BAAyBhB,oBAAoB,CAACO,MAAM,CAAE,EACzF,CAAC;EACD,IAAI;IACA,MAAMO,GAAG,GAAG,MAAMD,cAAK,CAACQ,IAAI,CACvB,GAAEN,kBAAS,CAACL,GAAG,CAAC,aAAa,CAAE,aAAYV,oBAAoB,CAACO,MAAM,CAAE,WAAU,EACnF;MACIe,OAAO,EAAEV,UAAU,CAACM,IAAI,CAACK,WAAW,GAC9B,2KAA2K,GAAI;AACrM,6KAA6K;MAC7JC,MAAM,EAAE;IACZ,CAAC,EACD;MACIC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB,CAAE;MACxC;IACJ,CACJ,CAAC;;IACDC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEb,GAAG,CAAC;;IAE3B;EACJ,CAAC,CAAC,OAAOc,CAAC,EAAE;IACRC,cAAK,CAACC,YAAY,CAACC,oBAAW,EAAE;MAC5BC,KAAK,EAAE,yBAAyB;MAChCC,WAAW,EAAG,GAAEjC,oBAAoB,CAACO,MAAM,CAAE,iBACzCa,eAAe,EAAEF,IAAI,EAAEgB,IAAI,EAAEC,MAAM,GAAG,SAAS,GAAG,EACrD,IAAGf,eAAe,EAAEF,IAAI,EAAEkB,IAAI,EAAED,MAAM,GAAG,SAAS,GAAG,EAAG,IACrDf,eAAe,EAAEF,IAAI,EAAEmB,GAAG,EAAEF,MAAM,GAAG,QAAQ,GAAG,EACnD,wCAAuClB,GAAI;IAChD,CAAC,CAAC;EACN;AACJ,CAAC;AAACZ,OAAA,CAAAC,mBAAA,GAAAA,mBAAA"}