{"version":3,"file":"ImageUtils.js","names":["thumbHeight","fullWidth","fullHeight","thumbWidth","widthMulti","heightMulti","Math","floor"],"sources":["../src/ImageUtils.ts"],"sourcesContent":["/*\r\nCopyright 2015, 2016, 2020 Copyright 2020 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\n/**\r\n * Returns the actual height that an image of dimensions (fullWidth, fullHeight)\r\n * will occupy if resized to fit inside a thumbnail bounding box of size\r\n * (thumbWidth, thumbHeight).\r\n *\r\n * If the aspect ratio of the source image is taller than the aspect ratio of\r\n * the thumbnail bounding box, then we return the thumbHeight parameter unchanged.\r\n * Otherwise we return the thumbHeight parameter scaled down appropriately to\r\n * reflect the actual height the scaled thumbnail occupies.\r\n *\r\n * This is very useful for calculating how much height a thumbnail will actually\r\n * consume in the timeline, when performing scroll offset calculations\r\n * (e.g. scroll locking)\r\n */\r\nexport function thumbHeight(fullWidth: number, fullHeight: number, thumbWidth: number, thumbHeight: number): number;\r\nexport function thumbHeight(\r\n    fullWidth: number | undefined,\r\n    fullHeight: number | undefined,\r\n    thumbWidth: number,\r\n    thumbHeight: number,\r\n): null;\r\nexport function thumbHeight(\r\n    fullWidth: number | undefined,\r\n    fullHeight: number | undefined,\r\n    thumbWidth: number,\r\n    thumbHeight: number,\r\n): number | null {\r\n    if (!fullWidth || !fullHeight) {\r\n        // Cannot calculate thumbnail height for image: missing w/h in metadata. We can't even\r\n        // log this because it's spammy\r\n        return null;\r\n    }\r\n    if (fullWidth < thumbWidth && fullHeight < thumbHeight) {\r\n        // no scaling needs to be applied\r\n        return fullHeight;\r\n    }\r\n    const widthMulti = thumbWidth / fullWidth;\r\n    const heightMulti = thumbHeight / fullHeight;\r\n    if (widthMulti < heightMulti) {\r\n        // width is the dominant dimension so scaling will be fixed on that\r\n        return Math.floor(widthMulti * fullHeight);\r\n    } else {\r\n        // height is the dominant dimension so scaling will be fixed on that\r\n        return Math.floor(heightMulti * fullHeight);\r\n    }\r\n}\r\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQO,SAASA,WAAWA,CACvBC,SAA6B,EAC7BC,UAA8B,EAC9BC,UAAkB,EAClBH,WAAmB,EACN;EACb,IAAI,CAACC,SAAS,IAAI,CAACC,UAAU,EAAE;IAC3B;IACA;IACA,OAAO,IAAI;EACf;EACA,IAAID,SAAS,GAAGE,UAAU,IAAID,UAAU,GAAGF,WAAW,EAAE;IACpD;IACA,OAAOE,UAAU;EACrB;EACA,MAAME,UAAU,GAAGD,UAAU,GAAGF,SAAS;EACzC,MAAMI,WAAW,GAAGL,WAAW,GAAGE,UAAU;EAC5C,IAAIE,UAAU,GAAGC,WAAW,EAAE;IAC1B;IACA,OAAOC,IAAI,CAACC,KAAK,CAACH,UAAU,GAAGF,UAAU,CAAC;EAC9C,CAAC,MAAM;IACH;IACA,OAAOI,IAAI,CAACC,KAAK,CAACF,WAAW,GAAGH,UAAU,CAAC;EAC/C;AACJ"}