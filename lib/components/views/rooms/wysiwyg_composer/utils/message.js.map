{"version":3,"file":"message.js","names":["_thread","require","_PosthogAnalytics","_SettingsStore","_interopRequireDefault","_sendTimePerformanceMetrics","_localRoom","_effects","_utils","_dispatcher","_ConfirmRedactDialog","_editing","_createMessageContent","_isContentModified","_SlashCommands","_commands","_actions","_Reply","_SendMessageComposer","_excluded","sendMessage","message","isHTML","_ref","roomContext","mxClient","params","_objectWithoutProperties2","default","relation","replyToEvent","permalinkCreator","room","roomId","posthogEvent","eventName","isEditing","isReply","Boolean","inThread","rel_type","THREAD_RELATION_TYPE","name","PosthogAnalytics","instance","trackEvent","content","startsWith","EMOTE_PREFIX","cmd","args","getCommand","threadId","event_id","commandSuccessful","runSlashCommand","category","CommandCategories","messages","effects","attachRelation","addReplyToMessageContent","includeLegacyFallback","msgtype","sendAnyway","shouldSendAnyway","dis","dispatch","action","Action","FocusAComposer","context","timelineRenderingType","createMessageContent","body","trim","SettingsStore","getValue","decorateStartSendingTime","prom","doMaybeLocalRoomAction","actualRoomId","event","CHAT_EFFECTS","forEach","effect","containsEmoji","emojis","isNotThread","command","then","resp","sendRoundTripMetric","editMessage","html","_ref2","editorStateTransfer","editedEvent","getEvent","getThread","replyEventId","editContent","newContent","shouldSend","cancelPreviousPendingEdit","createRedactEventDialog","mxEvent","onCloseDialog","endEditing","response","getRoomId","isContentModified","threadRootId"],"sources":["../../../../../../src/components/views/rooms/wysiwyg_composer/utils/message.ts"],"sourcesContent":["/*\r\nCopyright 2022 - 2023 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { Composer as ComposerEvent } from \"@matrix-org/analytics-events/types/typescript/Composer\";\r\nimport { IContent, IEventRelation, MatrixEvent } from \"matrix-js-sdk/src/models/event\";\r\nimport { ISendEventResponse, MatrixClient } from \"matrix-js-sdk/src/matrix\";\r\nimport { THREAD_RELATION_TYPE } from \"matrix-js-sdk/src/models/thread\";\r\n\r\nimport { PosthogAnalytics } from \"../../../../../PosthogAnalytics\";\r\nimport SettingsStore from \"../../../../../settings/SettingsStore\";\r\nimport { decorateStartSendingTime, sendRoundTripMetric } from \"../../../../../sendTimePerformanceMetrics\";\r\nimport { RoomPermalinkCreator } from \"../../../../../utils/permalinks/Permalinks\";\r\nimport { doMaybeLocalRoomAction } from \"../../../../../utils/local-room\";\r\nimport { CHAT_EFFECTS } from \"../../../../../effects\";\r\nimport { containsEmoji } from \"../../../../../effects/utils\";\r\nimport { IRoomState } from \"../../../../structures/RoomView\";\r\nimport dis from \"../../../../../dispatcher/dispatcher\";\r\nimport { createRedactEventDialog } from \"../../../dialogs/ConfirmRedactDialog\";\r\nimport { endEditing, cancelPreviousPendingEdit } from \"./editing\";\r\nimport EditorStateTransfer from \"../../../../../utils/EditorStateTransfer\";\r\nimport { createMessageContent, EMOTE_PREFIX } from \"./createMessageContent\";\r\nimport { isContentModified } from \"./isContentModified\";\r\nimport { CommandCategories, getCommand } from \"../../../../../SlashCommands\";\r\nimport { runSlashCommand, shouldSendAnyway } from \"../../../../../editor/commands\";\r\nimport { Action } from \"../../../../../dispatcher/actions\";\r\nimport { addReplyToMessageContent } from \"../../../../../utils/Reply\";\r\nimport { attachRelation } from \"../../SendMessageComposer\";\r\n\r\nexport interface SendMessageParams {\r\n    mxClient: MatrixClient;\r\n    relation?: IEventRelation;\r\n    replyToEvent?: MatrixEvent;\r\n    roomContext: IRoomState;\r\n    permalinkCreator?: RoomPermalinkCreator;\r\n    includeReplyLegacyFallback?: boolean;\r\n}\r\n\r\nexport async function sendMessage(\r\n    message: string,\r\n    isHTML: boolean,\r\n    { roomContext, mxClient, ...params }: SendMessageParams,\r\n): Promise<ISendEventResponse | undefined> {\r\n    const { relation, replyToEvent, permalinkCreator } = params;\r\n    const { room } = roomContext;\r\n    const roomId = room?.roomId;\r\n\r\n    if (!roomId) {\r\n        return;\r\n    }\r\n\r\n    const posthogEvent: ComposerEvent = {\r\n        eventName: \"Composer\",\r\n        isEditing: false,\r\n        isReply: Boolean(replyToEvent),\r\n        // TODO thread\r\n        inThread: relation?.rel_type === THREAD_RELATION_TYPE.name,\r\n    };\r\n\r\n    // TODO thread\r\n    /*if (posthogEvent.inThread) {\r\n        const threadRoot = room.findEventById(relation?.event_id);\r\n        posthogEvent.startsThread = threadRoot?.getThread()?.events.length === 1;\r\n    }*/\r\n    PosthogAnalytics.instance.trackEvent<ComposerEvent>(posthogEvent);\r\n\r\n    let content: IContent | null = null;\r\n\r\n    // Slash command handling here approximates what can be found in SendMessageComposer.sendMessage()\r\n    // but note that the /me and // special cases are handled by the call to createMessageContent\r\n    if (message.startsWith(\"/\") && !message.startsWith(\"//\") && !message.startsWith(EMOTE_PREFIX)) {\r\n        const { cmd, args } = getCommand(message);\r\n        if (cmd) {\r\n            const threadId = relation?.rel_type === THREAD_RELATION_TYPE.name ? relation?.event_id : null;\r\n            let commandSuccessful: boolean;\r\n            [content, commandSuccessful] = await runSlashCommand(mxClient, cmd, args, roomId, threadId ?? null);\r\n\r\n            if (!commandSuccessful) {\r\n                return; // errored\r\n            }\r\n\r\n            if (\r\n                content &&\r\n                (cmd.category === CommandCategories.messages || cmd.category === CommandCategories.effects)\r\n            ) {\r\n                attachRelation(content, relation);\r\n                if (replyToEvent) {\r\n                    addReplyToMessageContent(content, replyToEvent, {\r\n                        permalinkCreator,\r\n                        // Exclude the legacy fallback for custom event types such as those used by /fireworks\r\n                        includeLegacyFallback: content.msgtype?.startsWith(\"m.\") ?? true,\r\n                    });\r\n                }\r\n            } else {\r\n                // instead of setting shouldSend to false as in SendMessageComposer, just return\r\n                return;\r\n            }\r\n        } else {\r\n            const sendAnyway = await shouldSendAnyway(message);\r\n            // re-focus the composer after QuestionDialog is closed\r\n            dis.dispatch({\r\n                action: Action.FocusAComposer,\r\n                context: roomContext.timelineRenderingType,\r\n            });\r\n            // if !sendAnyway bail to let the user edit the composer and try again\r\n            if (!sendAnyway) return;\r\n        }\r\n    }\r\n\r\n    // if content is null, we haven't done any slash command processing, so generate some content\r\n    content ??= await createMessageContent(message, isHTML, params);\r\n\r\n    // TODO replace emotion end of message ?\r\n\r\n    // TODO quick reaction\r\n\r\n    // don't bother sending an empty message\r\n    if (!content.body.trim()) {\r\n        return;\r\n    }\r\n\r\n    if (SettingsStore.getValue(\"Performance.addSendMessageTimingMetadata\")) {\r\n        decorateStartSendingTime(content);\r\n    }\r\n\r\n    const threadId = relation?.event_id && relation?.rel_type === THREAD_RELATION_TYPE.name ? relation.event_id : null;\r\n\r\n    const prom = doMaybeLocalRoomAction(\r\n        roomId,\r\n        (actualRoomId: string) => mxClient.sendMessage(actualRoomId, threadId, content as IContent),\r\n        mxClient,\r\n    );\r\n\r\n    if (replyToEvent) {\r\n        // Clear reply_to_event as we put the message into the queue\r\n        // if the send fails, retry will handle resending.\r\n        dis.dispatch({\r\n            action: \"reply_to_event\",\r\n            event: null,\r\n            context: roomContext.timelineRenderingType,\r\n        });\r\n    }\r\n\r\n    dis.dispatch({ action: \"message_sent\" });\r\n    CHAT_EFFECTS.forEach((effect) => {\r\n        if (content && containsEmoji(content, effect.emojis)) {\r\n            // For initial threads launch, chat effects are disabled\r\n            // see #19731\r\n            const isNotThread = relation?.rel_type !== THREAD_RELATION_TYPE.name;\r\n            if (isNotThread) {\r\n                dis.dispatch({ action: `effects.${effect.command}` });\r\n            }\r\n        }\r\n    });\r\n    if (SettingsStore.getValue(\"Performance.addSendMessageTimingMetadata\")) {\r\n        prom.then((resp) => {\r\n            sendRoundTripMetric(mxClient, roomId, resp.event_id);\r\n        });\r\n    }\r\n\r\n    // TODO save history\r\n    // TODO save local state\r\n\r\n    //if (shouldSend && SettingsStore.getValue(\"scrollToBottomOnMessageSent\")) {\r\n    if (SettingsStore.getValue(\"scrollToBottomOnMessageSent\")) {\r\n        dis.dispatch({\r\n            action: \"scroll_to_bottom\",\r\n            timelineRenderingType: roomContext.timelineRenderingType,\r\n        });\r\n    }\r\n\r\n    return prom;\r\n}\r\n\r\ninterface EditMessageParams {\r\n    mxClient: MatrixClient;\r\n    roomContext: IRoomState;\r\n    editorStateTransfer: EditorStateTransfer;\r\n}\r\n\r\nexport async function editMessage(\r\n    html: string,\r\n    { roomContext, mxClient, editorStateTransfer }: EditMessageParams,\r\n): Promise<ISendEventResponse | undefined> {\r\n    const editedEvent = editorStateTransfer.getEvent();\r\n\r\n    PosthogAnalytics.instance.trackEvent<ComposerEvent>({\r\n        eventName: \"Composer\",\r\n        isEditing: true,\r\n        inThread: Boolean(editedEvent?.getThread()),\r\n        isReply: Boolean(editedEvent.replyEventId),\r\n    });\r\n\r\n    // TODO emoji\r\n    // Replace emoticon at the end of the message\r\n    /*    if (SettingsStore.getValue('MessageComposerInput.autoReplaceEmoji')) {\r\n        const caret = this.editorRef.current?.getCaret();\r\n        const position = this.model.positionForOffset(caret.offset, caret.atNodeEnd);\r\n        this.editorRef.current?.replaceEmoticon(position, REGEX_EMOTICON);\r\n    }*/\r\n    const editContent = await createMessageContent(html, true, { editedEvent });\r\n    const newContent = editContent[\"m.new_content\"];\r\n\r\n    const shouldSend = true;\r\n\r\n    if (newContent?.body === \"\") {\r\n        cancelPreviousPendingEdit(mxClient, editorStateTransfer);\r\n        createRedactEventDialog({\r\n            mxEvent: editedEvent,\r\n            onCloseDialog: () => {\r\n                endEditing(roomContext);\r\n            },\r\n        });\r\n        return;\r\n    }\r\n\r\n    let response: Promise<ISendEventResponse> | undefined;\r\n\r\n    const roomId = editedEvent.getRoomId();\r\n\r\n    // If content is modified then send an updated event into the room\r\n    if (isContentModified(newContent, editorStateTransfer) && roomId) {\r\n        // TODO Slash Commands\r\n\r\n        if (shouldSend) {\r\n            cancelPreviousPendingEdit(mxClient, editorStateTransfer);\r\n\r\n            const event = editorStateTransfer.getEvent();\r\n            const threadId = event.threadRootId || null;\r\n\r\n            response = mxClient.sendMessage(roomId, threadId, editContent);\r\n            dis.dispatch({ action: \"message_sent\" });\r\n        }\r\n    }\r\n\r\n    endEditing(roomContext);\r\n    return response;\r\n}\r\n"],"mappings":"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"}