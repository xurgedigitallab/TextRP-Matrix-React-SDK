{"version":3,"file":"autocomplete.js","names":["Avatar","_interopRequireWildcard","require","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","buildQuery","suggestion","keyChar","text","getRoomFromCompletion","completion","client","roomId","completionId","aliasFromCompletion","roomToReturn","getRoom","startsWith","getRooms","find","r","getCanonicalAlias","getAltAliases","includes","getMentionDisplayText","type","name","getMentionAttributes","room","defaultLetterContent","mentionedMember","getMember","userId","defaultAvatarUrl","defaultAvatarUrlForString","avatarUrl","avatarUrlForMember","initialLetter","getInitialLetter","mentionedRoom","avatarUrlForRoom"],"sources":["../../../../../../src/components/views/rooms/wysiwyg_composer/utils/autocomplete.ts"],"sourcesContent":["/*\r\nCopyright 2023 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { Attributes, MappedSuggestion } from \"@matrix-org/matrix-wysiwyg\";\r\nimport { MatrixClient, Room } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport { ICompletion } from \"../../../../../autocomplete/Autocompleter\";\r\nimport * as Avatar from \"../../../../../Avatar\";\r\n\r\n/**\r\n * Builds the query for the `<Autocomplete />` component from the rust suggestion. This\r\n * will change as we implement handling / commands.\r\n *\r\n * @param suggestion  - represents if the rust model is tracking a potential mention\r\n * @returns an empty string if we can not generate a query, otherwise a query beginning\r\n * with @ for a user query, # for a room or space query\r\n */\r\nexport function buildQuery(suggestion: MappedSuggestion | null): string {\r\n    if (!suggestion || !suggestion.keyChar) {\r\n        // if we have an empty key character, we do not build a query\r\n        return \"\";\r\n    }\r\n\r\n    return `${suggestion.keyChar}${suggestion.text}`;\r\n}\r\n\r\n/**\r\n * Find the room from the completion by looking it up using the client from the context\r\n * we are currently in\r\n *\r\n * @param completion - the completion from the autocomplete\r\n * @param client - the current client we are using\r\n * @returns a Room if one is found, null otherwise\r\n */\r\nexport function getRoomFromCompletion(completion: ICompletion, client: MatrixClient): Room | null {\r\n    const roomId = completion.completionId;\r\n    const aliasFromCompletion = completion.completion;\r\n\r\n    let roomToReturn: Room | null | undefined;\r\n\r\n    // Not quite sure if the logic here makes sense - specifically calling .getRoom with an alias\r\n    // that doesn't start with #, but keeping the logic the same as in PartCreator.roomPill for now\r\n    if (roomId) {\r\n        roomToReturn = client.getRoom(roomId);\r\n    } else if (!aliasFromCompletion.startsWith(\"#\")) {\r\n        roomToReturn = client.getRoom(aliasFromCompletion);\r\n    } else {\r\n        roomToReturn = client.getRooms().find((r) => {\r\n            return r.getCanonicalAlias() === aliasFromCompletion || r.getAltAliases().includes(aliasFromCompletion);\r\n        });\r\n    }\r\n\r\n    return roomToReturn ?? null;\r\n}\r\n\r\n/**\r\n * Given an autocomplete suggestion, determine the text to display in the pill\r\n *\r\n * @param completion - the item selected from the autocomplete\r\n * @param client - the MatrixClient is required for us to look up the correct room mention text\r\n * @returns the text to display in the mention\r\n */\r\nexport function getMentionDisplayText(completion: ICompletion, client: MatrixClient): string {\r\n    if (completion.type === \"user\" || completion.type === \"at-room\") {\r\n        return completion.completion;\r\n    } else if (completion.type === \"room\") {\r\n        // try and get the room and use it's name, if not available, fall back to\r\n        // completion.completion\r\n        return getRoomFromCompletion(completion, client)?.name || completion.completion;\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/**\r\n * For a given completion, the attributes will change depending on the completion type\r\n *\r\n * @param completion - the item selected from the autocomplete\r\n * @param client - the MatrixClient is required for us to look up the correct room mention text\r\n * @returns an object of attributes containing HTMLAnchor attributes or data-* attributes\r\n */\r\nexport function getMentionAttributes(completion: ICompletion, client: MatrixClient, room: Room): Attributes {\r\n    // To ensure that we always have something set in the --avatar-letter CSS variable\r\n    // as otherwise alignment varies depending on whether the content is empty or not.\r\n\r\n    // Use a zero width space so that it counts as content, but does not display anything.\r\n    const defaultLetterContent = \"\\u200b\";\r\n\r\n    if (completion.type === \"user\") {\r\n        // logic as used in UserPillPart.setAvatar in parts.ts\r\n        const mentionedMember = room.getMember(completion.completionId || \"\");\r\n\r\n        if (!mentionedMember) return {};\r\n\r\n        const name = mentionedMember.name || mentionedMember.userId;\r\n        const defaultAvatarUrl = Avatar.defaultAvatarUrlForString(mentionedMember.userId);\r\n        const avatarUrl = Avatar.avatarUrlForMember(mentionedMember, 16, 16, \"crop\");\r\n        let initialLetter = defaultLetterContent;\r\n        if (avatarUrl === defaultAvatarUrl) {\r\n            initialLetter = Avatar.getInitialLetter(name) ?? defaultLetterContent;\r\n        }\r\n\r\n        return {\r\n            \"data-mention-type\": completion.type,\r\n            \"style\": `--avatar-background: url(${avatarUrl}); --avatar-letter: '${initialLetter}'`,\r\n        };\r\n    } else if (completion.type === \"room\") {\r\n        // logic as used in RoomPillPart.setAvatar in parts.ts\r\n        const mentionedRoom = getRoomFromCompletion(completion, client);\r\n        const aliasFromCompletion = completion.completion;\r\n\r\n        let initialLetter = defaultLetterContent;\r\n        let avatarUrl = Avatar.avatarUrlForRoom(mentionedRoom ?? null, 16, 16, \"crop\");\r\n        if (!avatarUrl) {\r\n            initialLetter = Avatar.getInitialLetter(mentionedRoom?.name || aliasFromCompletion) ?? defaultLetterContent;\r\n            avatarUrl = Avatar.defaultAvatarUrlForString(mentionedRoom?.roomId ?? aliasFromCompletion);\r\n        }\r\n\r\n        return {\r\n            \"data-mention-type\": completion.type,\r\n            \"style\": `--avatar-background: url(${avatarUrl}); --avatar-letter: '${initialLetter}'`,\r\n        };\r\n    } else if (completion.type === \"at-room\") {\r\n        return { \"data-mention-type\": completion.type };\r\n    }\r\n    return {};\r\n}\r\n"],"mappings":"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"}