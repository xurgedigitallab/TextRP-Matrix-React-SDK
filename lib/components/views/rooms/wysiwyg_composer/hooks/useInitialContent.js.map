{"version":3,"file":"useInitialContent.js","names":["_react","require","_MatrixClientContext","_RoomContext","_deserialize","_parts","_SettingsStore","_interopRequireDefault","getFormattedContent","editorStateTransfer","getEvent","getContent","formatted_body","replace","parseEditorStateTransfer","room","mxClient","partCreator","CommandPartCreator","parts","hasEditorState","serializedParts","getSerializedParts","map","p","deserializePart","format","parseEvent","shouldEscape","SettingsStore","getValue","reduce","content","part","text","useInitialContent","roomContext","useRoomContext","useMatrixClientContext","useMemo"],"sources":["../../../../../../src/components/views/rooms/wysiwyg_composer/hooks/useInitialContent.ts"],"sourcesContent":["/*\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { MatrixClient, Room } from \"matrix-js-sdk/src/matrix\";\r\nimport { useMemo } from \"react\";\r\n\r\nimport { useMatrixClientContext } from \"../../../../../contexts/MatrixClientContext\";\r\nimport { useRoomContext } from \"../../../../../contexts/RoomContext\";\r\nimport { parseEvent } from \"../../../../../editor/deserialize\";\r\nimport { CommandPartCreator, Part } from \"../../../../../editor/parts\";\r\nimport SettingsStore from \"../../../../../settings/SettingsStore\";\r\nimport EditorStateTransfer from \"../../../../../utils/EditorStateTransfer\";\r\n\r\nfunction getFormattedContent(editorStateTransfer: EditorStateTransfer): string {\r\n    return (\r\n        editorStateTransfer\r\n            .getEvent()\r\n            .getContent()\r\n            .formatted_body?.replace(/<mx-reply>.*<\\/mx-reply>/, \"\") || \"\"\r\n    );\r\n}\r\n\r\nexport function parseEditorStateTransfer(\r\n    editorStateTransfer: EditorStateTransfer,\r\n    room: Room,\r\n    mxClient: MatrixClient,\r\n): string {\r\n    const partCreator = new CommandPartCreator(room, mxClient);\r\n\r\n    let parts: (Part | undefined)[] = [];\r\n    if (editorStateTransfer.hasEditorState()) {\r\n        // if restoring state from a previous editor,\r\n        // restore serialized parts from the state\r\n        const serializedParts = editorStateTransfer.getSerializedParts();\r\n        if (serializedParts !== null) {\r\n            parts = serializedParts.map((p) => partCreator.deserializePart(p));\r\n        }\r\n    } else {\r\n        // otherwise, either restore serialized parts from localStorage or parse the body of the event\r\n        // TODO local storage\r\n        // const restoredParts = this.restoreStoredEditorState(partCreator);\r\n\r\n        if (editorStateTransfer.getEvent().getContent().format === \"org.matrix.custom.html\") {\r\n            return getFormattedContent(editorStateTransfer);\r\n        }\r\n\r\n        parts = parseEvent(editorStateTransfer.getEvent(), partCreator, {\r\n            shouldEscape: SettingsStore.getValue(\"MessageComposerInput.useMarkdown\"),\r\n        });\r\n    }\r\n\r\n    return parts.reduce((content, part) => content + part?.text, \"\");\r\n    // Todo local storage\r\n    // this.saveStoredEditorState();\r\n}\r\n\r\nexport function useInitialContent(editorStateTransfer: EditorStateTransfer): string | undefined {\r\n    const roomContext = useRoomContext();\r\n    const mxClient = useMatrixClientContext();\r\n\r\n    return useMemo<string | undefined>(() => {\r\n        if (editorStateTransfer && roomContext.room && mxClient) {\r\n            return parseEditorStateTransfer(editorStateTransfer, roomContext.room, mxClient);\r\n        }\r\n    }, [editorStateTransfer, roomContext, mxClient]);\r\n}\r\n"],"mappings":";;;;;;;;AAiBA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,oBAAA,GAAAD,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AACA,IAAAI,MAAA,GAAAJ,OAAA;AACA,IAAAK,cAAA,GAAAC,sBAAA,CAAAN,OAAA;AAvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA,SAASO,mBAAmBA,CAACC,mBAAwC,EAAU;EAC3E,OACIA,mBAAmB,CACdC,QAAQ,CAAC,CAAC,CACVC,UAAU,CAAC,CAAC,CACZC,cAAc,EAAEC,OAAO,CAAC,0BAA0B,EAAE,EAAE,CAAC,IAAI,EAAE;AAE1E;AAEO,SAASC,wBAAwBA,CACpCL,mBAAwC,EACxCM,IAAU,EACVC,QAAsB,EAChB;EACN,MAAMC,WAAW,GAAG,IAAIC,yBAAkB,CAACH,IAAI,EAAEC,QAAQ,CAAC;EAE1D,IAAIG,KAA2B,GAAG,EAAE;EACpC,IAAIV,mBAAmB,CAACW,cAAc,CAAC,CAAC,EAAE;IACtC;IACA;IACA,MAAMC,eAAe,GAAGZ,mBAAmB,CAACa,kBAAkB,CAAC,CAAC;IAChE,IAAID,eAAe,KAAK,IAAI,EAAE;MAC1BF,KAAK,GAAGE,eAAe,CAACE,GAAG,CAAEC,CAAC,IAAKP,WAAW,CAACQ,eAAe,CAACD,CAAC,CAAC,CAAC;IACtE;EACJ,CAAC,MAAM;IACH;IACA;IACA;;IAEA,IAAIf,mBAAmB,CAACC,QAAQ,CAAC,CAAC,CAACC,UAAU,CAAC,CAAC,CAACe,MAAM,KAAK,wBAAwB,EAAE;MACjF,OAAOlB,mBAAmB,CAACC,mBAAmB,CAAC;IACnD;IAEAU,KAAK,GAAG,IAAAQ,uBAAU,EAAClB,mBAAmB,CAACC,QAAQ,CAAC,CAAC,EAAEO,WAAW,EAAE;MAC5DW,YAAY,EAAEC,sBAAa,CAACC,QAAQ,CAAC,kCAAkC;IAC3E,CAAC,CAAC;EACN;EAEA,OAAOX,KAAK,CAACY,MAAM,CAAC,CAACC,OAAO,EAAEC,IAAI,KAAKD,OAAO,GAAGC,IAAI,EAAEC,IAAI,EAAE,EAAE,CAAC;EAChE;EACA;AACJ;;AAEO,SAASC,iBAAiBA,CAAC1B,mBAAwC,EAAsB;EAC5F,MAAM2B,WAAW,GAAG,IAAAC,2BAAc,EAAC,CAAC;EACpC,MAAMrB,QAAQ,GAAG,IAAAsB,2CAAsB,EAAC,CAAC;EAEzC,OAAO,IAAAC,cAAO,EAAqB,MAAM;IACrC,IAAI9B,mBAAmB,IAAI2B,WAAW,CAACrB,IAAI,IAAIC,QAAQ,EAAE;MACrD,OAAOF,wBAAwB,CAACL,mBAAmB,EAAE2B,WAAW,CAACrB,IAAI,EAAEC,QAAQ,CAAC;IACpF;EACJ,CAAC,EAAE,CAACP,mBAAmB,EAAE2B,WAAW,EAAEpB,QAAQ,CAAC,CAAC;AACpD"}