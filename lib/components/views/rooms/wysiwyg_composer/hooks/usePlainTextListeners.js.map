{"version":3,"file":"usePlainTextListeners.js","names":["_react","require","_useSettings","_Keyboard","_utils","_useSuggestion","_Typeguards","_RoomContext","_MatrixClientContext","isDivElement","target","HTMLDivElement","amendInnerHtml","text","replace","usePlainTextListeners","initialContent","onChange","onSend","eventRelation","roomContext","useRoomContext","mxClient","useMatrixClientContext","ref","useRef","autocompleteRef","content","setContent","useState","send","useCallback","current","innerHTML","setText","isNotUndefined","isNotNull","currentRefContent","suggestion","onSelect","handleCommand","handleMention","useSuggestion","enterShouldSend","useSettingValue","onInput","event","newInnerHTML","onPaste","nativeEvent","imagePasteWasHandled","isEventToHandleAsClipboardEvent","data","ClipboardEvent","clipboardData","dataTransfer","handleClipboardEvent","preventDefault","onKeyDown","isHandledByAutocomplete","handleEventWithAutocomplete","key","Key","ENTER","sendModifierIsPressed","IS_MAC","metaKey","ctrlKey","shiftKey","stopPropagation","onBeforeInput"],"sources":["../../../../../../src/components/views/rooms/wysiwyg_composer/hooks/usePlainTextListeners.ts"],"sourcesContent":["/*\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { KeyboardEvent, RefObject, SyntheticEvent, useCallback, useRef, useState } from \"react\";\r\nimport { Attributes, MappedSuggestion } from \"@matrix-org/matrix-wysiwyg\";\r\nimport { IEventRelation } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport { useSettingValue } from \"../../../../../hooks/useSettings\";\r\nimport { IS_MAC, Key } from \"../../../../../Keyboard\";\r\nimport Autocomplete from \"../../Autocomplete\";\r\nimport { handleClipboardEvent, handleEventWithAutocomplete, isEventToHandleAsClipboardEvent } from \"./utils\";\r\nimport { useSuggestion } from \"./useSuggestion\";\r\nimport { isNotNull, isNotUndefined } from \"../../../../../Typeguards\";\r\nimport { useRoomContext } from \"../../../../../contexts/RoomContext\";\r\nimport { useMatrixClientContext } from \"../../../../../contexts/MatrixClientContext\";\r\n\r\nfunction isDivElement(target: EventTarget): target is HTMLDivElement {\r\n    return target instanceof HTMLDivElement;\r\n}\r\n\r\n// Hitting enter inside the editor inserts an editable div, initially containing a <br />\r\n// For correct display, first replace this pattern with a newline character and then remove divs\r\n// noting that they are used to delimit paragraphs\r\nfunction amendInnerHtml(text: string): string {\r\n    return text\r\n        .replace(/<div><br><\\/div>/g, \"\\n\") // this is pressing enter then not typing\r\n        .replace(/<div>/g, \"\\n\") // this is from pressing enter, then typing inside the div\r\n        .replace(/<\\/div>/g, \"\");\r\n}\r\n\r\n/**\r\n * React hook which generates all of the listeners and the ref to be attached to the editor.\r\n *\r\n * Also returns pieces of state and utility functions that are required for use in other hooks\r\n * and by the autocomplete component.\r\n *\r\n * @param initialContent - the content of the editor when it is first mounted\r\n * @param onChange - called whenever there is change in the editor content\r\n * @param onSend - called whenever the user sends the message\r\n * @returns\r\n * - `ref`: a ref object which the caller must attach to the HTML `div` node for the editor\r\n * * `autocompleteRef`: a ref object which the caller must attach to the autocomplete component\r\n * - `content`: state representing the editor's current text content\r\n * - `setContent`: the setter function for `content`\r\n * - `onInput`, `onPaste`, `onKeyDown`: handlers for input, paste and keyDown events\r\n * - the output from the {@link useSuggestion} hook\r\n */\r\nexport function usePlainTextListeners(\r\n    initialContent?: string,\r\n    onChange?: (content: string) => void,\r\n    onSend?: () => void,\r\n    eventRelation?: IEventRelation,\r\n): {\r\n    ref: RefObject<HTMLDivElement>;\r\n    autocompleteRef: React.RefObject<Autocomplete>;\r\n    content?: string;\r\n    onBeforeInput(event: SyntheticEvent<HTMLDivElement, InputEvent | ClipboardEvent>): void;\r\n    onInput(event: SyntheticEvent<HTMLDivElement, InputEvent | ClipboardEvent>): void;\r\n    onPaste(event: SyntheticEvent<HTMLDivElement, InputEvent | ClipboardEvent>): void;\r\n    onKeyDown(event: KeyboardEvent<HTMLDivElement>): void;\r\n    setContent(text?: string): void;\r\n    handleMention: (link: string, text: string, attributes: Attributes) => void;\r\n    handleCommand: (text: string) => void;\r\n    onSelect: (event: SyntheticEvent<HTMLDivElement>) => void;\r\n    suggestion: MappedSuggestion | null;\r\n} {\r\n    const roomContext = useRoomContext();\r\n    const mxClient = useMatrixClientContext();\r\n\r\n    const ref = useRef<HTMLDivElement | null>(null);\r\n    const autocompleteRef = useRef<Autocomplete | null>(null);\r\n    const [content, setContent] = useState<string | undefined>(initialContent);\r\n\r\n    const send = useCallback(() => {\r\n        if (ref.current) {\r\n            ref.current.innerHTML = \"\";\r\n        }\r\n        onSend?.();\r\n    }, [ref, onSend]);\r\n\r\n    const setText = useCallback(\r\n        (text?: string) => {\r\n            if (isNotUndefined(text)) {\r\n                setContent(text);\r\n                onChange?.(text);\r\n            } else if (isNotNull(ref) && isNotNull(ref.current)) {\r\n                // if called with no argument, read the current innerHTML from the ref\r\n                const currentRefContent = ref.current.innerHTML;\r\n                setContent(currentRefContent);\r\n                onChange?.(currentRefContent);\r\n            }\r\n        },\r\n        [onChange, ref],\r\n    );\r\n\r\n    // For separation of concerns, the suggestion handling is kept in a separate hook but is\r\n    // nested here because we do need to be able to update the `content` state in this hook\r\n    // when a user selects a suggestion from the autocomplete menu\r\n    const { suggestion, onSelect, handleCommand, handleMention } = useSuggestion(ref, setText);\r\n\r\n    const enterShouldSend = !useSettingValue<boolean>(\"MessageComposerInput.ctrlEnterToSend\");\r\n    const onInput = useCallback(\r\n        (event: SyntheticEvent<HTMLDivElement, InputEvent | ClipboardEvent>) => {\r\n            if (isDivElement(event.target)) {\r\n                // if enterShouldSend, we do not need to amend the html before setting text\r\n                const newInnerHTML = enterShouldSend ? event.target.innerHTML : amendInnerHtml(event.target.innerHTML);\r\n                setText(newInnerHTML);\r\n            }\r\n        },\r\n        [setText, enterShouldSend],\r\n    );\r\n\r\n    const onPaste = useCallback(\r\n        (event: SyntheticEvent<HTMLDivElement, InputEvent | ClipboardEvent>) => {\r\n            const { nativeEvent } = event;\r\n            let imagePasteWasHandled = false;\r\n\r\n            if (isEventToHandleAsClipboardEvent(nativeEvent)) {\r\n                const data =\r\n                    nativeEvent instanceof ClipboardEvent ? nativeEvent.clipboardData : nativeEvent.dataTransfer;\r\n                imagePasteWasHandled = handleClipboardEvent(nativeEvent, data, roomContext, mxClient, eventRelation);\r\n            }\r\n\r\n            // prevent default behaviour and skip call to onInput if the image paste event was handled\r\n            if (imagePasteWasHandled) {\r\n                event.preventDefault();\r\n            } else {\r\n                onInput(event);\r\n            }\r\n        },\r\n        [eventRelation, mxClient, onInput, roomContext],\r\n    );\r\n\r\n    const onKeyDown = useCallback(\r\n        (event: KeyboardEvent<HTMLDivElement>) => {\r\n            // we need autocomplete to take priority when it is open for using enter to select\r\n            const isHandledByAutocomplete = handleEventWithAutocomplete(autocompleteRef, event);\r\n            if (isHandledByAutocomplete) {\r\n                return;\r\n            }\r\n\r\n            // resume regular flow\r\n            if (event.key === Key.ENTER) {\r\n                // TODO use getKeyBindingsManager().getMessageComposerAction(event) like in useInputEventProcessor\r\n                const sendModifierIsPressed = IS_MAC ? event.metaKey : event.ctrlKey;\r\n\r\n                // if enter should send, send if the user is not pushing shift\r\n                if (enterShouldSend && !event.shiftKey) {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    send();\r\n                }\r\n\r\n                // if enter should not send, send only if the user is pushing ctrl/cmd\r\n                if (!enterShouldSend && sendModifierIsPressed) {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    send();\r\n                }\r\n            }\r\n        },\r\n        [autocompleteRef, enterShouldSend, send],\r\n    );\r\n\r\n    return {\r\n        ref,\r\n        autocompleteRef,\r\n        onBeforeInput: onPaste,\r\n        onInput,\r\n        onPaste,\r\n        onKeyDown,\r\n        content,\r\n        setContent: setText,\r\n        suggestion,\r\n        onSelect,\r\n        handleCommand,\r\n        handleMention,\r\n    };\r\n}\r\n"],"mappings":"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"}