{"version":3,"file":"useOwnDevices.js","names":["_react","require","_matrix","_logger","_crypto","_MatrixClientContext","_interopRequireDefault","_languageHandler","_clientInformation","_useEventEmitter","_parseUserAgent","_isDeviceVerified","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","parseDeviceExtendedInformation","matrixClient","device","name","version","url","getDeviceClientInformation","device_id","appName","appVersion","fetchExtendedDeviceInformation","devices","getDevices","devicesDict","isVerified","isDeviceVerified","parseUserAgent","UNSTABLE_MSC3852_LAST_SEEN_UA","OwnDevicesError","exports","useOwnDevices","useContext","MatrixClientContext","currentDeviceId","getDeviceId","userId","getSafeUserId","setDevices","useState","pushers","setPushers","localNotificationSettings","setLocalNotificationSettings","Map","isLoadingDeviceList","setIsLoadingDeviceList","supportsMSC3881","setSupportsMSC3881","error","setError","useEffect","doesServerSupportUnstableFeature","then","hasSupport","refreshDevices","useCallback","getPushers","notificationSettings","deviceId","eventType","LOCAL_NOTIFICATION_SETTINGS_PREFIX","event","getAccountData","set","getContent","httpStatus","Unsupported","logger","Default","deviceIds","pruneClientInformation","useEventEmitter","CryptoEvent","DevicesUpdated","users","includes","ClientEvent","AccountData","type","getType","startsWith","newSettings","slice","lastIndexOf","isCurrentDeviceVerified","requestDeviceVerification","requestVerification","undefined","saveDeviceName","deviceName","display_name","setDeviceDetails","Error","_t","setPushNotifications","enabled","pusher","find","PUSHER_DEVICE_ID","setPusher","PUSHER_ENABLED","has","is_silenced"],"sources":["../../../../../src/components/views/settings/devices/useOwnDevices.ts"],"sourcesContent":["/*\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport {\r\n    ClientEvent,\r\n    IMyDevice,\r\n    IPusher,\r\n    LOCAL_NOTIFICATION_SETTINGS_PREFIX,\r\n    MatrixClient,\r\n    MatrixEvent,\r\n    PUSHER_DEVICE_ID,\r\n    PUSHER_ENABLED,\r\n    UNSTABLE_MSC3852_LAST_SEEN_UA,\r\n} from \"matrix-js-sdk/src/matrix\";\r\nimport { VerificationRequest } from \"matrix-js-sdk/src/crypto/verification/request/VerificationRequest\";\r\nimport { MatrixError } from \"matrix-js-sdk/src/http-api\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\nimport { LocalNotificationSettings } from \"matrix-js-sdk/src/@types/local_notifications\";\r\nimport { CryptoEvent } from \"matrix-js-sdk/src/crypto\";\r\n\r\nimport MatrixClientContext from \"../../../../contexts/MatrixClientContext\";\r\nimport { _t } from \"../../../../languageHandler\";\r\nimport { getDeviceClientInformation, pruneClientInformation } from \"../../../../utils/device/clientInformation\";\r\nimport { DevicesDictionary, ExtendedDevice, ExtendedDeviceAppInfo } from \"./types\";\r\nimport { useEventEmitter } from \"../../../../hooks/useEventEmitter\";\r\nimport { parseUserAgent } from \"../../../../utils/device/parseUserAgent\";\r\nimport { isDeviceVerified } from \"../../../../utils/device/isDeviceVerified\";\r\n\r\nconst parseDeviceExtendedInformation = (matrixClient: MatrixClient, device: IMyDevice): ExtendedDeviceAppInfo => {\r\n    const { name, version, url } = getDeviceClientInformation(matrixClient, device.device_id);\r\n\r\n    return {\r\n        appName: name,\r\n        appVersion: version,\r\n        url,\r\n    };\r\n};\r\n\r\n/**\r\n * Fetch extended details of the user's own devices\r\n *\r\n * @param matrixClient - Matrix Client\r\n * @returns A dictionary mapping from device ID to ExtendedDevice\r\n */\r\nexport async function fetchExtendedDeviceInformation(matrixClient: MatrixClient): Promise<DevicesDictionary> {\r\n    const { devices } = await matrixClient.getDevices();\r\n\r\n    const devicesDict: DevicesDictionary = {};\r\n    for (const device of devices) {\r\n        devicesDict[device.device_id] = {\r\n            ...device,\r\n            isVerified: await isDeviceVerified(matrixClient, device.device_id),\r\n            ...parseDeviceExtendedInformation(matrixClient, device),\r\n            ...parseUserAgent(device[UNSTABLE_MSC3852_LAST_SEEN_UA.name]),\r\n        };\r\n    }\r\n    return devicesDict;\r\n}\r\n\r\nexport enum OwnDevicesError {\r\n    Unsupported = \"Unsupported\",\r\n    Default = \"Default\",\r\n}\r\nexport type DevicesState = {\r\n    devices: DevicesDictionary;\r\n    pushers: IPusher[];\r\n    localNotificationSettings: Map<string, LocalNotificationSettings>;\r\n    currentDeviceId: string;\r\n    isLoadingDeviceList: boolean;\r\n    // not provided when current session cannot request verification\r\n    requestDeviceVerification?: (deviceId: ExtendedDevice[\"device_id\"]) => Promise<VerificationRequest>;\r\n    refreshDevices: () => Promise<void>;\r\n    saveDeviceName: (deviceId: ExtendedDevice[\"device_id\"], deviceName: string) => Promise<void>;\r\n    setPushNotifications: (deviceId: ExtendedDevice[\"device_id\"], enabled: boolean) => Promise<void>;\r\n    error?: OwnDevicesError;\r\n    supportsMSC3881?: boolean | undefined;\r\n};\r\nexport const useOwnDevices = (): DevicesState => {\r\n    const matrixClient = useContext(MatrixClientContext);\r\n\r\n    const currentDeviceId = matrixClient.getDeviceId()!;\r\n    const userId = matrixClient.getSafeUserId();\r\n\r\n    const [devices, setDevices] = useState<DevicesState[\"devices\"]>({});\r\n    const [pushers, setPushers] = useState<DevicesState[\"pushers\"]>([]);\r\n    const [localNotificationSettings, setLocalNotificationSettings] = useState<\r\n        DevicesState[\"localNotificationSettings\"]\r\n    >(new Map<string, LocalNotificationSettings>());\r\n    const [isLoadingDeviceList, setIsLoadingDeviceList] = useState(true);\r\n    const [supportsMSC3881, setSupportsMSC3881] = useState(true); // optimisticly saying yes!\r\n\r\n    const [error, setError] = useState<OwnDevicesError>();\r\n\r\n    useEffect(() => {\r\n        matrixClient.doesServerSupportUnstableFeature(\"org.matrix.msc3881\").then((hasSupport) => {\r\n            setSupportsMSC3881(hasSupport);\r\n        });\r\n    }, [matrixClient]);\r\n\r\n    const refreshDevices = useCallback(async (): Promise<void> => {\r\n        setIsLoadingDeviceList(true);\r\n        try {\r\n            const devices = await fetchExtendedDeviceInformation(matrixClient);\r\n            setDevices(devices);\r\n\r\n            const { pushers } = await matrixClient.getPushers();\r\n            setPushers(pushers);\r\n\r\n            const notificationSettings = new Map<string, LocalNotificationSettings>();\r\n            Object.keys(devices).forEach((deviceId) => {\r\n                const eventType = `${LOCAL_NOTIFICATION_SETTINGS_PREFIX.name}.${deviceId}`;\r\n                const event = matrixClient.getAccountData(eventType);\r\n                if (event) {\r\n                    notificationSettings.set(deviceId, event.getContent());\r\n                }\r\n            });\r\n            setLocalNotificationSettings(notificationSettings);\r\n\r\n            setIsLoadingDeviceList(false);\r\n        } catch (error) {\r\n            if ((error as MatrixError).httpStatus == 404) {\r\n                // 404 probably means the HS doesn't yet support the API.\r\n                setError(OwnDevicesError.Unsupported);\r\n            } else {\r\n                logger.error(\"Error loading sessions:\", error);\r\n                setError(OwnDevicesError.Default);\r\n            }\r\n            setIsLoadingDeviceList(false);\r\n        }\r\n    }, [matrixClient]);\r\n\r\n    useEffect(() => {\r\n        refreshDevices();\r\n    }, [refreshDevices]);\r\n\r\n    useEffect(() => {\r\n        const deviceIds = Object.keys(devices);\r\n        // empty devices means devices have not been fetched yet\r\n        // as there is always at least the current device\r\n        if (deviceIds.length) {\r\n            pruneClientInformation(deviceIds, matrixClient);\r\n        }\r\n    }, [devices, matrixClient]);\r\n\r\n    useEventEmitter(matrixClient, CryptoEvent.DevicesUpdated, (users: string[]): void => {\r\n        if (users.includes(userId)) {\r\n            refreshDevices();\r\n        }\r\n    });\r\n\r\n    useEventEmitter(matrixClient, ClientEvent.AccountData, (event: MatrixEvent): void => {\r\n        const type = event.getType();\r\n        if (type.startsWith(LOCAL_NOTIFICATION_SETTINGS_PREFIX.name)) {\r\n            const newSettings = new Map(localNotificationSettings);\r\n            const deviceId = type.slice(type.lastIndexOf(\".\") + 1);\r\n            newSettings.set(deviceId, event.getContent<LocalNotificationSettings>());\r\n            setLocalNotificationSettings(newSettings);\r\n        }\r\n    });\r\n\r\n    const isCurrentDeviceVerified = !!devices[currentDeviceId]?.isVerified;\r\n\r\n    const requestDeviceVerification =\r\n        isCurrentDeviceVerified && userId\r\n            ? async (deviceId: ExtendedDevice[\"device_id\"]): Promise<VerificationRequest> => {\r\n                  return await matrixClient.requestVerification(userId, [deviceId]);\r\n              }\r\n            : undefined;\r\n\r\n    const saveDeviceName = useCallback(\r\n        async (deviceId: ExtendedDevice[\"device_id\"], deviceName: string): Promise<void> => {\r\n            const device = devices[deviceId];\r\n\r\n            // no change\r\n            if (deviceName === device?.display_name) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await matrixClient.setDeviceDetails(deviceId, { display_name: deviceName });\r\n                await refreshDevices();\r\n            } catch (error) {\r\n                logger.error(\"Error setting session display name\", error);\r\n                throw new Error(_t(\"Failed to set display name\"));\r\n            }\r\n        },\r\n        [matrixClient, devices, refreshDevices],\r\n    );\r\n\r\n    const setPushNotifications = useCallback(\r\n        async (deviceId: ExtendedDevice[\"device_id\"], enabled: boolean): Promise<void> => {\r\n            try {\r\n                const pusher = pushers.find((pusher) => pusher[PUSHER_DEVICE_ID.name] === deviceId);\r\n                if (pusher) {\r\n                    await matrixClient.setPusher({\r\n                        ...pusher,\r\n                        [PUSHER_ENABLED.name]: enabled,\r\n                    });\r\n                } else if (localNotificationSettings.has(deviceId)) {\r\n                    await matrixClient.setLocalNotificationSettings(deviceId, {\r\n                        is_silenced: !enabled,\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                logger.error(\"Error setting pusher state\", error);\r\n                throw new Error(_t(\"Failed to set pusher state\"));\r\n            } finally {\r\n                await refreshDevices();\r\n            }\r\n        },\r\n        [matrixClient, pushers, localNotificationSettings, refreshDevices],\r\n    );\r\n\r\n    return {\r\n        devices,\r\n        pushers,\r\n        localNotificationSettings,\r\n        currentDeviceId,\r\n        isLoadingDeviceList,\r\n        error,\r\n        requestDeviceVerification,\r\n        refreshDevices,\r\n        saveDeviceName,\r\n        setPushNotifications,\r\n        supportsMSC3881,\r\n    };\r\n};\r\n"],"mappings":"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"}