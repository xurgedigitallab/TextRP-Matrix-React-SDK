{"version":3,"file":"usePollHistory.js","names":["_react","require","_matrix","_useEventEmitter","usePolls","roomId","matrixClient","room","getRoom","Error","polls","useEventEmitterState","PollEvent","New","Map","exports","usePollsWithRelations","pollsWithRelations","setPollsWithRelations","useState","useEffect","onPollUpdate","poll","values","on","End","Responses","getResponses","off"],"sources":["../../../../../src/components/views/polls/pollHistory/usePollHistory.ts"],"sourcesContent":["/*\r\nCopyright 2023 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { Poll, PollEvent } from \"matrix-js-sdk/src/matrix\";\r\nimport { MatrixClient } from \"matrix-js-sdk/src/client\";\r\n\r\nimport { useEventEmitterState } from \"../../../../hooks/useEventEmitter\";\r\n\r\n/**\r\n * Get poll instances from a room\r\n * Updates to include new polls\r\n * @param roomId - id of room to retrieve polls for\r\n * @param matrixClient - client\r\n * @returns {Map<string, Poll>} - Map of Poll instances\r\n */\r\nexport const usePolls = (\r\n    roomId: string,\r\n    matrixClient: MatrixClient,\r\n): {\r\n    polls: Map<string, Poll>;\r\n} => {\r\n    const room = matrixClient.getRoom(roomId);\r\n\r\n    if (!room) {\r\n        throw new Error(\"Cannot find room\");\r\n    }\r\n\r\n    // copy room.polls map so changes can be detected\r\n    const polls = useEventEmitterState(room, PollEvent.New, () => new Map<string, Poll>(room.polls));\r\n\r\n    return { polls };\r\n};\r\n\r\n/**\r\n * Get all poll instances from a room\r\n * Fetch their responses (using cached poll responses)\r\n * Updates on:\r\n * - new polls added to room\r\n * - new responses added to polls\r\n * - changes to poll ended state\r\n * @param roomId - id of room to retrieve polls for\r\n * @param matrixClient - client\r\n * @returns {Map<string, Poll>} - Map of Poll instances\r\n */\r\nexport const usePollsWithRelations = (\r\n    roomId: string,\r\n    matrixClient: MatrixClient,\r\n): {\r\n    polls: Map<string, Poll>;\r\n} => {\r\n    const { polls } = usePolls(roomId, matrixClient);\r\n    const [pollsWithRelations, setPollsWithRelations] = useState<Map<string, Poll>>(polls);\r\n\r\n    useEffect(() => {\r\n        const onPollUpdate = async (): Promise<void> => {\r\n            // trigger rerender by creating a new poll map\r\n            setPollsWithRelations(new Map(polls));\r\n        };\r\n        if (polls) {\r\n            for (const poll of polls.values()) {\r\n                // listen to changes in responses and end state\r\n                poll.on(PollEvent.End, onPollUpdate);\r\n                poll.on(PollEvent.Responses, onPollUpdate);\r\n                // trigger request to get all responses\r\n                // if they are not already in cache\r\n                poll.getResponses();\r\n            }\r\n            setPollsWithRelations(polls);\r\n        }\r\n        // unsubscribe\r\n        return () => {\r\n            if (polls) {\r\n                for (const poll of polls.values()) {\r\n                    poll.off(PollEvent.End, onPollUpdate);\r\n                    poll.off(PollEvent.Responses, onPollUpdate);\r\n                }\r\n            }\r\n        };\r\n    }, [polls, setPollsWithRelations]);\r\n\r\n    return { polls: pollsWithRelations };\r\n};\r\n"],"mappings":";;;;;;AAgBA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AAGA,IAAAE,gBAAA,GAAAF,OAAA;AApBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMG,QAAQ,GAAGA,CACpBC,MAAc,EACdC,YAA0B,KAGzB;EACD,MAAMC,IAAI,GAAGD,YAAY,CAACE,OAAO,CAACH,MAAM,CAAC;EAEzC,IAAI,CAACE,IAAI,EAAE;IACP,MAAM,IAAIE,KAAK,CAAC,kBAAkB,CAAC;EACvC;;EAEA;EACA,MAAMC,KAAK,GAAG,IAAAC,qCAAoB,EAACJ,IAAI,EAAEK,iBAAS,CAACC,GAAG,EAAE,MAAM,IAAIC,GAAG,CAAeP,IAAI,CAACG,KAAK,CAAC,CAAC;EAEhG,OAAO;IAAEA;EAAM,CAAC;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVAK,OAAA,CAAAX,QAAA,GAAAA,QAAA;AAWO,MAAMY,qBAAqB,GAAGA,CACjCX,MAAc,EACdC,YAA0B,KAGzB;EACD,MAAM;IAAEI;EAAM,CAAC,GAAGN,QAAQ,CAACC,MAAM,EAAEC,YAAY,CAAC;EAChD,MAAM,CAACW,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG,IAAAC,eAAQ,EAAoBT,KAAK,CAAC;EAEtF,IAAAU,gBAAS,EAAC,MAAM;IACZ,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAA2B;MAC5C;MACAH,qBAAqB,CAAC,IAAIJ,GAAG,CAACJ,KAAK,CAAC,CAAC;IACzC,CAAC;IACD,IAAIA,KAAK,EAAE;MACP,KAAK,MAAMY,IAAI,IAAIZ,KAAK,CAACa,MAAM,CAAC,CAAC,EAAE;QAC/B;QACAD,IAAI,CAACE,EAAE,CAACZ,iBAAS,CAACa,GAAG,EAAEJ,YAAY,CAAC;QACpCC,IAAI,CAACE,EAAE,CAACZ,iBAAS,CAACc,SAAS,EAAEL,YAAY,CAAC;QAC1C;QACA;QACAC,IAAI,CAACK,YAAY,CAAC,CAAC;MACvB;MACAT,qBAAqB,CAACR,KAAK,CAAC;IAChC;IACA;IACA,OAAO,MAAM;MACT,IAAIA,KAAK,EAAE;QACP,KAAK,MAAMY,IAAI,IAAIZ,KAAK,CAACa,MAAM,CAAC,CAAC,EAAE;UAC/BD,IAAI,CAACM,GAAG,CAAChB,iBAAS,CAACa,GAAG,EAAEJ,YAAY,CAAC;UACrCC,IAAI,CAACM,GAAG,CAAChB,iBAAS,CAACc,SAAS,EAAEL,YAAY,CAAC;QAC/C;MACJ;IACJ,CAAC;EACL,CAAC,EAAE,CAACX,KAAK,EAAEQ,qBAAqB,CAAC,CAAC;EAElC,OAAO;IAAER,KAAK,EAAEO;EAAmB,CAAC;AACxC,CAAC;AAACF,OAAA,CAAAC,qBAAA,GAAAA,qBAAA"}