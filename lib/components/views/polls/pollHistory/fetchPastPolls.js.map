{"version":3,"file":"fetchPastPolls.js","names":["_react","require","_polls","_matrix","_filter","_logger","getOldestEventTimestamp","timelineSet","liveTimeline","getLiveTimeline","events","getEvents","getTs","pagePollHistory","matrixClient","canPageBackward","paginateEventTimeline","backwards","oldestEventTimestamp","getPaginationToken","EventTimeline","BACKWARDS","fetchHistoryUntilTimestamp","timestamp","result","ONE_DAY_MS","useTimelineHistory","historyPeriodDays","isLoading","setIsLoading","useState","setOldestEventTimestamp","undefined","setCanPageBackward","loadTimelineHistory","useCallback","endOfHistoryPeriodTimestamp","Date","now","Direction","Backward","error","logger","loadMorePolls","filterDefinition","room","timeline","types","M_POLL_START","name","altName","useFetchPastPolls","arguments","length","setTimelineSet","useEffect","filter","Filter","getSafeUserId","setDefinition","getFilteredTimelineSet","filterId","getOrCreateFilter","roomId","getOrCreateFilteredTimelineSet","exports"],"sources":["../../../../../src/components/views/polls/pollHistory/fetchPastPolls.ts"],"sourcesContent":["/*\r\nCopyright 2023 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { M_POLL_START } from \"matrix-js-sdk/src/@types/polls\";\r\nimport { MatrixClient } from \"matrix-js-sdk/src/client\";\r\nimport { Direction, EventTimeline, EventTimelineSet, Room } from \"matrix-js-sdk/src/matrix\";\r\nimport { Filter, IFilterDefinition } from \"matrix-js-sdk/src/filter\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\n\r\nconst getOldestEventTimestamp = (timelineSet?: EventTimelineSet): number | undefined => {\r\n    if (!timelineSet) {\r\n        return;\r\n    }\r\n\r\n    const liveTimeline = timelineSet?.getLiveTimeline();\r\n    const events = liveTimeline.getEvents();\r\n    return events[0]?.getTs();\r\n};\r\n\r\n/**\r\n * Page backwards in timeline history\r\n * @param timelineSet - timelineset to page\r\n * @param matrixClient - client\r\n * @param canPageBackward - whether the timeline has more pages\r\n * @param oldestEventTimestamp - server ts of the oldest encountered event\r\n */\r\nconst pagePollHistory = async (\r\n    timelineSet: EventTimelineSet,\r\n    matrixClient: MatrixClient,\r\n): Promise<{\r\n    oldestEventTimestamp?: number;\r\n    canPageBackward: boolean;\r\n}> => {\r\n    if (!timelineSet) {\r\n        return { canPageBackward: false };\r\n    }\r\n\r\n    const liveTimeline = timelineSet.getLiveTimeline();\r\n\r\n    await matrixClient.paginateEventTimeline(liveTimeline, {\r\n        backwards: true,\r\n    });\r\n\r\n    return {\r\n        oldestEventTimestamp: getOldestEventTimestamp(timelineSet),\r\n        canPageBackward: !!liveTimeline.getPaginationToken(EventTimeline.BACKWARDS),\r\n    };\r\n};\r\n\r\n/**\r\n * Page timeline backwards until either:\r\n * - event older than timestamp is encountered\r\n * - end of timeline is reached\r\n * @param timelineSet - timeline set to page\r\n * @param matrixClient - client\r\n * @param timestamp - epoch timestamp to page until\r\n * @param canPageBackward - whether the timeline has more pages\r\n * @param oldestEventTimestamp - server ts of the oldest encountered event\r\n */\r\nconst fetchHistoryUntilTimestamp = async (\r\n    timelineSet: EventTimelineSet | undefined,\r\n    matrixClient: MatrixClient,\r\n    timestamp: number,\r\n    canPageBackward: boolean,\r\n    oldestEventTimestamp?: number,\r\n): Promise<void> => {\r\n    if (!timelineSet || !canPageBackward || (oldestEventTimestamp && oldestEventTimestamp < timestamp)) {\r\n        return;\r\n    }\r\n    const result = await pagePollHistory(timelineSet, matrixClient);\r\n\r\n    return fetchHistoryUntilTimestamp(\r\n        timelineSet,\r\n        matrixClient,\r\n        timestamp,\r\n        result.canPageBackward,\r\n        result.oldestEventTimestamp,\r\n    );\r\n};\r\n\r\nconst ONE_DAY_MS = 60000 * 60 * 24;\r\n/**\r\n * Fetches timeline history for given number of days in past\r\n * @param timelineSet - timelineset to page\r\n * @param matrixClient - client\r\n * @param historyPeriodDays - number of days of history to fetch, from current day\r\n * @returns isLoading - true while fetching\r\n * @returns oldestEventTimestamp - timestamp of oldest encountered poll, undefined when no polls found in timeline so far\r\n * @returns loadMorePolls - function to page timeline backwards, undefined when timeline cannot be paged backwards\r\n * @returns loadTimelineHistory - loads timeline history for the given history period\r\n */\r\nconst useTimelineHistory = (\r\n    timelineSet: EventTimelineSet | undefined,\r\n    matrixClient: MatrixClient,\r\n    historyPeriodDays: number,\r\n): {\r\n    isLoading: boolean;\r\n    oldestEventTimestamp?: number;\r\n    loadTimelineHistory: () => Promise<void>;\r\n    loadMorePolls?: () => Promise<void>;\r\n} => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [oldestEventTimestamp, setOldestEventTimestamp] = useState<number | undefined>(undefined);\r\n    const [canPageBackward, setCanPageBackward] = useState(false);\r\n\r\n    const loadTimelineHistory = useCallback(async () => {\r\n        const endOfHistoryPeriodTimestamp = Date.now() - ONE_DAY_MS * historyPeriodDays;\r\n        setIsLoading(true);\r\n        try {\r\n            const liveTimeline = timelineSet?.getLiveTimeline();\r\n            const canPageBackward = !!liveTimeline?.getPaginationToken(Direction.Backward);\r\n            const oldestEventTimestamp = getOldestEventTimestamp(timelineSet);\r\n\r\n            await fetchHistoryUntilTimestamp(\r\n                timelineSet,\r\n                matrixClient,\r\n                endOfHistoryPeriodTimestamp,\r\n                canPageBackward,\r\n                oldestEventTimestamp,\r\n            );\r\n\r\n            setCanPageBackward(!!timelineSet?.getLiveTimeline()?.getPaginationToken(EventTimeline.BACKWARDS));\r\n            setOldestEventTimestamp(getOldestEventTimestamp(timelineSet));\r\n        } catch (error) {\r\n            logger.error(\"Failed to fetch room polls history\", error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [historyPeriodDays, timelineSet, matrixClient]);\r\n\r\n    const loadMorePolls = useCallback(async () => {\r\n        if (!timelineSet) {\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n        try {\r\n            const result = await pagePollHistory(timelineSet, matrixClient);\r\n\r\n            setCanPageBackward(result.canPageBackward);\r\n            setOldestEventTimestamp(result.oldestEventTimestamp);\r\n        } catch (error) {\r\n            logger.error(\"Failed to fetch room polls history\", error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [timelineSet, matrixClient]);\r\n\r\n    return {\r\n        isLoading,\r\n        oldestEventTimestamp,\r\n        loadTimelineHistory,\r\n        loadMorePolls: canPageBackward ? loadMorePolls : undefined,\r\n    };\r\n};\r\n\r\nconst filterDefinition: IFilterDefinition = {\r\n    room: {\r\n        timeline: {\r\n            types: [M_POLL_START.name, M_POLL_START.altName],\r\n        },\r\n    },\r\n};\r\n\r\n/**\r\n * Fetches poll start events in the last N days of room history\r\n * @param room - room to fetch history for\r\n * @param matrixClient - client\r\n * @param historyPeriodDays - number of days of history to fetch, from current day\r\n * @returns isLoading - true while fetching history\r\n * @returns oldestEventTimestamp - timestamp of oldest encountered poll, undefined when no polls found in timeline so far\r\n * @returns loadMorePolls - function to page timeline backwards, undefined when timeline cannot be paged backwards\r\n */\r\nexport const useFetchPastPolls = (\r\n    room: Room,\r\n    matrixClient: MatrixClient,\r\n    historyPeriodDays = 30,\r\n): {\r\n    isLoading: boolean;\r\n    oldestEventTimestamp?: number;\r\n    loadMorePolls?: () => Promise<void>;\r\n} => {\r\n    const [timelineSet, setTimelineSet] = useState<EventTimelineSet | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        const filter = new Filter(matrixClient.getSafeUserId());\r\n        filter.setDefinition(filterDefinition);\r\n        const getFilteredTimelineSet = async (): Promise<void> => {\r\n            const filterId = await matrixClient.getOrCreateFilter(`POLL_HISTORY_FILTER_${room.roomId}}`, filter);\r\n            filter.filterId = filterId;\r\n            const timelineSet = room.getOrCreateFilteredTimelineSet(filter);\r\n            setTimelineSet(timelineSet);\r\n        };\r\n\r\n        getFilteredTimelineSet();\r\n    }, [room, matrixClient]);\r\n\r\n    const { isLoading, oldestEventTimestamp, loadMorePolls, loadTimelineHistory } = useTimelineHistory(\r\n        timelineSet,\r\n        matrixClient,\r\n        historyPeriodDays,\r\n    );\r\n\r\n    useEffect(() => {\r\n        loadTimelineHistory();\r\n    }, [loadTimelineHistory]);\r\n\r\n    return { isLoading, oldestEventTimestamp, loadMorePolls };\r\n};\r\n"],"mappings":"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"}