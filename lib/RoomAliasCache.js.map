{"version":3,"file":"RoomAliasCache.js","names":["aliasToIDMap","Map","storeRoomAliasInCache","alias","id","set","getCachedRoomIDForAlias","get"],"sources":["../src/RoomAliasCache.ts"],"sourcesContent":["/*\r\nCopyright 2019, 2021 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\n/**\r\n * This is meant to be a cache of room alias to room ID so that moving between\r\n * rooms happens smoothly (for example using browser back / forward buttons).\r\n *\r\n * For the moment, it's in memory only and so only applies for the current\r\n * session for simplicity, but could be extended further in the future.\r\n *\r\n * A similar thing could also be achieved via `pushState` with a state object,\r\n * but keeping it separate like this seems easier in case we do want to extend.\r\n */\r\nconst aliasToIDMap = new Map<string, string>();\r\n\r\nexport function storeRoomAliasInCache(alias: string, id: string): void {\r\n    aliasToIDMap.set(alias, id);\r\n}\r\n\r\nexport function getCachedRoomIDForAlias(alias: string): string | undefined {\r\n    return aliasToIDMap.get(alias);\r\n}\r\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,YAAY,GAAG,IAAIC,GAAG,CAAiB,CAAC;AAEvC,SAASC,qBAAqBA,CAACC,KAAa,EAAEC,EAAU,EAAQ;EACnEJ,YAAY,CAACK,GAAG,CAACF,KAAK,EAAEC,EAAE,CAAC;AAC/B;AAEO,SAASE,uBAAuBA,CAACH,KAAa,EAAsB;EACvE,OAAOH,YAAY,CAACO,GAAG,CAACJ,KAAK,CAAC;AAClC"}