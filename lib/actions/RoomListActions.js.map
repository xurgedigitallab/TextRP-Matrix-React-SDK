{"version":3,"file":"RoomListActions.js","names":["_logger","require","_actionCreators","_Modal","_interopRequireDefault","Rooms","_interopRequireWildcard","_languageHandler","_RoomListStore","_models","_models2","_ErrorDialog","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","RoomListActions","tagRoom","matrixClient","room","oldTag","newTag","newIndex","metaData","store","RoomListStore","instance","getTagSorting","SortAlgorithm","Manual","newList","orderedLists","sort","a","b","tags","order","indexBefore","indexAfter","prevOrder","nextOrder","length","asyncAction","promises","roomId","undefined","DefaultTagID","DM","guessAndSetDMRoom","catch","err","logger","error","Modal","createDialog","ErrorDialog","title","_t","description","message","hasChangedSubLists","promiseToDelete","deleteRoomTag","tagName","push","promiseToAdd","setRoomTag","Promise","all","exports"],"sources":["../../src/actions/RoomListActions.ts"],"sourcesContent":["/*\r\nCopyright 2018 New Vector Ltd\r\nCopyright 2020 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { MatrixClient } from \"matrix-js-sdk/src/client\";\r\nimport { Room } from \"matrix-js-sdk/src/models/room\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\n\r\nimport { asyncAction } from \"./actionCreators\";\r\nimport Modal from \"../Modal\";\r\nimport * as Rooms from \"../Rooms\";\r\nimport { _t } from \"../languageHandler\";\r\nimport { AsyncActionPayload } from \"../dispatcher/payloads\";\r\nimport RoomListStore from \"../stores/room-list/RoomListStore\";\r\nimport { SortAlgorithm } from \"../stores/room-list/algorithms/models\";\r\nimport { DefaultTagID, TagID } from \"../stores/room-list/models\";\r\nimport ErrorDialog from \"../components/views/dialogs/ErrorDialog\";\r\n\r\nexport default class RoomListActions {\r\n    /**\r\n     * Creates an action thunk that will do an asynchronous request to\r\n     * tag room.\r\n     *\r\n     * @param {MatrixClient} matrixClient the matrix client to set the\r\n     *                                    account data on.\r\n     * @param {Room} room the room to tag.\r\n     * @param {string} oldTag the tag to remove (unless oldTag ==== newTag)\r\n     * @param {string} newTag the tag with which to tag the room.\r\n     * @param {?number} oldIndex the previous position of the room in the\r\n     *                           list of rooms.\r\n     * @param {?number} newIndex the new position of the room in the list\r\n     *                           of rooms.\r\n     * @returns {AsyncActionPayload} an async action payload\r\n     * @see asyncAction\r\n     */\r\n    public static tagRoom(\r\n        matrixClient: MatrixClient,\r\n        room: Room,\r\n        oldTag: TagID | null,\r\n        newTag: TagID | null,\r\n        newIndex: number,\r\n    ): AsyncActionPayload {\r\n        let metaData: Parameters<MatrixClient[\"setRoomTag\"]>[2] | undefined;\r\n\r\n        // Is the tag ordered manually?\r\n        const store = RoomListStore.instance;\r\n        if (newTag && store.getTagSorting(newTag) === SortAlgorithm.Manual) {\r\n            const newList = [...store.orderedLists[newTag]];\r\n\r\n            newList.sort((a, b) => a.tags[newTag].order - b.tags[newTag].order);\r\n\r\n            const indexBefore = newIndex - 1;\r\n            const indexAfter = newIndex;\r\n\r\n            const prevOrder = indexBefore <= 0 ? 0 : newList[indexBefore].tags[newTag].order;\r\n            const nextOrder = indexAfter >= newList.length ? 1 : newList[indexAfter].tags[newTag].order;\r\n\r\n            metaData = {\r\n                order: (prevOrder + nextOrder) / 2.0,\r\n            };\r\n        }\r\n\r\n        return asyncAction(\r\n            \"RoomListActions.tagRoom\",\r\n            () => {\r\n                const promises: Promise<any>[] = [];\r\n                const roomId = room.roomId;\r\n\r\n                // Evil hack to get DMs behaving\r\n                if (\r\n                    (oldTag === undefined && newTag === DefaultTagID.DM) ||\r\n                    (oldTag === DefaultTagID.DM && newTag === undefined)\r\n                ) {\r\n                    return Rooms.guessAndSetDMRoom(room, newTag === DefaultTagID.DM).catch((err) => {\r\n                        logger.error(\"Failed to set DM tag \" + err);\r\n                        Modal.createDialog(ErrorDialog, {\r\n                            title: _t(\"Failed to set direct message tag\"),\r\n                            description: err && err.message ? err.message : _t(\"Operation failed\"),\r\n                        });\r\n                    });\r\n                }\r\n\r\n                const hasChangedSubLists = oldTag !== newTag;\r\n\r\n                // More evilness: We will still be dealing with moving to favourites/low prio,\r\n                // but we avoid ever doing a request with TAG_DM.\r\n                //\r\n                // if we moved lists, remove the old tag\r\n                if (oldTag && oldTag !== DefaultTagID.DM && hasChangedSubLists) {\r\n                    const promiseToDelete = matrixClient.deleteRoomTag(roomId, oldTag).catch(function (err) {\r\n                        logger.error(\"Failed to remove tag \" + oldTag + \" from room: \" + err);\r\n                        Modal.createDialog(ErrorDialog, {\r\n                            title: _t(\"Failed to remove tag %(tagName)s from room\", { tagName: oldTag }),\r\n                            description: err && err.message ? err.message : _t(\"Operation failed\"),\r\n                        });\r\n                    });\r\n\r\n                    promises.push(promiseToDelete);\r\n                }\r\n\r\n                // if we moved lists or the ordering changed, add the new tag\r\n                if (newTag && newTag !== DefaultTagID.DM && (hasChangedSubLists || metaData)) {\r\n                    const promiseToAdd = matrixClient.setRoomTag(roomId, newTag, metaData).catch(function (err) {\r\n                        logger.error(\"Failed to add tag \" + newTag + \" to room: \" + err);\r\n                        Modal.createDialog(ErrorDialog, {\r\n                            title: _t(\"Failed to add tag %(tagName)s to room\", { tagName: newTag }),\r\n                            description: err && err.message ? err.message : _t(\"Operation failed\"),\r\n                        });\r\n\r\n                        throw err;\r\n                    });\r\n\r\n                    promises.push(promiseToAdd);\r\n                }\r\n\r\n                return Promise.all(promises);\r\n            },\r\n            () => {\r\n                // For an optimistic update\r\n                return {\r\n                    room,\r\n                    oldTag,\r\n                    newTag,\r\n                    metaData,\r\n                };\r\n            },\r\n        );\r\n    }\r\n}\r\n"],"mappings":"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"}