{"version":3,"file":"PlaybackClock.js","names":["_matrixWidgetApi","require","PlaybackClock","constructor","context","_this","_defineProperty2","default","SimpleObservable","force","arguments","length","undefined","now","timeSeconds","lastCheck","observable","update","durationSeconds","clipDuration","placeholderDuration","val","currentTime","clipStart","liveData","populatePlaceholdersFrom","event","durationMs","Number","getContent","isFinite","flagLoadTime","flagStart","stopped","timerId","window","setInterval","checkTime","flagStop","syncTo","contextTime","clipTime","destroy","close","clearInterval","exports"],"sources":["../../src/audio/PlaybackClock.ts"],"sourcesContent":["/*\r\nCopyright 2021 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { SimpleObservable } from \"matrix-widget-api\";\r\nimport { MatrixEvent } from \"matrix-js-sdk/src/models/event\";\r\n\r\nimport { IDestroyable } from \"../utils/IDestroyable\";\r\n\r\n/**\r\n * Tracks accurate human-perceptible time for an audio clip, as informed\r\n * by managed playback. This clock is tightly coupled with the operation\r\n * of the Playback class, making assumptions about how the provided\r\n * AudioContext will be used (suspended/resumed to preserve time, etc).\r\n *\r\n * But why do we need a clock? The AudioContext exposes time information,\r\n * and so does the audio buffer, but not in a way that is useful for humans\r\n * to perceive. The audio buffer time is often lagged behind the context\r\n * time due to internal processing delays of the audio API. Additionally,\r\n * the context's time is tracked from when it was first initialized/started,\r\n * not related to positioning within the clip. However, the context time\r\n * is the most accurate time we can use to determine position within the\r\n * clip if we're fast enough to track the pauses and stops.\r\n *\r\n * As a result, we track every play, pause, stop, and seek event from the\r\n * Playback class (kinda: it calls us, which is close enough to the same\r\n * thing). These events are then tracked on the AudioContext time scale,\r\n * with assumptions that code execution will result in negligible desync\r\n * of the clock, or at least no perceptible difference in time. It's\r\n * extremely important that the calling code, and the clock's own code,\r\n * is extremely fast between the event happening and the clock time being\r\n * tracked - anything more than a dozen milliseconds is likely to stack up\r\n * poorly, leading to clock desync.\r\n *\r\n * Clock desync can be dangerous for the stability of the playback controls:\r\n * if the clock thinks the user is somewhere else in the clip, it could\r\n * inform the playback of the wrong place in time, leading to dead air in\r\n * the output or, if severe enough, a clock that won't stop running while\r\n * the audio is paused/stopped. Other examples include the clip stopping at\r\n * 90% time due to playback ending, the clip playing from the wrong spot\r\n * relative to the time, and negative clock time.\r\n *\r\n * Note that the clip duration is fed to the clock: this is to ensure that\r\n * we have the most accurate time possible to present.\r\n */\r\nexport class PlaybackClock implements IDestroyable {\r\n    private clipStart = 0;\r\n    private stopped = true;\r\n    private lastCheck = 0;\r\n    private observable = new SimpleObservable<number[]>();\r\n    private timerId?: number;\r\n    private clipDuration = 0;\r\n    private placeholderDuration = 0;\r\n\r\n    public constructor(private context: AudioContext) {}\r\n\r\n    public get durationSeconds(): number {\r\n        return this.clipDuration || this.placeholderDuration;\r\n    }\r\n\r\n    public set durationSeconds(val: number) {\r\n        this.clipDuration = val;\r\n        this.observable.update([this.timeSeconds, this.clipDuration]);\r\n    }\r\n\r\n    public get timeSeconds(): number {\r\n        // The modulo is to ensure that we're only looking at the most recent clip\r\n        // time, as the context is long-running and multiple plays might not be\r\n        // informed to us (if the control is looping, for example). By taking the\r\n        // remainder of the division operation, we're assuming that playback is\r\n        // incomplete or stopped, thus giving an accurate position within the active\r\n        // clip segment.\r\n        return (this.context.currentTime - this.clipStart) % this.clipDuration;\r\n    }\r\n\r\n    public get liveData(): SimpleObservable<number[]> {\r\n        return this.observable;\r\n    }\r\n\r\n    private checkTime = (force = false): void => {\r\n        const now = this.timeSeconds; // calculated dynamically\r\n        if (this.lastCheck !== now || force) {\r\n            this.observable.update([now, this.durationSeconds]);\r\n            this.lastCheck = now;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Populates default information about the audio clip from the event body.\r\n     * The placeholders will be overridden once known.\r\n     * @param {MatrixEvent} event The event to use for placeholders.\r\n     */\r\n    public populatePlaceholdersFrom(event: MatrixEvent): void {\r\n        const durationMs = Number(event.getContent()[\"info\"]?.[\"duration\"]);\r\n        if (Number.isFinite(durationMs)) this.placeholderDuration = durationMs / 1000;\r\n    }\r\n\r\n    /**\r\n     * Mark the time in the audio context where the clip starts/has been loaded.\r\n     * This is to ensure the clock isn't skewed into thinking it is ~0.5s into\r\n     * a clip when the duration is set.\r\n     */\r\n    public flagLoadTime(): void {\r\n        this.clipStart = this.context.currentTime;\r\n    }\r\n\r\n    public flagStart(): void {\r\n        if (this.stopped) {\r\n            this.clipStart = this.context.currentTime;\r\n            this.stopped = false;\r\n        }\r\n\r\n        if (!this.timerId) {\r\n            // 100ms interval to make sure the time is as accurate as possible without being overly insane\r\n            this.timerId = window.setInterval(this.checkTime, 100);\r\n        }\r\n    }\r\n\r\n    public flagStop(): void {\r\n        this.stopped = true;\r\n\r\n        // Reset the clock time now so that the update going out will trigger components\r\n        // to check their seek/position information (alongside the clock).\r\n        this.clipStart = this.context.currentTime;\r\n    }\r\n\r\n    public syncTo(contextTime: number, clipTime: number): void {\r\n        this.clipStart = contextTime - clipTime;\r\n        this.stopped = false; // count as a mid-stream pause (if we were stopped)\r\n        this.checkTime(true);\r\n    }\r\n\r\n    public destroy(): void {\r\n        this.observable.close();\r\n        if (this.timerId) clearInterval(this.timerId);\r\n    }\r\n}\r\n"],"mappings":"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"}