{"version":3,"file":"VoiceMessageRecording.js","names":["_ContentMessages","require","_arrays","_Singleflight","_Playback","_VoiceRecording","VoiceMessageRecording","constructor","matrixClient","voiceRecording","_defineProperty2","default","Uint8Array","data","buf","buffer","concat","onDataAvailable","start","lastUpload","hasRecording","Error","stop","audioBuffer","on","event","listener","off","emit","_len","arguments","length","args","Array","_key","isRecording","getPlayback","playback","Singleflight","for","do","Playback","amplitudes","upload","inRoomId","RecordingState","Uploading","url","mxc","file","encrypted","uploadFile","Blob","type","contentType","Uploaded","e","Ended","durationSeconds","contentLength","liveData","isSupported","destroy","slice","exports","createVoiceMessageRecording","VoiceRecording"],"sources":["../../src/audio/VoiceMessageRecording.ts"],"sourcesContent":["/*\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { IEncryptedFile, MatrixClient } from \"matrix-js-sdk/src/matrix\";\r\nimport { SimpleObservable } from \"matrix-widget-api\";\r\n\r\nimport { uploadFile } from \"../ContentMessages\";\r\nimport { concat } from \"../utils/arrays\";\r\nimport { IDestroyable } from \"../utils/IDestroyable\";\r\nimport { Singleflight } from \"../utils/Singleflight\";\r\nimport { Playback } from \"./Playback\";\r\nimport { IRecordingUpdate, RecordingState, VoiceRecording } from \"./VoiceRecording\";\r\n\r\nexport interface IUpload {\r\n    mxc?: string; // for unencrypted uploads\r\n    encrypted?: IEncryptedFile;\r\n}\r\n\r\n/**\r\n * This class can be used to record a single voice message.\r\n */\r\nexport class VoiceMessageRecording implements IDestroyable {\r\n    private lastUpload?: IUpload;\r\n    private buffer = new Uint8Array(0); // use this.audioBuffer to access\r\n    private playback?: Playback;\r\n\r\n    public constructor(private matrixClient: MatrixClient, private voiceRecording: VoiceRecording) {\r\n        this.voiceRecording.onDataAvailable = this.onDataAvailable;\r\n    }\r\n\r\n    public async start(): Promise<void> {\r\n        if (this.lastUpload || this.hasRecording) {\r\n            throw new Error(\"Recording already prepared\");\r\n        }\r\n\r\n        return this.voiceRecording.start();\r\n    }\r\n\r\n    public async stop(): Promise<Uint8Array> {\r\n        await this.voiceRecording.stop();\r\n        return this.audioBuffer;\r\n    }\r\n\r\n    public on(event: string | symbol, listener: (...args: any[]) => void): this {\r\n        this.voiceRecording.on(event, listener);\r\n        return this;\r\n    }\r\n\r\n    public off(event: string | symbol, listener: (...args: any[]) => void): this {\r\n        this.voiceRecording.off(event, listener);\r\n        return this;\r\n    }\r\n\r\n    public emit(event: string, ...args: any[]): boolean {\r\n        return this.voiceRecording.emit(event, ...args);\r\n    }\r\n\r\n    public get hasRecording(): boolean {\r\n        return this.buffer.length > 0;\r\n    }\r\n\r\n    public get isRecording(): boolean {\r\n        return this.voiceRecording.isRecording;\r\n    }\r\n\r\n    /**\r\n     * Gets a playback instance for this voice recording. Note that the playback will not\r\n     * have been prepared fully, meaning the `prepare()` function needs to be called on it.\r\n     *\r\n     * The same playback instance is returned each time.\r\n     *\r\n     * @returns {Playback} The playback instance.\r\n     */\r\n    public getPlayback(): Playback {\r\n        this.playback = Singleflight.for(this, \"playback\").do(() => {\r\n            return new Playback(this.audioBuffer.buffer, this.voiceRecording.amplitudes); // cast to ArrayBuffer proper;\r\n        });\r\n        return this.playback;\r\n    }\r\n\r\n    public async upload(inRoomId: string): Promise<IUpload> {\r\n        if (!this.hasRecording) {\r\n            throw new Error(\"No recording available to upload\");\r\n        }\r\n\r\n        if (this.lastUpload) return this.lastUpload;\r\n\r\n        try {\r\n            this.emit(RecordingState.Uploading);\r\n            const { url: mxc, file: encrypted } = await uploadFile(\r\n                this.matrixClient,\r\n                inRoomId,\r\n                new Blob([this.audioBuffer], {\r\n                    type: this.contentType,\r\n                }),\r\n            );\r\n            this.lastUpload = { mxc, encrypted };\r\n            this.emit(RecordingState.Uploaded);\r\n        } catch (e) {\r\n            this.emit(RecordingState.Ended);\r\n            throw e;\r\n        }\r\n        return this.lastUpload;\r\n    }\r\n\r\n    public get durationSeconds(): number {\r\n        return this.voiceRecording.durationSeconds;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.voiceRecording.contentType;\r\n    }\r\n\r\n    public get contentLength(): number {\r\n        return this.buffer.length;\r\n    }\r\n\r\n    public get liveData(): SimpleObservable<IRecordingUpdate> {\r\n        return this.voiceRecording.liveData;\r\n    }\r\n\r\n    public get isSupported(): boolean {\r\n        return this.voiceRecording.isSupported;\r\n    }\r\n\r\n    public destroy(): void {\r\n        this.playback?.destroy();\r\n        this.voiceRecording.destroy();\r\n    }\r\n\r\n    private onDataAvailable = (data: ArrayBuffer): void => {\r\n        const buf = new Uint8Array(data);\r\n        this.buffer = concat(this.buffer, buf);\r\n    };\r\n\r\n    private get audioBuffer(): Uint8Array {\r\n        // We need a clone of the buffer to avoid accidentally changing the position\r\n        // on the real thing.\r\n        return this.buffer.slice(0);\r\n    }\r\n}\r\n\r\nexport const createVoiceMessageRecording = (matrixClient: MatrixClient): VoiceMessageRecording => {\r\n    return new VoiceMessageRecording(matrixClient, new VoiceRecording());\r\n};\r\n"],"mappings":"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"}