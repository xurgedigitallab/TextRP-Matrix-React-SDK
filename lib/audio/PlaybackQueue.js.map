{"version":3,"file":"PlaybackQueue.js","names":["_event","require","_logger","_Playback","_AsyncStore","_MatrixClientPeg","_arrays","_PlaybackManager","_EventUtils","_SDKContext","PlaybackQueue","constructor","room","_defineProperty2","default","Map","Set","loadClocks","SdkContextClass","instance","roomViewStore","addRoomListener","roomId","isActive","currentPlaybackId","recentFullPlays","playbackIdOrder","forRoom","cli","MatrixClientPeg","get","getRoom","Error","queues","has","queue","set","persistClocks","localStorage","setItem","JSON","stringify","Array","from","clockStates","entries","val","getItem","parse","unsortedEnqueue","mxEvent","playback","playbacks","getId","on","UPDATE_EVENT","state","onPlaybackStateChange","clockInfo","liveData","onUpdate","clock","onPlaybackClock","newState","wasLastPlaying","PlaybackState","Stopped","skipTo","delete","add","orderClone","arrayFastClone","last","pop","next","logger","warn","PlaybackManager","pauseAllExcept","play","timeline","getLiveTimeline","getEvents","scanForVoiceMessage","nextEv","event","isVoiceMessage","evType","getType","EventType","RoomMessage","Sticker","havePlayback","isRecentlyCompleted","Playing","order","length","lastInstance","Paused","includes","currentState","push","clocks","Decoding","exports"],"sources":["../../src/audio/PlaybackQueue.ts"],"sourcesContent":["/*\r\nCopyright 2021 - 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { MatrixEvent } from \"matrix-js-sdk/src/models/event\";\r\nimport { Room } from \"matrix-js-sdk/src/models/room\";\r\nimport { EventType } from \"matrix-js-sdk/src/@types/event\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\n\r\nimport { Playback, PlaybackState } from \"./Playback\";\r\nimport { UPDATE_EVENT } from \"../stores/AsyncStore\";\r\nimport { MatrixClientPeg } from \"../MatrixClientPeg\";\r\nimport { arrayFastClone } from \"../utils/arrays\";\r\nimport { PlaybackManager } from \"./PlaybackManager\";\r\nimport { isVoiceMessage } from \"../utils/EventUtils\";\r\nimport { SdkContextClass } from \"../contexts/SDKContext\";\r\n\r\n/**\r\n * Audio playback queue management for a given room. This keeps track of where the user\r\n * was at for each playback, what order the playbacks were played in, and triggers subsequent\r\n * playbacks.\r\n *\r\n * Currently this is only intended to be used by voice messages.\r\n *\r\n * The primary mechanics are:\r\n * * Persisted clock state for each playback instance (tied to Event ID).\r\n * * Limited memory of playback order (see code; not persisted).\r\n * * Autoplay of next eligible playback instance.\r\n */\r\nexport class PlaybackQueue {\r\n    private static queues = new Map<string, PlaybackQueue>(); // keyed by room ID\r\n\r\n    private playbacks = new Map<string, Playback>(); // keyed by event ID\r\n    private clockStates = new Map<string, number>(); // keyed by event ID\r\n    private playbackIdOrder: string[] = []; // event IDs, last == current\r\n    private currentPlaybackId: string | null = null; // event ID, broken out from above for ease of use\r\n    private recentFullPlays = new Set<string>(); // event IDs\r\n\r\n    public constructor(private room: Room) {\r\n        this.loadClocks();\r\n\r\n        SdkContextClass.instance.roomViewStore.addRoomListener(this.room.roomId, (isActive) => {\r\n            if (!isActive) return;\r\n\r\n            // Reset the state of the playbacks before they start mounting and enqueuing updates.\r\n            // We reset the entirety of the queue, including order, to ensure the user isn't left\r\n            // confused with what order the messages are playing in.\r\n            this.currentPlaybackId = null; // this in particular stops autoplay when the room is switched to\r\n            this.recentFullPlays = new Set<string>();\r\n            this.playbackIdOrder = [];\r\n        });\r\n    }\r\n\r\n    public static forRoom(roomId: string): PlaybackQueue {\r\n        const cli = MatrixClientPeg.get();\r\n        const room = cli.getRoom(roomId);\r\n        if (!room) throw new Error(\"Unknown room\");\r\n        if (PlaybackQueue.queues.has(room.roomId)) {\r\n            return PlaybackQueue.queues.get(room.roomId)!;\r\n        }\r\n        const queue = new PlaybackQueue(room);\r\n        PlaybackQueue.queues.set(room.roomId, queue);\r\n        return queue;\r\n    }\r\n\r\n    private persistClocks(): void {\r\n        localStorage.setItem(\r\n            `mx_voice_message_clocks_${this.room.roomId}`,\r\n            JSON.stringify(Array.from(this.clockStates.entries())),\r\n        );\r\n    }\r\n\r\n    private loadClocks(): void {\r\n        const val = localStorage.getItem(`mx_voice_message_clocks_${this.room.roomId}`);\r\n        if (!!val) {\r\n            this.clockStates = new Map<string, number>(JSON.parse(val));\r\n        }\r\n    }\r\n\r\n    public unsortedEnqueue(mxEvent: MatrixEvent, playback: Playback): void {\r\n        // We don't ever detach our listeners: we expect the Playback to clean up for us\r\n        this.playbacks.set(mxEvent.getId()!, playback);\r\n        playback.on(UPDATE_EVENT, (state) => this.onPlaybackStateChange(playback, mxEvent, state));\r\n        playback.clockInfo.liveData.onUpdate((clock) => this.onPlaybackClock(playback, mxEvent, clock));\r\n    }\r\n\r\n    private onPlaybackStateChange(playback: Playback, mxEvent: MatrixEvent, newState: PlaybackState): void {\r\n        // Remember where the user got to in playback\r\n        const wasLastPlaying = this.currentPlaybackId === mxEvent.getId();\r\n        if (newState === PlaybackState.Stopped && this.clockStates.has(mxEvent.getId()!) && !wasLastPlaying) {\r\n            // noinspection JSIgnoredPromiseFromCall\r\n            playback.skipTo(this.clockStates.get(mxEvent.getId()!)!);\r\n        } else if (newState === PlaybackState.Stopped) {\r\n            // Remove the now-useless clock for some space savings\r\n            this.clockStates.delete(mxEvent.getId()!);\r\n\r\n            if (wasLastPlaying && this.currentPlaybackId) {\r\n                this.recentFullPlays.add(this.currentPlaybackId);\r\n                const orderClone = arrayFastClone(this.playbackIdOrder);\r\n                const last = orderClone.pop();\r\n                if (last === this.currentPlaybackId) {\r\n                    const next = orderClone.pop();\r\n                    if (next) {\r\n                        const instance = this.playbacks.get(next);\r\n                        if (!instance) {\r\n                            logger.warn(\r\n                                \"Voice message queue desync: Missing playback for next message: \" +\r\n                                    `Current=${this.currentPlaybackId} Last=${last} Next=${next}`,\r\n                            );\r\n                        } else {\r\n                            this.playbackIdOrder = orderClone;\r\n                            PlaybackManager.instance.pauseAllExcept(instance);\r\n\r\n                            // This should cause a Play event, which will re-populate our playback order\r\n                            // and update our current playback ID.\r\n                            // noinspection JSIgnoredPromiseFromCall\r\n                            instance.play();\r\n                        }\r\n                    } else {\r\n                        // else no explicit next event, so find an event we haven't played that comes next. The live\r\n                        // timeline is already most recent last, so we can iterate down that.\r\n                        const timeline = arrayFastClone(this.room.getLiveTimeline().getEvents());\r\n                        let scanForVoiceMessage = false;\r\n                        let nextEv: MatrixEvent | undefined;\r\n                        for (const event of timeline) {\r\n                            if (event.getId() === mxEvent.getId()) {\r\n                                scanForVoiceMessage = true;\r\n                                continue;\r\n                            }\r\n                            if (!scanForVoiceMessage) continue;\r\n\r\n                            if (!isVoiceMessage(event)) {\r\n                                const evType = event.getType();\r\n                                if (evType !== EventType.RoomMessage && evType !== EventType.Sticker) {\r\n                                    continue; // Event can be skipped for automatic playback consideration\r\n                                }\r\n                                break; // Stop automatic playback: next useful event is not a voice message\r\n                            }\r\n\r\n                            const havePlayback = this.playbacks.has(event.getId()!);\r\n                            const isRecentlyCompleted = this.recentFullPlays.has(event.getId()!);\r\n                            if (havePlayback && !isRecentlyCompleted) {\r\n                                nextEv = event;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!nextEv) {\r\n                            // if we don't have anywhere to go, reset the recent playback queue so the user\r\n                            // can start a new chain of playbacks.\r\n                            this.recentFullPlays = new Set<string>();\r\n                            this.playbackIdOrder = [];\r\n                        } else {\r\n                            this.playbackIdOrder = orderClone;\r\n\r\n                            const instance = this.playbacks.get(nextEv.getId()!);\r\n                            PlaybackManager.instance.pauseAllExcept(instance);\r\n\r\n                            // This should cause a Play event, which will re-populate our playback order\r\n                            // and update our current playback ID.\r\n                            // noinspection JSIgnoredPromiseFromCall\r\n                            instance?.play();\r\n                        }\r\n                    }\r\n                } else {\r\n                    logger.warn(\r\n                        \"Voice message queue desync: Expected playback stop to be last in order. \" +\r\n                            `Current=${this.currentPlaybackId} Last=${last} EventID=${mxEvent.getId()}`,\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (newState === PlaybackState.Playing) {\r\n            const order = this.playbackIdOrder;\r\n            if (this.currentPlaybackId !== mxEvent.getId() && !!this.currentPlaybackId) {\r\n                if (order.length === 0 || order[order.length - 1] !== this.currentPlaybackId) {\r\n                    const lastInstance = this.playbacks.get(this.currentPlaybackId);\r\n                    if (\r\n                        lastInstance &&\r\n                        [PlaybackState.Playing, PlaybackState.Paused].includes(lastInstance.currentState)\r\n                    ) {\r\n                        order.push(this.currentPlaybackId);\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.currentPlaybackId = mxEvent.getId()!;\r\n            if (order.length === 0 || order[order.length - 1] !== this.currentPlaybackId) {\r\n                order.push(this.currentPlaybackId);\r\n            }\r\n        }\r\n\r\n        // Only persist clock information on pause/stop (end) to avoid overwhelming the storage.\r\n        // This should get triggered from normal voice message component unmount due to the playback\r\n        // stopping itself for cleanup.\r\n        if (newState === PlaybackState.Paused || newState === PlaybackState.Stopped) {\r\n            this.persistClocks();\r\n        }\r\n    }\r\n\r\n    private onPlaybackClock(playback: Playback, mxEvent: MatrixEvent, clocks: number[]): void {\r\n        if (playback.currentState === PlaybackState.Decoding) return; // ignore pre-ready values\r\n\r\n        if (playback.currentState !== PlaybackState.Stopped) {\r\n            this.clockStates.set(mxEvent.getId()!, clocks[0]); // [0] is the current seek position\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"}