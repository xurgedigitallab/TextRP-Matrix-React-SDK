{"version":3,"file":"AutoRageshakeStore.js","names":["_matrix","require","_utils","_SdkConfig","_interopRequireDefault","_submitRageshake","_dispatcher","_AsyncStoreWithClient","_SettingsStore","_actions","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","RAGESHAKE_INTERVAL","GRACE_PERIOD","AUTO_RS_REQUEST","AutoRageshakeStore","AsyncStoreWithClient","constructor","defaultDispatcher","reportedSessionIds","Set","lastRageshakeTime","initialSyncCompleted","onDecryptionAttempt","bind","onDeviceMessage","onSyncStateChange","instance","internalInstance","onAction","payload","action","Action","ReportKeyBackupNotEnabled","onReportKeyBackupNotEnabled","onReady","SettingsStore","getValue","matrixClient","on","MatrixEventEvent","Decrypted","ClientEvent","ToDeviceEvent","Sync","onNotReady","removeListener","ev","state","wireContent","getWireContent","sessionId","session_id","isDecryptionFailure","has","sleep","newReportedSessionIds","updateState","add","now","Date","getTime","eventInfo","event_id","getId","room_id","getRoomId","device_id","user_id","getSender","sender_key","rageshakeURL","sendBugReport","SdkConfig","get","bug_report_endpoint_url","userText","sendLogs","labels","customApp","uisi_autorageshake_app","customFields","auto_uisi","JSON","stringify","messageContent","recipient_rageshake","sendToDevice","Map","_state","_prevState","data","nextSyncToken","getType","getContent","recipientRageshake","exports","start","window","mxAutoRageshakeStore"],"sources":["../../src/stores/AutoRageshakeStore.ts"],"sourcesContent":["/*\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { ClientEvent, MatrixEvent, MatrixEventEvent } from \"matrix-js-sdk/src/matrix\";\r\nimport { sleep } from \"matrix-js-sdk/src/utils\";\r\nimport { ISyncStateData, SyncState } from \"matrix-js-sdk/src/sync\";\r\n\r\nimport SdkConfig from \"../SdkConfig\";\r\nimport sendBugReport from \"../rageshake/submit-rageshake\";\r\nimport defaultDispatcher from \"../dispatcher/dispatcher\";\r\nimport { AsyncStoreWithClient } from \"./AsyncStoreWithClient\";\r\nimport { ActionPayload } from \"../dispatcher/payloads\";\r\nimport SettingsStore from \"../settings/SettingsStore\";\r\nimport { Action } from \"../dispatcher/actions\";\r\n\r\n// Minimum interval of 1 minute between reports\r\nconst RAGESHAKE_INTERVAL = 60000;\r\n// Before rageshaking, wait 5 seconds and see if the message has successfully decrypted\r\nconst GRACE_PERIOD = 5000;\r\n// Event type for to-device messages requesting sender auto-rageshakes\r\nconst AUTO_RS_REQUEST = \"im.vector.auto_rs_request\";\r\n\r\ninterface IState {\r\n    reportedSessionIds: Set<string>;\r\n    lastRageshakeTime: number;\r\n    initialSyncCompleted: boolean;\r\n}\r\n\r\n/**\r\n * Watches for decryption errors to auto-report if the relevant lab is\r\n * enabled, and keeps track of session IDs that have already been\r\n * reported.\r\n */\r\nexport default class AutoRageshakeStore extends AsyncStoreWithClient<IState> {\r\n    private static readonly internalInstance = (() => {\r\n        const instance = new AutoRageshakeStore();\r\n        instance.start();\r\n        return instance;\r\n    })();\r\n\r\n    private constructor() {\r\n        super(defaultDispatcher, {\r\n            reportedSessionIds: new Set<string>(),\r\n            lastRageshakeTime: 0,\r\n            initialSyncCompleted: false,\r\n        });\r\n        this.onDecryptionAttempt = this.onDecryptionAttempt.bind(this);\r\n        this.onDeviceMessage = this.onDeviceMessage.bind(this);\r\n        this.onSyncStateChange = this.onSyncStateChange.bind(this);\r\n    }\r\n\r\n    public static get instance(): AutoRageshakeStore {\r\n        return AutoRageshakeStore.internalInstance;\r\n    }\r\n\r\n    protected async onAction(payload: ActionPayload): Promise<void> {\r\n        switch (payload.action) {\r\n            case Action.ReportKeyBackupNotEnabled:\r\n                this.onReportKeyBackupNotEnabled();\r\n        }\r\n    }\r\n\r\n    protected async onReady(): Promise<void> {\r\n        if (!SettingsStore.getValue(\"automaticDecryptionErrorReporting\")) return;\r\n\r\n        if (this.matrixClient) {\r\n            this.matrixClient.on(MatrixEventEvent.Decrypted, this.onDecryptionAttempt);\r\n            this.matrixClient.on(ClientEvent.ToDeviceEvent, this.onDeviceMessage);\r\n            this.matrixClient.on(ClientEvent.Sync, this.onSyncStateChange);\r\n        }\r\n    }\r\n\r\n    protected async onNotReady(): Promise<void> {\r\n        if (this.matrixClient) {\r\n            this.matrixClient.removeListener(ClientEvent.ToDeviceEvent, this.onDeviceMessage);\r\n            this.matrixClient.removeListener(MatrixEventEvent.Decrypted, this.onDecryptionAttempt);\r\n            this.matrixClient.removeListener(ClientEvent.Sync, this.onSyncStateChange);\r\n        }\r\n    }\r\n\r\n    private async onDecryptionAttempt(ev: MatrixEvent): Promise<void> {\r\n        if (!this.state.initialSyncCompleted) {\r\n            return;\r\n        }\r\n\r\n        const wireContent = ev.getWireContent();\r\n        const sessionId = wireContent.session_id;\r\n        if (ev.isDecryptionFailure() && !this.state.reportedSessionIds.has(sessionId)) {\r\n            await sleep(GRACE_PERIOD);\r\n            if (!ev.isDecryptionFailure()) {\r\n                return;\r\n            }\r\n\r\n            const newReportedSessionIds = new Set(this.state.reportedSessionIds);\r\n            await this.updateState({ reportedSessionIds: newReportedSessionIds.add(sessionId) });\r\n\r\n            const now = new Date().getTime();\r\n            if (now - this.state.lastRageshakeTime < RAGESHAKE_INTERVAL) {\r\n                return;\r\n            }\r\n\r\n            await this.updateState({ lastRageshakeTime: now });\r\n\r\n            const eventInfo = {\r\n                event_id: ev.getId(),\r\n                room_id: ev.getRoomId(),\r\n                session_id: sessionId,\r\n                device_id: wireContent.device_id,\r\n                user_id: ev.getSender()!,\r\n                sender_key: wireContent.sender_key,\r\n            };\r\n\r\n            const rageshakeURL = await sendBugReport(SdkConfig.get().bug_report_endpoint_url, {\r\n                userText: \"Auto-reporting decryption error (recipient)\",\r\n                sendLogs: true,\r\n                labels: [\"Z-UISI\", \"web\", \"uisi-recipient\"],\r\n                customApp: SdkConfig.get().uisi_autorageshake_app,\r\n                customFields: { auto_uisi: JSON.stringify(eventInfo) },\r\n            });\r\n\r\n            const messageContent = {\r\n                ...eventInfo,\r\n                recipient_rageshake: rageshakeURL,\r\n            };\r\n            this.matrixClient?.sendToDevice(\r\n                AUTO_RS_REQUEST,\r\n                new Map([[\"messageContent.user_id\", new Map([[messageContent.device_id, messageContent]])]]),\r\n            );\r\n        }\r\n    }\r\n\r\n    private async onSyncStateChange(\r\n        _state: SyncState,\r\n        _prevState: SyncState | null,\r\n        data?: ISyncStateData,\r\n    ): Promise<void> {\r\n        if (!this.state.initialSyncCompleted) {\r\n            await this.updateState({ initialSyncCompleted: !!data?.nextSyncToken });\r\n        }\r\n    }\r\n\r\n    private async onDeviceMessage(ev: MatrixEvent): Promise<void> {\r\n        if (ev.getType() !== AUTO_RS_REQUEST) return;\r\n        const messageContent = ev.getContent();\r\n        const recipientRageshake = messageContent[\"recipient_rageshake\"] || \"\";\r\n        const now = new Date().getTime();\r\n        if (now - this.state.lastRageshakeTime > RAGESHAKE_INTERVAL) {\r\n            await this.updateState({ lastRageshakeTime: now });\r\n            await sendBugReport(SdkConfig.get().bug_report_endpoint_url, {\r\n                userText: `Auto-reporting decryption error (sender)\\nRecipient rageshake: ${recipientRageshake}`,\r\n                sendLogs: true,\r\n                labels: [\"Z-UISI\", \"web\", \"uisi-sender\"],\r\n                customApp: SdkConfig.get().uisi_autorageshake_app,\r\n                customFields: {\r\n                    recipient_rageshake: recipientRageshake,\r\n                    auto_uisi: JSON.stringify(messageContent),\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private async onReportKeyBackupNotEnabled(): Promise<void> {\r\n        if (!SettingsStore.getValue(\"automaticKeyBackNotEnabledReporting\")) return;\r\n\r\n        await sendBugReport(SdkConfig.get().bug_report_endpoint_url, {\r\n            userText: `Auto-reporting key backup not enabled`,\r\n            sendLogs: true,\r\n            labels: [\"web\", Action.ReportKeyBackupNotEnabled],\r\n        });\r\n    }\r\n}\r\n\r\nwindow.mxAutoRageshakeStore = AutoRageshakeStore.instance;\r\n"],"mappings":"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"}