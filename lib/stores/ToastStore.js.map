{"version":3,"file":"ToastStore.js","names":["_events","_interopRequireDefault","require","ToastStore","EventEmitter","constructor","arguments","_defineProperty2","default","sharedInstance","window","mxToastStore","reset","toasts","countSeen","addOrReplaceToast","newToast","oldIndex","findIndex","t","key","newIndex","length","priority","splice","emit","dismissToast","filter","getToasts","getCountSeen","exports"],"sources":["../../src/stores/ToastStore.ts"],"sourcesContent":["/*\r\nCopyright 2020 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport EventEmitter from \"events\";\r\nimport React from \"react\";\r\n\r\nimport { ComponentClass } from \"../@types/common\";\r\n\r\nexport interface IToast<C extends ComponentClass> {\r\n    key: string;\r\n    // higher priority number will be shown on top of lower priority\r\n    priority: number;\r\n    title?: string;\r\n    icon?: string;\r\n    component: C;\r\n    className?: string;\r\n    bodyClassName?: string;\r\n    props?: Omit<React.ComponentProps<C>, \"toastKey\">; // toastKey is injected by ToastContainer\r\n}\r\n\r\n/**\r\n * Holds the active toasts\r\n */\r\nexport default class ToastStore extends EventEmitter {\r\n    private toasts: IToast<any>[] = [];\r\n    // The count of toasts which have been seen & dealt with in this stack\r\n    // where the count resets when the stack of toasts clears.\r\n    private countSeen = 0;\r\n\r\n    public static sharedInstance(): ToastStore {\r\n        if (!window.mxToastStore) window.mxToastStore = new ToastStore();\r\n        return window.mxToastStore;\r\n    }\r\n\r\n    public reset(): void {\r\n        this.toasts = [];\r\n        this.countSeen = 0;\r\n    }\r\n\r\n    /**\r\n     * Add or replace a toast\r\n     * If a toast with the same toastKey already exists, the given toast will replace it\r\n     * Toasts are always added underneath any toasts of the same priority, so existing\r\n     * toasts stay at the top unless a higher priority one arrives (better to not change the\r\n     * toast unless necessary).\r\n     *\r\n     * @param {object} newToast The new toast\r\n     */\r\n    public addOrReplaceToast<C extends ComponentClass>(newToast: IToast<C>): void {\r\n        const oldIndex = this.toasts.findIndex((t) => t.key === newToast.key);\r\n        if (oldIndex === -1) {\r\n            let newIndex = this.toasts.length;\r\n            while (newIndex > 0 && this.toasts[newIndex - 1].priority < newToast.priority) --newIndex;\r\n            this.toasts.splice(newIndex, 0, newToast);\r\n        } else {\r\n            this.toasts[oldIndex] = newToast;\r\n        }\r\n        this.emit(\"update\");\r\n    }\r\n\r\n    public dismissToast(key: string): void {\r\n        if (this.toasts[0] && this.toasts[0].key === key) {\r\n            this.countSeen++;\r\n        }\r\n\r\n        const length = this.toasts.length;\r\n        this.toasts = this.toasts.filter((t) => t.key !== key);\r\n        if (length !== this.toasts.length) {\r\n            if (this.toasts.length === 0) {\r\n                this.countSeen = 0;\r\n            }\r\n\r\n            this.emit(\"update\");\r\n        }\r\n    }\r\n\r\n    public getToasts(): IToast<any>[] {\r\n        return this.toasts;\r\n    }\r\n\r\n    public getCountSeen(): number {\r\n        return this.countSeen;\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;AAgBA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAmBA;AACA;AACA;AACe,MAAMC,UAAU,SAASC,eAAY,CAAC;EAAAC,YAAA;IAAA,SAAAC,SAAA;IAAA,IAAAC,gBAAA,CAAAC,OAAA,kBACjB,EAAE;IAClC;IACA;IAAA,IAAAD,gBAAA,CAAAC,OAAA,qBACoB,CAAC;EAAA;EAErB,OAAcC,cAAcA,CAAA,EAAe;IACvC,IAAI,CAACC,MAAM,CAACC,YAAY,EAAED,MAAM,CAACC,YAAY,GAAG,IAAIR,UAAU,CAAC,CAAC;IAChE,OAAOO,MAAM,CAACC,YAAY;EAC9B;EAEOC,KAAKA,CAAA,EAAS;IACjB,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,SAAS,GAAG,CAAC;EACtB;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACWC,iBAAiBA,CAA2BC,QAAmB,EAAQ;IAC1E,MAAMC,QAAQ,GAAG,IAAI,CAACJ,MAAM,CAACK,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKJ,QAAQ,CAACI,GAAG,CAAC;IACrE,IAAIH,QAAQ,KAAK,CAAC,CAAC,EAAE;MACjB,IAAII,QAAQ,GAAG,IAAI,CAACR,MAAM,CAACS,MAAM;MACjC,OAAOD,QAAQ,GAAG,CAAC,IAAI,IAAI,CAACR,MAAM,CAACQ,QAAQ,GAAG,CAAC,CAAC,CAACE,QAAQ,GAAGP,QAAQ,CAACO,QAAQ,EAAE,EAAEF,QAAQ;MACzF,IAAI,CAACR,MAAM,CAACW,MAAM,CAACH,QAAQ,EAAE,CAAC,EAAEL,QAAQ,CAAC;IAC7C,CAAC,MAAM;MACH,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,GAAGD,QAAQ;IACpC;IACA,IAAI,CAACS,IAAI,CAAC,QAAQ,CAAC;EACvB;EAEOC,YAAYA,CAACN,GAAW,EAAQ;IACnC,IAAI,IAAI,CAACP,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,CAACO,GAAG,KAAKA,GAAG,EAAE;MAC9C,IAAI,CAACN,SAAS,EAAE;IACpB;IAEA,MAAMQ,MAAM,GAAG,IAAI,CAACT,MAAM,CAACS,MAAM;IACjC,IAAI,CAACT,MAAM,GAAG,IAAI,CAACA,MAAM,CAACc,MAAM,CAAER,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKA,GAAG,CAAC;IACtD,IAAIE,MAAM,KAAK,IAAI,CAACT,MAAM,CAACS,MAAM,EAAE;MAC/B,IAAI,IAAI,CAACT,MAAM,CAACS,MAAM,KAAK,CAAC,EAAE;QAC1B,IAAI,CAACR,SAAS,GAAG,CAAC;MACtB;MAEA,IAAI,CAACW,IAAI,CAAC,QAAQ,CAAC;IACvB;EACJ;EAEOG,SAASA,CAAA,EAAkB;IAC9B,OAAO,IAAI,CAACf,MAAM;EACtB;EAEOgB,YAAYA,CAAA,EAAW;IAC1B,OAAO,IAAI,CAACf,SAAS;EACzB;AACJ;AAACgB,OAAA,CAAAtB,OAAA,GAAAL,UAAA"}