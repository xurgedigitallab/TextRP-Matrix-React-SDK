{"version":3,"file":"SpaceNotificationState.js","names":["_NotificationColor","require","_arrays","_NotificationState","_models","_RoomListStore","_interopRequireDefault","SpaceNotificationState","NotificationState","constructor","getRoomFn","_defineProperty2","default","calculateTotalState","symbol","_color","NotificationColor","Unsent","setRooms","rooms","oldRooms","diff","arrayDiff","oldRoom","removed","state","states","roomId","off","NotificationStateEvents","Update","onRoomNotificationStateUpdate","newRoom","added","on","getFirstRoomWithNotifications","Object","values","find","color","room","destroy","snapshot","_count","None","entries","r","roomTags","RoomListStore","instance","getTagsForRoom","includes","DefaultTagID","LowPriority","Bold","count","Math","max","emitIfUpdated","exports"],"sources":["../../../src/stores/notifications/SpaceNotificationState.ts"],"sourcesContent":["/*\r\nCopyright 2021 - 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { Room } from \"matrix-js-sdk/src/models/room\";\r\n\r\nimport { NotificationColor } from \"./NotificationColor\";\r\nimport { arrayDiff } from \"../../utils/arrays\";\r\nimport { RoomNotificationState } from \"./RoomNotificationState\";\r\nimport { NotificationState, NotificationStateEvents } from \"./NotificationState\";\r\nimport { FetchRoomFn } from \"./ListNotificationState\";\r\nimport { DefaultTagID } from \"../room-list/models\";\r\nimport RoomListStore from \"../room-list/RoomListStore\";\r\n\r\nexport class SpaceNotificationState extends NotificationState {\r\n    public rooms: Room[] = []; // exposed only for tests\r\n    private states: { [spaceId: string]: RoomNotificationState } = {};\r\n\r\n    public constructor(private getRoomFn: FetchRoomFn) {\r\n        super();\r\n    }\r\n\r\n    public get symbol(): string | null {\r\n        return this._color === NotificationColor.Unsent ? \"!\" : null;\r\n    }\r\n\r\n    public setRooms(rooms: Room[]): void {\r\n        const oldRooms = this.rooms;\r\n        const diff = arrayDiff(oldRooms, rooms);\r\n        this.rooms = rooms;\r\n        for (const oldRoom of diff.removed) {\r\n            const state = this.states[oldRoom.roomId];\r\n            if (!state) continue; // We likely just didn't have a badge (race condition)\r\n            delete this.states[oldRoom.roomId];\r\n            state.off(NotificationStateEvents.Update, this.onRoomNotificationStateUpdate);\r\n        }\r\n        for (const newRoom of diff.added) {\r\n            const state = this.getRoomFn(newRoom);\r\n            state.on(NotificationStateEvents.Update, this.onRoomNotificationStateUpdate);\r\n            this.states[newRoom.roomId] = state;\r\n        }\r\n\r\n        this.calculateTotalState();\r\n    }\r\n\r\n    public getFirstRoomWithNotifications(): string | undefined {\r\n        return Object.values(this.states).find((state) => state.color >= this.color)?.room.roomId;\r\n    }\r\n\r\n    public destroy(): void {\r\n        super.destroy();\r\n        for (const state of Object.values(this.states)) {\r\n            state.off(NotificationStateEvents.Update, this.onRoomNotificationStateUpdate);\r\n        }\r\n        this.states = {};\r\n    }\r\n\r\n    private onRoomNotificationStateUpdate = (): void => {\r\n        this.calculateTotalState();\r\n    };\r\n\r\n    private calculateTotalState(): void {\r\n        const snapshot = this.snapshot();\r\n\r\n        this._count = 0;\r\n        this._color = NotificationColor.None;\r\n        for (const [roomId, state] of Object.entries(this.states)) {\r\n            const room = this.rooms.find((r) => r.roomId === roomId);\r\n            const roomTags = room ? RoomListStore.instance.getTagsForRoom(room) : [];\r\n\r\n            // We ignore unreads in LowPriority rooms, see https://github.com/vector-im/element-web/issues/16836\r\n            if (roomTags.includes(DefaultTagID.LowPriority) && state.color === NotificationColor.Bold) continue;\r\n\r\n            this._count += state.count;\r\n            this._color = Math.max(this.color, state.color);\r\n        }\r\n\r\n        // finally, publish an update if needed\r\n        this.emitIfUpdated(snapshot);\r\n    }\r\n}\r\n"],"mappings":"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"}