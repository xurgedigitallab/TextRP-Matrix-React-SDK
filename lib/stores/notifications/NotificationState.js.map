{"version":3,"file":"NotificationState.js","names":["_typedEventEmitter","require","_NotificationColor","_SettingsStore","_interopRequireDefault","NotificationStateEvents","exports","NotificationState","TypedEventEmitter","constructor","_defineProperty2","default","NotificationColor","None","watcherReferences","push","SettingsStore","watchSetting","emit","Update","symbol","_symbol","count","_count","color","_color","muted","_muted","isIdle","isUnread","Bold","hideBold","getValue","hasUnreadCount","Grey","hasMentions","Red","emitIfUpdated","snapshot","isDifferentFrom","NotificationStateSnapshot","destroy","removeAllListeners","watcherReference","unwatchSetting","state","other","before","after","JSON","stringify"],"sources":["../../../src/stores/notifications/NotificationState.ts"],"sourcesContent":["/*\r\nCopyright 2020 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { TypedEventEmitter } from \"matrix-js-sdk/src/models/typed-event-emitter\";\r\n\r\nimport { NotificationColor } from \"./NotificationColor\";\r\nimport { IDestroyable } from \"../../utils/IDestroyable\";\r\nimport SettingsStore from \"../../settings/SettingsStore\";\r\n\r\nexport interface INotificationStateSnapshotParams {\r\n    symbol: string | null;\r\n    count: number;\r\n    color: NotificationColor;\r\n    muted: boolean;\r\n}\r\n\r\nexport enum NotificationStateEvents {\r\n    Update = \"update\",\r\n}\r\n\r\ntype EventHandlerMap = {\r\n    [NotificationStateEvents.Update]: () => void;\r\n};\r\n\r\nexport abstract class NotificationState\r\n    extends TypedEventEmitter<NotificationStateEvents, EventHandlerMap>\r\n    implements INotificationStateSnapshotParams, IDestroyable\r\n{\r\n    //\r\n    protected _symbol: string | null = null;\r\n    protected _count = 0;\r\n    protected _color: NotificationColor = NotificationColor.None;\r\n    protected _muted = false;\r\n\r\n    private watcherReferences: string[] = [];\r\n\r\n    public constructor() {\r\n        super();\r\n        this.watcherReferences.push(\r\n            SettingsStore.watchSetting(\"feature_hidebold\", null, () => {\r\n                this.emit(NotificationStateEvents.Update);\r\n            }),\r\n        );\r\n    }\r\n\r\n    public get symbol(): string | null {\r\n        return this._symbol;\r\n    }\r\n\r\n    public get count(): number {\r\n        return this._count;\r\n    }\r\n\r\n    public get color(): NotificationColor {\r\n        return this._color;\r\n    }\r\n\r\n    public get muted(): boolean {\r\n        return this._muted;\r\n    }\r\n\r\n    public get isIdle(): boolean {\r\n        return this.color <= NotificationColor.None;\r\n    }\r\n\r\n    public get isUnread(): boolean {\r\n        if (this.color > NotificationColor.Bold) {\r\n            return true;\r\n        } else {\r\n            const hideBold = SettingsStore.getValue(\"feature_hidebold\");\r\n            return this.color === NotificationColor.Bold && !hideBold;\r\n        }\r\n    }\r\n\r\n    public get hasUnreadCount(): boolean {\r\n        return this.color >= NotificationColor.Grey && (!!this.count || !!this.symbol);\r\n    }\r\n\r\n    public get hasMentions(): boolean {\r\n        return this.color >= NotificationColor.Red;\r\n    }\r\n\r\n    protected emitIfUpdated(snapshot: NotificationStateSnapshot): void {\r\n        if (snapshot.isDifferentFrom(this)) {\r\n            this.emit(NotificationStateEvents.Update);\r\n        }\r\n    }\r\n\r\n    protected snapshot(): NotificationStateSnapshot {\r\n        return new NotificationStateSnapshot(this);\r\n    }\r\n\r\n    public destroy(): void {\r\n        this.removeAllListeners(NotificationStateEvents.Update);\r\n        for (const watcherReference of this.watcherReferences) {\r\n            SettingsStore.unwatchSetting(watcherReference);\r\n        }\r\n        this.watcherReferences = [];\r\n    }\r\n}\r\n\r\nexport class NotificationStateSnapshot {\r\n    private readonly symbol: string | null;\r\n    private readonly count: number;\r\n    private readonly color: NotificationColor;\r\n    private readonly muted: boolean;\r\n\r\n    public constructor(state: INotificationStateSnapshotParams) {\r\n        this.symbol = state.symbol;\r\n        this.count = state.count;\r\n        this.color = state.color;\r\n        this.muted = state.muted;\r\n    }\r\n\r\n    public isDifferentFrom(other: INotificationStateSnapshotParams): boolean {\r\n        const before = { count: this.count, symbol: this.symbol, color: this.color, muted: this.muted };\r\n        const after = { count: other.count, symbol: other.symbol, color: other.color, muted: other.muted };\r\n        return JSON.stringify(before) !== JSON.stringify(after);\r\n    }\r\n}\r\n"],"mappings":"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"}