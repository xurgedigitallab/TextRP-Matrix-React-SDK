{"version":3,"file":"ListNotificationState.js","names":["_NotificationColor","require","_arrays","_NotificationState","ListNotificationState","NotificationState","constructor","byTileCount","arguments","length","undefined","getRoomFn","_defineProperty2","default","calculateTotalState","symbol","_color","NotificationColor","Unsent","setRooms","rooms","oldRooms","diff","arrayDiff","oldRoom","removed","state","states","roomId","off","NotificationStateEvents","Update","onRoomNotificationStateUpdate","newRoom","added","on","getForRoom","room","Error","destroy","Object","values","snapshot","Red","_count","None","count","Math","max","color","emitIfUpdated","exports"],"sources":["../../../src/stores/notifications/ListNotificationState.ts"],"sourcesContent":["/*\r\nCopyright 2020 - 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { Room } from \"matrix-js-sdk/src/models/room\";\r\n\r\nimport { NotificationColor } from \"./NotificationColor\";\r\nimport { arrayDiff } from \"../../utils/arrays\";\r\nimport { RoomNotificationState } from \"./RoomNotificationState\";\r\nimport { NotificationState, NotificationStateEvents } from \"./NotificationState\";\r\n\r\nexport type FetchRoomFn = (room: Room) => RoomNotificationState;\r\n\r\nexport class ListNotificationState extends NotificationState {\r\n    private rooms: Room[] = [];\r\n    private states: { [roomId: string]: RoomNotificationState } = {};\r\n\r\n    public constructor(private byTileCount = false, private getRoomFn: FetchRoomFn) {\r\n        super();\r\n    }\r\n\r\n    public get symbol(): string | null {\r\n        return this._color === NotificationColor.Unsent ? \"!\" : null;\r\n    }\r\n\r\n    public setRooms(rooms: Room[]): void {\r\n        // If we're only concerned about the tile count, don't bother setting up listeners.\r\n        if (this.byTileCount) {\r\n            this.rooms = rooms;\r\n            this.calculateTotalState();\r\n            return;\r\n        }\r\n\r\n        const oldRooms = this.rooms;\r\n        const diff = arrayDiff(oldRooms, rooms);\r\n        this.rooms = [...rooms];\r\n        for (const oldRoom of diff.removed) {\r\n            const state = this.states[oldRoom.roomId];\r\n            if (!state) continue; // We likely just didn't have a badge (race condition)\r\n            delete this.states[oldRoom.roomId];\r\n            state.off(NotificationStateEvents.Update, this.onRoomNotificationStateUpdate);\r\n        }\r\n        for (const newRoom of diff.added) {\r\n            const state = this.getRoomFn(newRoom);\r\n            state.on(NotificationStateEvents.Update, this.onRoomNotificationStateUpdate);\r\n            this.states[newRoom.roomId] = state;\r\n        }\r\n\r\n        this.calculateTotalState();\r\n    }\r\n\r\n    public getForRoom(room: Room): RoomNotificationState {\r\n        const state = this.states[room.roomId];\r\n        if (!state) throw new Error(\"Unknown room for notification state\");\r\n        return state;\r\n    }\r\n\r\n    public destroy(): void {\r\n        super.destroy();\r\n        for (const state of Object.values(this.states)) {\r\n            state.off(NotificationStateEvents.Update, this.onRoomNotificationStateUpdate);\r\n        }\r\n        this.states = {};\r\n    }\r\n\r\n    private onRoomNotificationStateUpdate = (): void => {\r\n        this.calculateTotalState();\r\n    };\r\n\r\n    private calculateTotalState(): void {\r\n        const snapshot = this.snapshot();\r\n\r\n        if (this.byTileCount) {\r\n            this._color = NotificationColor.Red;\r\n            this._count = this.rooms.length;\r\n        } else {\r\n            this._count = 0;\r\n            this._color = NotificationColor.None;\r\n            for (const state of Object.values(this.states)) {\r\n                this._count += state.count;\r\n                this._color = Math.max(this.color, state.color);\r\n            }\r\n        }\r\n\r\n        // finally, publish an update if needed\r\n        this.emitIfUpdated(snapshot);\r\n    }\r\n}\r\n"],"mappings":"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"}