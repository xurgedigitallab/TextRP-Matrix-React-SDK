{"version":3,"file":"StopGapWidgetDriver.js","names":["_matrixWidgetApi","require","_client","_event","_logger","_thread","_WidgetLifecycle","_SdkConfig","_interopRequireWildcard","_iterables","_MatrixClientPeg","_Modal","_interopRequireDefault","_WidgetOpenIDPermissionsDialog","_WidgetCapabilitiesPromptDialog","_WidgetPermissions","_WidgetPermissionStore","_WidgetType","_effects","_utils","_dispatcher","_ElementWidgetCapabilities","_navigator","_SDKContext","_ModuleRunner","_SettingsStore","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","getRememberedCapabilitiesForWidget","widget","JSON","parse","localStorage","getItem","id","setRememberedCapabilitiesForWidget","caps","setItem","stringify","normalizeTurnServer","_ref","urls","username","credential","uris","password","StopGapWidgetDriver","WidgetDriver","constructor","allowedCapabilities","forWidget","forWidgetKind","virtual","inRoomId","_defineProperty2","Set","MatrixCapabilities","Screenshots","ElementWidgetCapabilities","RequiresClient","WidgetType","JITSI","matches","type","WidgetKind","Room","add","AlwaysOnScreen","STICKERPICKER","Account","stickerSendingCap","WidgetEventCapability","forRoomEvent","EventDirection","Send","EventType","Sticker","raw","StickerSending","URL","SdkConfig","url","DEFAULTS","element_call","origin","MSC3846TurnServers","Receive","forStateEvent","RoomMember","MatrixClientPeg","getUserId","sendRecvToDevice","CallInvite","CallCandidates","CallAnswer","CallHangup","CallReject","CallSelectAnswer","CallNegotiate","CallSDPStreamMetadataChanged","CallSDPStreamMetadataChangedPrefix","CallReplaces","eventType","forToDeviceEvent","validateCapabilities","requested","diff","iterableDiff","missing","removed","allowedSoFar","forEach","cap","delete","approved","WidgetPermissionCustomisations","preapproveCapabilities","opts","approvedCapabilities","undefined","ModuleRunner","instance","invoke","WidgetLifecycle","CapabilitiesRequest","rememberApproved","size","result","Modal","createDialog","WidgetCapabilitiesPromptDialog","requestedCapabilities","widgetKind","finished","remember","e","logger","error","allAllowed","iterableIntersection","Array","from","sendEvent","content","stateKey","targetRoomId","client","roomId","SdkContextClass","roomViewStore","getRoomId","Error","r","sendStateEvent","RoomRedaction","redactEvent","RoomMessage","CHAT_EFFECTS","effect","containsEmoji","emojis","isNotThread","rel_type","THREAD_RELATION_TYPE","name","dis","dispatch","action","command","eventId","event_id","sendToDevice","encrypted","contentMap","deviceInfoMap","crypto","deviceList","downloadKeys","keys","Promise","all","entries","flatMap","_ref2","userId","userContentMap","map","_ref3","deviceId","devices","encryptAndSendToDevices","values","deviceInfo","queueToDevice","batch","_ref4","_ref5","payload","pickRooms","roomIds","targetRooms","includes","Symbols","AnyRoom","getVisibleRooms","SettingsStore","getValue","getRoom","filter","readRoomEvents","msgtype","limitPerRoom","Math","min","Number","MAX_SAFE_INTEGER","rooms","allResults","room","results","events","getLiveTimeline","getEvents","i","length","ev","getType","isState","getContent","push","getEffectiveEvent","readStateEvents","state","currentState","forKey","slice","askOpenID","observer","IdentityRequest","update","OpenIDRequestState","Allowed","token","getOpenIdToken","oidcState","widgetPermissionStore","getOIDCState","getToken","OIDCState","Denied","Blocked","PendingUserConfirmation","WidgetOpenIDPermissionsDialog","onFinished","confirm","navigate","uri","navigateToPermalink","getTurnServers","pollingTurnServers","setTurnServer","setError","onTurnServers","_ref6","server","onTurnServersError","fatal","on","ClientEvent","TurnServers","TurnServersError","initialTurnServer","resolve","reject","off","readEventRelations","relationType","to","limit","direction","dir","nextBatch","prevBatch","relations","chunk","searchUserDirectory","searchTerm","limited","term","user_id","displayName","display_name","avatarUrl","avatar_url","exports"],"sources":["../../../src/stores/widgets/StopGapWidgetDriver.ts"],"sourcesContent":["/*\r\n * Copyright 2020 - 2023 The Matrix.org Foundation C.I.C.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *         http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {\r\n    Capability,\r\n    EventDirection,\r\n    IOpenIDCredentials,\r\n    IOpenIDUpdate,\r\n    ISendEventDetails,\r\n    ITurnServer,\r\n    IReadEventRelationsResult,\r\n    IRoomEvent,\r\n    MatrixCapabilities,\r\n    OpenIDRequestState,\r\n    SimpleObservable,\r\n    Symbols,\r\n    Widget,\r\n    WidgetDriver,\r\n    WidgetEventCapability,\r\n    WidgetKind,\r\n    ISearchUserDirectoryResult,\r\n} from \"matrix-widget-api\";\r\nimport { ClientEvent, ITurnServer as IClientTurnServer } from \"matrix-js-sdk/src/client\";\r\nimport { EventType } from \"matrix-js-sdk/src/@types/event\";\r\nimport { IContent, MatrixEvent } from \"matrix-js-sdk/src/models/event\";\r\nimport { Room } from \"matrix-js-sdk/src/models/room\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\nimport { THREAD_RELATION_TYPE } from \"matrix-js-sdk/src/models/thread\";\r\nimport { Direction } from \"matrix-js-sdk/src/matrix\";\r\nimport {\r\n    ApprovalOpts,\r\n    CapabilitiesOpts,\r\n    WidgetLifecycle,\r\n} from \"@matrix-org/react-sdk-module-api/lib/lifecycles/WidgetLifecycle\";\r\n\r\nimport SdkConfig, { DEFAULTS } from \"../../SdkConfig\";\r\nimport { iterableDiff, iterableIntersection } from \"../../utils/iterables\";\r\nimport { MatrixClientPeg } from \"../../MatrixClientPeg\";\r\nimport Modal from \"../../Modal\";\r\nimport WidgetOpenIDPermissionsDialog from \"../../components/views/dialogs/WidgetOpenIDPermissionsDialog\";\r\nimport WidgetCapabilitiesPromptDialog from \"../../components/views/dialogs/WidgetCapabilitiesPromptDialog\";\r\nimport { WidgetPermissionCustomisations } from \"../../customisations/WidgetPermissions\";\r\nimport { OIDCState } from \"./WidgetPermissionStore\";\r\nimport { WidgetType } from \"../../widgets/WidgetType\";\r\nimport { CHAT_EFFECTS } from \"../../effects\";\r\nimport { containsEmoji } from \"../../effects/utils\";\r\nimport dis from \"../../dispatcher/dispatcher\";\r\nimport { ElementWidgetCapabilities } from \"./ElementWidgetCapabilities\";\r\nimport { navigateToPermalink } from \"../../utils/permalinks/navigator\";\r\nimport { SdkContextClass } from \"../../contexts/SDKContext\";\r\nimport { ModuleRunner } from \"../../modules/ModuleRunner\";\r\nimport SettingsStore from \"../../settings/SettingsStore\";\r\n\r\n// TODO: Purge this from the universe\r\n\r\nfunction getRememberedCapabilitiesForWidget(widget: Widget): Capability[] {\r\n    return JSON.parse(localStorage.getItem(`widget_${widget.id}_approved_caps`) || \"[]\");\r\n}\r\n\r\nfunction setRememberedCapabilitiesForWidget(widget: Widget, caps: Capability[]): void {\r\n    localStorage.setItem(`widget_${widget.id}_approved_caps`, JSON.stringify(caps));\r\n}\r\n\r\nconst normalizeTurnServer = ({ urls, username, credential }: IClientTurnServer): ITurnServer => ({\r\n    uris: urls,\r\n    username,\r\n    password: credential,\r\n});\r\n\r\nexport class StopGapWidgetDriver extends WidgetDriver {\r\n    private allowedCapabilities: Set<Capability>;\r\n\r\n    // TODO: Refactor widgetKind into the Widget class\r\n    public constructor(\r\n        allowedCapabilities: Capability[],\r\n        private forWidget: Widget,\r\n        private forWidgetKind: WidgetKind,\r\n        virtual: boolean,\r\n        private inRoomId?: string,\r\n    ) {\r\n        super();\r\n\r\n        // Always allow screenshots to be taken because it's a client-induced flow. The widget can't\r\n        // spew screenshots at us and can't request screenshots of us, so it's up to us to provide the\r\n        // button if the widget says it supports screenshots.\r\n        this.allowedCapabilities = new Set([\r\n            ...allowedCapabilities,\r\n            MatrixCapabilities.Screenshots,\r\n            ElementWidgetCapabilities.RequiresClient,\r\n        ]);\r\n\r\n        // Grant the permissions that are specific to given widget types\r\n        if (WidgetType.JITSI.matches(this.forWidget.type) && forWidgetKind === WidgetKind.Room) {\r\n            this.allowedCapabilities.add(MatrixCapabilities.AlwaysOnScreen);\r\n        } else if (WidgetType.STICKERPICKER.matches(this.forWidget.type) && forWidgetKind === WidgetKind.Account) {\r\n            const stickerSendingCap = WidgetEventCapability.forRoomEvent(EventDirection.Send, EventType.Sticker).raw;\r\n            this.allowedCapabilities.add(MatrixCapabilities.StickerSending); // legacy as far as MSC2762 is concerned\r\n            this.allowedCapabilities.add(stickerSendingCap);\r\n\r\n            // Auto-approve the legacy visibility capability. We send it regardless of capability.\r\n            // Widgets don't technically need to request this capability, but Scalar still does.\r\n            this.allowedCapabilities.add(\"visibility\");\r\n        } else if (\r\n            virtual &&\r\n            new URL(SdkConfig.get(\"element_call\").url ?? DEFAULTS.element_call.url!).origin === this.forWidget.origin\r\n        ) {\r\n            // This is a trusted Element Call widget that we control\r\n            this.allowedCapabilities.add(MatrixCapabilities.AlwaysOnScreen);\r\n            this.allowedCapabilities.add(MatrixCapabilities.MSC3846TurnServers);\r\n            this.allowedCapabilities.add(`org.matrix.msc2762.timeline:${inRoomId}`);\r\n\r\n            this.allowedCapabilities.add(\r\n                WidgetEventCapability.forRoomEvent(EventDirection.Send, \"org.matrix.rageshake_request\").raw,\r\n            );\r\n            this.allowedCapabilities.add(\r\n                WidgetEventCapability.forRoomEvent(EventDirection.Receive, \"org.matrix.rageshake_request\").raw,\r\n            );\r\n            this.allowedCapabilities.add(\r\n                WidgetEventCapability.forStateEvent(EventDirection.Receive, EventType.RoomMember).raw,\r\n            );\r\n            this.allowedCapabilities.add(\r\n                WidgetEventCapability.forStateEvent(EventDirection.Receive, \"org.matrix.msc3401.call\").raw,\r\n            );\r\n            this.allowedCapabilities.add(\r\n                WidgetEventCapability.forStateEvent(\r\n                    EventDirection.Send,\r\n                    \"org.matrix.msc3401.call.member\",\r\n                    MatrixClientPeg.get().getUserId()!,\r\n                ).raw,\r\n            );\r\n            this.allowedCapabilities.add(\r\n                WidgetEventCapability.forStateEvent(EventDirection.Receive, \"org.matrix.msc3401.call.member\").raw,\r\n            );\r\n\r\n            const sendRecvToDevice = [\r\n                EventType.CallInvite,\r\n                EventType.CallCandidates,\r\n                EventType.CallAnswer,\r\n                EventType.CallHangup,\r\n                EventType.CallReject,\r\n                EventType.CallSelectAnswer,\r\n                EventType.CallNegotiate,\r\n                EventType.CallSDPStreamMetadataChanged,\r\n                EventType.CallSDPStreamMetadataChangedPrefix,\r\n                EventType.CallReplaces,\r\n            ];\r\n            for (const eventType of sendRecvToDevice) {\r\n                this.allowedCapabilities.add(\r\n                    WidgetEventCapability.forToDeviceEvent(EventDirection.Send, eventType).raw,\r\n                );\r\n                this.allowedCapabilities.add(\r\n                    WidgetEventCapability.forToDeviceEvent(EventDirection.Receive, eventType).raw,\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    public async validateCapabilities(requested: Set<Capability>): Promise<Set<Capability>> {\r\n        // Check to see if any capabilities aren't automatically accepted (such as sticker pickers\r\n        // allowing stickers to be sent). If there are excess capabilities to be approved, the user\r\n        // will be prompted to accept them.\r\n        const diff = iterableDiff(requested, this.allowedCapabilities);\r\n        const missing = new Set(diff.removed); // \"removed\" is \"in A (requested) but not in B (allowed)\"\r\n        const allowedSoFar = new Set(this.allowedCapabilities);\r\n        getRememberedCapabilitiesForWidget(this.forWidget).forEach((cap) => {\r\n            allowedSoFar.add(cap);\r\n            missing.delete(cap);\r\n        });\r\n\r\n        let approved: Set<string> | undefined;\r\n        if (WidgetPermissionCustomisations.preapproveCapabilities) {\r\n            approved = await WidgetPermissionCustomisations.preapproveCapabilities(this.forWidget, requested);\r\n        } else {\r\n            const opts: CapabilitiesOpts = { approvedCapabilities: undefined };\r\n            ModuleRunner.instance.invoke(WidgetLifecycle.CapabilitiesRequest, opts, this.forWidget, requested);\r\n            approved = opts.approvedCapabilities;\r\n        }\r\n        if (approved) {\r\n            approved.forEach((cap) => {\r\n                allowedSoFar.add(cap);\r\n                missing.delete(cap);\r\n            });\r\n        }\r\n\r\n        // TODO: Do something when the widget requests new capabilities not yet asked for\r\n        let rememberApproved = false;\r\n        if (missing.size > 0) {\r\n            try {\r\n                const [result] = await Modal.createDialog(WidgetCapabilitiesPromptDialog, {\r\n                    requestedCapabilities: missing,\r\n                    widget: this.forWidget,\r\n                    widgetKind: this.forWidgetKind,\r\n                }).finished;\r\n                result?.approved?.forEach((cap) => allowedSoFar.add(cap));\r\n                rememberApproved = !!result?.remember;\r\n            } catch (e) {\r\n                logger.error(\"Non-fatal error getting capabilities: \", e);\r\n            }\r\n        }\r\n\r\n        // discard all previously allowed capabilities if they are not requested\r\n        // TODO: this results in an unexpected behavior when this function is called during the capabilities renegotiation of MSC2974 that will be resolved later.\r\n        const allAllowed = new Set(iterableIntersection(allowedSoFar, requested));\r\n\r\n        if (rememberApproved) {\r\n            setRememberedCapabilitiesForWidget(this.forWidget, Array.from(allAllowed));\r\n        }\r\n\r\n        return allAllowed;\r\n    }\r\n\r\n    public async sendEvent(\r\n        eventType: string,\r\n        content: IContent,\r\n        stateKey?: string | null,\r\n        targetRoomId?: string,\r\n    ): Promise<ISendEventDetails> {\r\n        const client = MatrixClientPeg.get();\r\n        const roomId = targetRoomId || SdkContextClass.instance.roomViewStore.getRoomId();\r\n\r\n        if (!client || !roomId) throw new Error(\"Not in a room or not attached to a client\");\r\n\r\n        let r: { event_id: string } | null = null; // eslint-disable-line camelcase\r\n        if (stateKey !== null) {\r\n            // state event\r\n            r = await client.sendStateEvent(roomId, eventType, content, stateKey);\r\n        } else if (eventType === EventType.RoomRedaction) {\r\n            // special case: extract the `redacts` property and call redact\r\n            r = await client.redactEvent(roomId, content[\"redacts\"]);\r\n        } else {\r\n            // message event\r\n            r = await client.sendEvent(roomId, eventType, content);\r\n\r\n            if (eventType === EventType.RoomMessage) {\r\n                CHAT_EFFECTS.forEach((effect) => {\r\n                    if (containsEmoji(content, effect.emojis)) {\r\n                        // For initial threads launch, chat effects are disabled\r\n                        // see #19731\r\n                        const isNotThread = content[\"m.relates_to\"]?.rel_type !== THREAD_RELATION_TYPE.name;\r\n                        if (isNotThread) {\r\n                            dis.dispatch({ action: `effects.${effect.command}` });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return { roomId, eventId: r.event_id };\r\n    }\r\n\r\n    public async sendToDevice(\r\n        eventType: string,\r\n        encrypted: boolean,\r\n        contentMap: { [userId: string]: { [deviceId: string]: object } },\r\n    ): Promise<void> {\r\n        const client = MatrixClientPeg.get();\r\n\r\n        if (encrypted) {\r\n            const deviceInfoMap = await client.crypto!.deviceList.downloadKeys(Object.keys(contentMap), false);\r\n\r\n            await Promise.all(\r\n                Object.entries(contentMap).flatMap(([userId, userContentMap]) =>\r\n                    Object.entries(userContentMap).map(async ([deviceId, content]): Promise<void> => {\r\n                        const devices = deviceInfoMap.get(userId);\r\n                        if (!devices) return;\r\n\r\n                        if (deviceId === \"*\") {\r\n                            // Send the message to all devices we have keys for\r\n                            await client.encryptAndSendToDevices(\r\n                                Array.from(devices.values()).map((deviceInfo) => ({\r\n                                    userId,\r\n                                    deviceInfo,\r\n                                })),\r\n                                content,\r\n                            );\r\n                        } else if (devices.has(deviceId)) {\r\n                            // Send the message to a specific device\r\n                            await client.encryptAndSendToDevices(\r\n                                [{ userId, deviceInfo: devices.get(deviceId)! }],\r\n                                content,\r\n                            );\r\n                        }\r\n                    }),\r\n                ),\r\n            );\r\n        } else {\r\n            await client.queueToDevice({\r\n                eventType,\r\n                batch: Object.entries(contentMap).flatMap(([userId, userContentMap]) =>\r\n                    Object.entries(userContentMap).map(([deviceId, content]) => ({\r\n                        userId,\r\n                        deviceId,\r\n                        payload: content,\r\n                    })),\r\n                ),\r\n            });\r\n        }\r\n    }\r\n\r\n    private pickRooms(roomIds?: (string | Symbols.AnyRoom)[]): Room[] {\r\n        const client = MatrixClientPeg.get();\r\n        if (!client) throw new Error(\"Not attached to a client\");\r\n\r\n        const targetRooms = roomIds\r\n            ? roomIds.includes(Symbols.AnyRoom)\r\n                ? client.getVisibleRooms(SettingsStore.getValue(\"feature_dynamic_room_predecessors\"))\r\n                : roomIds.map((r) => client.getRoom(r))\r\n            : [client.getRoom(SdkContextClass.instance.roomViewStore.getRoomId()!)];\r\n        return targetRooms.filter((r) => !!r) as Room[];\r\n    }\r\n\r\n    public async readRoomEvents(\r\n        eventType: string,\r\n        msgtype: string | undefined,\r\n        limitPerRoom: number,\r\n        roomIds?: (string | Symbols.AnyRoom)[],\r\n    ): Promise<IRoomEvent[]> {\r\n        limitPerRoom = limitPerRoom > 0 ? Math.min(limitPerRoom, Number.MAX_SAFE_INTEGER) : Number.MAX_SAFE_INTEGER; // relatively arbitrary\r\n\r\n        const rooms = this.pickRooms(roomIds);\r\n        const allResults: IRoomEvent[] = [];\r\n        for (const room of rooms) {\r\n            const results: MatrixEvent[] = [];\r\n            const events = room.getLiveTimeline().getEvents(); // timelines are most recent last\r\n            for (let i = events.length - 1; i > 0; i--) {\r\n                if (results.length >= limitPerRoom) break;\r\n\r\n                const ev = events[i];\r\n                if (ev.getType() !== eventType || ev.isState()) continue;\r\n                if (eventType === EventType.RoomMessage && msgtype && msgtype !== ev.getContent()[\"msgtype\"]) continue;\r\n                results.push(ev);\r\n            }\r\n\r\n            results.forEach((e) => allResults.push(e.getEffectiveEvent() as IRoomEvent));\r\n        }\r\n        return allResults;\r\n    }\r\n\r\n    public async readStateEvents(\r\n        eventType: string,\r\n        stateKey: string | undefined,\r\n        limitPerRoom: number,\r\n        roomIds?: (string | Symbols.AnyRoom)[],\r\n    ): Promise<IRoomEvent[]> {\r\n        limitPerRoom = limitPerRoom > 0 ? Math.min(limitPerRoom, Number.MAX_SAFE_INTEGER) : Number.MAX_SAFE_INTEGER; // relatively arbitrary\r\n\r\n        const rooms = this.pickRooms(roomIds);\r\n        const allResults: IRoomEvent[] = [];\r\n        for (const room of rooms) {\r\n            const results: MatrixEvent[] = [];\r\n            const state = room.currentState.events.get(eventType);\r\n            if (state) {\r\n                if (stateKey === \"\" || !!stateKey) {\r\n                    const forKey = state.get(stateKey);\r\n                    if (forKey) results.push(forKey);\r\n                } else {\r\n                    results.push(...Array.from(state.values()));\r\n                }\r\n            }\r\n\r\n            results.slice(0, limitPerRoom).forEach((e) => allResults.push(e.getEffectiveEvent() as IRoomEvent));\r\n        }\r\n        return allResults;\r\n    }\r\n\r\n    public async askOpenID(observer: SimpleObservable<IOpenIDUpdate>): Promise<void> {\r\n        const opts: ApprovalOpts = { approved: undefined };\r\n        ModuleRunner.instance.invoke(WidgetLifecycle.IdentityRequest, opts, this.forWidget);\r\n        if (opts.approved) {\r\n            return observer.update({\r\n                state: OpenIDRequestState.Allowed,\r\n                token: await MatrixClientPeg.get().getOpenIdToken(),\r\n            });\r\n        }\r\n\r\n        const oidcState = SdkContextClass.instance.widgetPermissionStore.getOIDCState(\r\n            this.forWidget,\r\n            this.forWidgetKind,\r\n            this.inRoomId,\r\n        );\r\n\r\n        const getToken = (): Promise<IOpenIDCredentials> => {\r\n            return MatrixClientPeg.get().getOpenIdToken();\r\n        };\r\n\r\n        if (oidcState === OIDCState.Denied) {\r\n            return observer.update({ state: OpenIDRequestState.Blocked });\r\n        }\r\n        if (oidcState === OIDCState.Allowed) {\r\n            return observer.update({ state: OpenIDRequestState.Allowed, token: await getToken() });\r\n        }\r\n\r\n        observer.update({ state: OpenIDRequestState.PendingUserConfirmation });\r\n\r\n        Modal.createDialog(WidgetOpenIDPermissionsDialog, {\r\n            widget: this.forWidget,\r\n            widgetKind: this.forWidgetKind,\r\n            inRoomId: this.inRoomId,\r\n\r\n            onFinished: async (confirm): Promise<void> => {\r\n                if (!confirm) {\r\n                    return observer.update({ state: OpenIDRequestState.Blocked });\r\n                }\r\n\r\n                return observer.update({ state: OpenIDRequestState.Allowed, token: await getToken() });\r\n            },\r\n        });\r\n    }\r\n\r\n    public async navigate(uri: string): Promise<void> {\r\n        navigateToPermalink(uri);\r\n    }\r\n\r\n    public async *getTurnServers(): AsyncGenerator<ITurnServer> {\r\n        const client = MatrixClientPeg.get();\r\n        if (!client.pollingTurnServers || !client.getTurnServers().length) return;\r\n\r\n        let setTurnServer: (server: ITurnServer) => void;\r\n        let setError: (error: Error) => void;\r\n\r\n        const onTurnServers = ([server]: IClientTurnServer[]): void => setTurnServer(normalizeTurnServer(server));\r\n        const onTurnServersError = (error: Error, fatal: boolean): void => {\r\n            if (fatal) setError(error);\r\n        };\r\n\r\n        client.on(ClientEvent.TurnServers, onTurnServers);\r\n        client.on(ClientEvent.TurnServersError, onTurnServersError);\r\n\r\n        try {\r\n            const initialTurnServer = client.getTurnServers()[0];\r\n            yield normalizeTurnServer(initialTurnServer);\r\n\r\n            // Repeatedly listen for new TURN servers until an error occurs or\r\n            // the caller stops this generator\r\n            while (true) {\r\n                yield await new Promise<ITurnServer>((resolve, reject) => {\r\n                    setTurnServer = resolve;\r\n                    setError = reject;\r\n                });\r\n            }\r\n        } finally {\r\n            // The loop was broken - clean up\r\n            client.off(ClientEvent.TurnServers, onTurnServers);\r\n            client.off(ClientEvent.TurnServersError, onTurnServersError);\r\n        }\r\n    }\r\n\r\n    public async readEventRelations(\r\n        eventId: string,\r\n        roomId?: string,\r\n        relationType?: string,\r\n        eventType?: string,\r\n        from?: string,\r\n        to?: string,\r\n        limit?: number,\r\n        direction?: \"f\" | \"b\",\r\n    ): Promise<IReadEventRelationsResult> {\r\n        const client = MatrixClientPeg.get();\r\n        const dir = direction as Direction;\r\n        roomId = roomId ?? SdkContextClass.instance.roomViewStore.getRoomId() ?? undefined;\r\n\r\n        if (typeof roomId !== \"string\") {\r\n            throw new Error(\"Error while reading the current room\");\r\n        }\r\n\r\n        const { events, nextBatch, prevBatch } = await client.relations(\r\n            roomId,\r\n            eventId,\r\n            relationType ?? null,\r\n            eventType ?? null,\r\n            { from, to, limit, dir },\r\n        );\r\n\r\n        return {\r\n            chunk: events.map((e) => e.getEffectiveEvent() as IRoomEvent),\r\n            nextBatch: nextBatch ?? undefined,\r\n            prevBatch: prevBatch ?? undefined,\r\n        };\r\n    }\r\n\r\n    public async searchUserDirectory(searchTerm: string, limit?: number): Promise<ISearchUserDirectoryResult> {\r\n        const client = MatrixClientPeg.get();\r\n\r\n        const { limited, results } = await client.searchUserDirectory({ term: searchTerm, limit });\r\n\r\n        return {\r\n            limited,\r\n            results: results.map((r) => ({\r\n                userId: r.user_id,\r\n                displayName: r.display_name,\r\n                avatarUrl: r.avatar_url,\r\n            })),\r\n        };\r\n    }\r\n}\r\n"],"mappings":"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"}