{"version":3,"file":"StopGapWidget.js","names":["_paymentServices","require","_matrixWidgetApi","_events","_event","_logger","_client","_languageHandler","_StopGapWidgetDriver","_WidgetMessagingStore","_MatrixClientPeg","_OwnProfileStore","_WidgetUtils","_interopRequireDefault","_IntegrationManagers","_SettingsStore","_WidgetType","_ActiveWidgetStore","_objects","_dispatcher","_actions","_ElementWidgetActions","_ModalWidgetStore","_WidgetStore","_ThemeWatcher","_theme","_ElementWidgetCapabilities","_identifiers","_WidgetVariables","_arrays","_Modal","_ErrorDialog","_SDKContext","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","ElementWidget","Widget","constructor","rawDefinition","templateUrl","WidgetType","JITSI","matches","type","WidgetUtils","getLocalJitsiWrapperUrl","forLocalRender","auth","rawData","popoutTemplateUrl","conferenceId","undefined","parsedUrl","URL","searchParams","get","domain","theme","ThemeWatcher","getEffectiveTheme","startsWith","customTheme","getCustomTheme","slice","is_dark","includes","getCompleteUrl","params","asPopout","runTemplate","data","exports","StopGapWidget","EventEmitter","appTileProps","ev","preventDefault","ModalWidgetStore","instance","canOpenModalWidget","openModalWidget","detail","mockWidget","roomId","messaging","transport","reply","error","message","client","decryptEventIfNeeded","isBeingDecrypted","isDecryptionFailure","feedEvent","feedToDevice","getEffectiveEvent","isEncrypted","MatrixClientPeg","app","creatorUserId","objectShallowClone","getUserId","room","kind","userWidget","WidgetKind","Account","Room","virtual","isAppWidget","eventId","eventListenerRoomId","SdkContextClass","roomViewStore","getRoomId","widgetApi","embedUrl","runUrlTemplate","popoutUrl","opts","fromCustomisation","WidgetVariableCustomisations","provideVariables","defaults","widgetRoomId","currentUserId","userDisplayName","OwnProfileStore","displayName","userHttpAvatarUrl","getHttpAvatarUrl","clientId","ELEMENT_CLIENT_ID","clientTheme","SettingsStore","getValue","clientLanguage","getUserLanguage","deviceId","getDeviceId","templated","assign","roomInfo","getRoom","userInfo","userId","myUserId","walletAddress","extractWalletAddress","getMember","name","roomMembers","getJoinedMembers","memebersInfo","member","console","log","parsed","search","replace","JSON","stringify","set","id","window","location","href","split","scalarToken","toString","isManagedByManager","started","startMessaging","iframe","allowedCapabilities","whitelistCapabilities","driver","StopGapWidgetDriver","ClientWidgetApi","on","emit","WidgetMessagingStore","storeMessaging","WidgetApiFromWidgetAction","OpenModalWidget","onOpenModal","ElementWidgetActions","JoinCall","voiceBroadcastRecordingsStore","getCurrent","pause","ViewRoom","targetRoomId","room_id","hasCapability","ElementWidgetCapabilities","CanChangeViewedRoom","defaultDispatcher","dispatch","action","Action","metricsTrigger","getRooms","events","getLiveTimeline","getEvents","roomEvent","readUpToMap","getId","ClientEvent","Event","onEvent","MatrixEventEvent","Decrypted","onEventDecrypted","ToDeviceEvent","onToDeviceEvent","UpdateAlwaysOnScreen","MatrixCapabilities","AlwaysOnScreen","ActiveWidgetStore","setWidgetPersistence","value","SendSticker","StickerSending","widgetId","STICKERPICKER","OpenIntegrationManager","integType","integId","IntegrationManagers","sharedInstance","getPrimaryManager","open","HangupCall","errorMessage","Modal","createDialog","ErrorDialog","title","_t","description","prepare","isReady","Promise","resolve","existingMessaging","getMessaging","isScalarUrl","managers","hasManager","defaultManager","apiUrl","scalar","getScalarClient","getScalarToken","e","logger","stopMessaging","forceDestroy","getWidgetPersistence","off","upToEventId","isBeforeMark","timeline","arrayFastClone","reverse","timelineEvent","evRoomId","evId","getMyMembership","raw","catch"],"sources":["../../../src/stores/widgets/StopGapWidget.ts"],"sourcesContent":["/*\r\n * Copyright 2020 - 2022 The Matrix.org Foundation C.I.C.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *         http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Room } from \"matrix-js-sdk/src/models/room\";\r\nimport { extractWalletAddress } from \"../../paymentServices\";\r\nimport {\r\n    ClientWidgetApi,\r\n    IModalWidgetOpenRequest,\r\n    IRoomEvent,\r\n    IStickerActionRequest,\r\n    IStickyActionRequest,\r\n    ITemplateParams,\r\n    IWidget,\r\n    IWidgetApiErrorResponseData,\r\n    IWidgetApiRequest,\r\n    IWidgetApiRequestEmptyData,\r\n    IWidgetData,\r\n    MatrixCapabilities,\r\n    runTemplate,\r\n    Widget,\r\n    WidgetApiFromWidgetAction,\r\n    WidgetKind,\r\n} from \"matrix-widget-api\";\r\nimport { Optional } from \"matrix-events-sdk\";\r\nimport { EventEmitter } from \"events\";\r\nimport { MatrixClient } from \"matrix-js-sdk/src/client\";\r\nimport { MatrixEvent, MatrixEventEvent } from \"matrix-js-sdk/src/models/event\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\nimport { ClientEvent } from \"matrix-js-sdk/src/client\";\r\n\r\nimport { _t } from \"../../languageHandler\";\r\nimport { StopGapWidgetDriver } from \"./StopGapWidgetDriver\";\r\nimport { WidgetMessagingStore } from \"./WidgetMessagingStore\";\r\nimport { MatrixClientPeg } from \"../../MatrixClientPeg\";\r\nimport { OwnProfileStore } from \"../OwnProfileStore\";\r\nimport WidgetUtils from \"../../utils/WidgetUtils\";\r\nimport { IntegrationManagers } from \"../../integrations/IntegrationManagers\";\r\nimport SettingsStore from \"../../settings/SettingsStore\";\r\nimport { WidgetType } from \"../../widgets/WidgetType\";\r\nimport ActiveWidgetStore from \"../ActiveWidgetStore\";\r\nimport { objectShallowClone } from \"../../utils/objects\";\r\nimport defaultDispatcher from \"../../dispatcher/dispatcher\";\r\nimport { Action } from \"../../dispatcher/actions\";\r\nimport { ElementWidgetActions, IHangupCallApiRequest, IViewRoomApiRequest } from \"./ElementWidgetActions\";\r\nimport { ModalWidgetStore } from \"../ModalWidgetStore\";\r\nimport { IApp, isAppWidget } from \"../WidgetStore\";\r\nimport ThemeWatcher from \"../../settings/watchers/ThemeWatcher\";\r\nimport { getCustomTheme } from \"../../theme\";\r\nimport { ElementWidgetCapabilities } from \"./ElementWidgetCapabilities\";\r\nimport { ELEMENT_CLIENT_ID } from \"../../identifiers\";\r\nimport { getUserLanguage } from \"../../languageHandler\";\r\nimport { WidgetVariableCustomisations } from \"../../customisations/WidgetVariables\";\r\nimport { arrayFastClone } from \"../../utils/arrays\";\r\nimport { ViewRoomPayload } from \"../../dispatcher/payloads/ViewRoomPayload\";\r\nimport Modal from \"../../Modal\";\r\nimport ErrorDialog from \"../../components/views/dialogs/ErrorDialog\";\r\nimport { SdkContextClass } from \"../../contexts/SDKContext\";\r\n\r\n// TODO: Destroy all of this code\r\n\r\ninterface IAppTileProps {\r\n    // Note: these are only the props we care about\r\n    app: IApp | IWidget;\r\n    room?: Room; // without a room it is a user widget\r\n    userId: string;\r\n    creatorUserId: string;\r\n    waitForIframeLoad: boolean;\r\n    whitelistCapabilities?: string[];\r\n    userWidget: boolean;\r\n}\r\n\r\n// TODO: Don't use this because it's wrong\r\nexport class ElementWidget extends Widget {\r\n    public constructor(private rawDefinition: IWidget) {\r\n        super(rawDefinition);\r\n    }\r\n\r\n    public get templateUrl(): string {\r\n        if (WidgetType.JITSI.matches(this.type)) {\r\n            return WidgetUtils.getLocalJitsiWrapperUrl({\r\n                forLocalRender: true,\r\n                auth: super.rawData?.auth as string, // this.rawData can call templateUrl, do this to prevent looping\r\n            });\r\n        }\r\n        return super.templateUrl;\r\n    }\r\n\r\n    public get popoutTemplateUrl(): string {\r\n        if (WidgetType.JITSI.matches(this.type)) {\r\n            return WidgetUtils.getLocalJitsiWrapperUrl({\r\n                forLocalRender: false, // The only important difference between this and templateUrl()\r\n                auth: super.rawData?.auth as string,\r\n            });\r\n        }\r\n        return this.templateUrl; // use this instead of super to ensure we get appropriate templating\r\n    }\r\n\r\n    public get rawData(): IWidgetData {\r\n        let conferenceId = super.rawData[\"conferenceId\"];\r\n        if (conferenceId === undefined) {\r\n            // we'll need to parse the conference ID out of the URL for v1 Jitsi widgets\r\n            const parsedUrl = new URL(super.templateUrl); // use super to get the raw widget URL\r\n            conferenceId = parsedUrl.searchParams.get(\"confId\");\r\n        }\r\n        let domain = super.rawData[\"domain\"];\r\n        if (domain === undefined) {\r\n            // v1 widgets default to meet.element.io regardless of user settings\r\n            domain = \"meet.element.io\";\r\n        }\r\n\r\n        let theme = new ThemeWatcher().getEffectiveTheme();\r\n        if (theme.startsWith(\"custom-\")) {\r\n            const customTheme = getCustomTheme(theme.slice(7));\r\n            // Jitsi only understands light/dark\r\n            theme = customTheme.is_dark ? \"dark\" : \"light\";\r\n        }\r\n\r\n        // only allow light/dark through, defaulting to dark as that was previously the only state\r\n        // accounts for legacy-light/legacy-dark themes too\r\n        if (theme.includes(\"light\")) {\r\n            theme = \"light\";\r\n        } else {\r\n            theme = \"dark\";\r\n        }\r\n\r\n        return {\r\n            ...super.rawData,\r\n            theme,\r\n            conferenceId,\r\n            domain,\r\n        };\r\n    }\r\n\r\n    public getCompleteUrl(params: ITemplateParams, asPopout = false): string {\r\n        return runTemplate(\r\n            asPopout ? this.popoutTemplateUrl : this.templateUrl,\r\n            {\r\n                ...this.rawDefinition,\r\n                data: this.rawData,\r\n            },\r\n            params,\r\n        );\r\n    }\r\n}\r\n\r\nexport class StopGapWidget extends EventEmitter {\r\n    private client: MatrixClient;\r\n    private messaging: ClientWidgetApi | null = null;\r\n    private mockWidget: ElementWidget;\r\n    private scalarToken?: string;\r\n    private roomId?: string;\r\n    private kind: WidgetKind;\r\n    private readonly virtual: boolean;\r\n    private readUpToMap: { [roomId: string]: string } = {}; // room ID to event ID\r\n\r\n    public constructor(private appTileProps: IAppTileProps) {\r\n        super();\r\n        this.client = MatrixClientPeg.get();\r\n\r\n        let app = appTileProps.app;\r\n        // Backwards compatibility: not all old widgets have a creatorUserId\r\n        if (!app.creatorUserId) {\r\n            app = objectShallowClone(app); // clone to prevent accidental mutation\r\n            app.creatorUserId = this.client.getUserId()!;\r\n        }\r\n\r\n        this.mockWidget = new ElementWidget(app);\r\n        this.roomId = appTileProps.room?.roomId;\r\n        this.kind = appTileProps.userWidget ? WidgetKind.Account : WidgetKind.Room; // probably\r\n        this.virtual = isAppWidget(app) && app.eventId === undefined;\r\n    }\r\n\r\n    private get eventListenerRoomId(): Optional<string> {\r\n        // When widgets are listening to events, we need to make sure they're only\r\n        // receiving events for the right room. In particular, room widgets get locked\r\n        // to the room they were added in while account widgets listen to the currently\r\n        // active room.\r\n\r\n        if (this.roomId) return this.roomId;\r\n\r\n        return SdkContextClass.instance.roomViewStore.getRoomId();\r\n    }\r\n\r\n    public get widgetApi(): ClientWidgetApi | null {\r\n        return this.messaging;\r\n    }\r\n\r\n    /**\r\n     * The URL to use in the iframe\r\n     */\r\n    public get embedUrl(): string {\r\n        return this.runUrlTemplate({ asPopout: false });\r\n    }\r\n\r\n    /**\r\n     * The URL to use in the popout\r\n     */\r\n    public get popoutUrl(): string {\r\n        return this.runUrlTemplate({ asPopout: true });\r\n    }\r\n\r\n    private runUrlTemplate(opts = { asPopout: false }): string {\r\n        const fromCustomisation = WidgetVariableCustomisations?.provideVariables?.() ?? {};\r\n        const defaults: ITemplateParams = {\r\n            widgetRoomId: this.roomId,\r\n            currentUserId: this.client.getUserId()!,\r\n            userDisplayName: OwnProfileStore.instance.displayName ?? undefined,\r\n            userHttpAvatarUrl: OwnProfileStore.instance.getHttpAvatarUrl() ?? undefined,\r\n            clientId: ELEMENT_CLIENT_ID,\r\n            clientTheme: SettingsStore.getValue(\"theme\"),\r\n            clientLanguage: getUserLanguage(),\r\n            deviceId: this.client.getDeviceId() ?? undefined,\r\n        };\r\n        const templated = this.mockWidget.getCompleteUrl(Object.assign(defaults, fromCustomisation), opts?.asPopout);\r\n        const client = MatrixClientPeg.get();\r\n        const roomInfo = client.getRoom(this.roomId);\r\n        const userInfo = {\r\n            userId: roomInfo.myUserId,\r\n            walletAddress: extractWalletAddress(roomInfo.myUserId),\r\n            displayName: roomInfo.getMember(roomInfo.myUserId)?.name,\r\n        };\r\n        const roomMembers = roomInfo.getJoinedMembers();\r\n        const memebersInfo = [];\r\n        roomMembers.forEach((member) => {\r\n            if (member.userId !== userInfo.userId) {\r\n                memebersInfo.push({\r\n                    userId: member.userId,\r\n                    walletAddress: extractWalletAddress(member.userId),\r\n                    displayName: member.name,\r\n                });\r\n            }\r\n        });\r\n        console.log(\"userInfo\", userInfo, memebersInfo);\r\n        \r\n        let parsed = new URL(templated);\r\n        if (parsed.search.includes(\"?url=https%3A%2F%2Ftextrpdemo.s3.eu-central-1.amazonaws.com%2Findex.html\")) {\r\n            parsed.search=  parsed.search.replace(\r\n                \"?url=https%3A%2F%2Ftextrpdemo.s3.eu-central-1.amazonaws.com%2Findex.html\",\r\n                `?url=https%3A%2F%2Ftextrpdemo.s3.eu-central-1.amazonaws.com%2Findex.html?userInfo=${JSON.stringify(userInfo)}%26memebersInfo=${JSON.stringify(memebersInfo)}`,\r\n            );\r\n        }\r\n        // Add in some legacy support sprinkles (for non-popout widgets)\r\n        // TODO: Replace these with proper widget params\r\n        // See https://github.com/matrix-org/matrix-doc/pull/1958/files#r405714833\r\n        if (!opts?.asPopout) {\r\n            parsed.searchParams.set(\"widgetId\", this.mockWidget.id);\r\n            parsed.searchParams.set(\"parentUrl\", window.location.href.split(\"#\", 2)[0]);\r\n\r\n            // Give the widget a scalar token if we're supposed to (more legacy)\r\n            // TODO: Stop doing this\r\n            if (this.scalarToken) {\r\n                parsed.searchParams.set(\"scalar_token\", this.scalarToken);\r\n            }\r\n        }\r\n\r\n        // Replace the encoded dollar signs back to dollar signs. They have no special meaning\r\n        // in HTTP, but URL parsers encode them anyways.\r\n        return parsed.toString().replace(/%24/g, \"$\");\r\n    }\r\n\r\n    public get isManagedByManager(): boolean {\r\n        return !!this.scalarToken;\r\n    }\r\n\r\n    public get started(): boolean {\r\n        return !!this.messaging;\r\n    }\r\n\r\n    private onOpenModal = async (ev: CustomEvent<IModalWidgetOpenRequest>): Promise<void> => {\r\n        ev.preventDefault();\r\n        if (ModalWidgetStore.instance.canOpenModalWidget()) {\r\n            ModalWidgetStore.instance.openModalWidget(ev.detail.data, this.mockWidget, this.roomId);\r\n            this.messaging?.transport.reply(ev.detail, {}); // ack\r\n        } else {\r\n            this.messaging?.transport.reply(ev.detail, {\r\n                error: {\r\n                    message: \"Unable to open modal at this time\",\r\n                },\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * This starts the messaging for the widget if it is not in the state `started` yet.\r\n     * @param iframe the iframe the widget should use\r\n     */\r\n    public startMessaging(iframe: HTMLIFrameElement): any {\r\n        if (this.started) return;\r\n\r\n        const allowedCapabilities = this.appTileProps.whitelistCapabilities || [];\r\n        const driver = new StopGapWidgetDriver(\r\n            allowedCapabilities,\r\n            this.mockWidget,\r\n            this.kind,\r\n            this.virtual,\r\n            this.roomId,\r\n        );\r\n\r\n        this.messaging = new ClientWidgetApi(this.mockWidget, iframe, driver);\r\n        this.messaging.on(\"preparing\", () => this.emit(\"preparing\"));\r\n        this.messaging.on(\"ready\", () => {\r\n            WidgetMessagingStore.instance.storeMessaging(this.mockWidget, this.roomId, this.messaging!);\r\n            this.emit(\"ready\");\r\n        });\r\n        this.messaging.on(\"capabilitiesNotified\", () => this.emit(\"capabilitiesNotified\"));\r\n        this.messaging.on(`action:${WidgetApiFromWidgetAction.OpenModalWidget}`, this.onOpenModal);\r\n        this.messaging.on(`action:${ElementWidgetActions.JoinCall}`, () => {\r\n            // pause voice broadcast recording when any widget sends a \"join\"\r\n            SdkContextClass.instance.voiceBroadcastRecordingsStore.getCurrent()?.pause();\r\n        });\r\n\r\n        // Always attach a handler for ViewRoom, but permission check it internally\r\n        this.messaging.on(`action:${ElementWidgetActions.ViewRoom}`, (ev: CustomEvent<IViewRoomApiRequest>) => {\r\n            ev.preventDefault(); // stop the widget API from auto-rejecting this\r\n\r\n            // Check up front if this is even a valid request\r\n            const targetRoomId = (ev.detail.data || {}).room_id;\r\n            if (!targetRoomId) {\r\n                return this.messaging?.transport.reply(ev.detail, <IWidgetApiErrorResponseData>{\r\n                    error: { message: \"Room ID not supplied.\" },\r\n                });\r\n            }\r\n\r\n            // Check the widget's permission\r\n            if (!this.messaging?.hasCapability(ElementWidgetCapabilities.CanChangeViewedRoom)) {\r\n                return this.messaging?.transport.reply(ev.detail, <IWidgetApiErrorResponseData>{\r\n                    error: { message: \"This widget does not have permission for this action (denied).\" },\r\n                });\r\n            }\r\n\r\n            // at this point we can change rooms, so do that\r\n            defaultDispatcher.dispatch<ViewRoomPayload>({\r\n                action: Action.ViewRoom,\r\n                room_id: targetRoomId,\r\n                metricsTrigger: \"Widget\",\r\n            });\r\n\r\n            // acknowledge so the widget doesn't freak out\r\n            this.messaging.transport.reply(ev.detail, <IWidgetApiRequestEmptyData>{});\r\n        });\r\n\r\n        // Populate the map of \"read up to\" events for this widget with the current event in every room.\r\n        // This is a bit inefficient, but should be okay. We do this for all rooms in case the widget\r\n        // requests timeline capabilities in other rooms down the road. It's just easier to manage here.\r\n        for (const room of this.client.getRooms()) {\r\n            // Timelines are most recent last\r\n            const events = room.getLiveTimeline()?.getEvents() || [];\r\n            const roomEvent = events[events.length - 1];\r\n            if (!roomEvent) continue; // force later code to think the room is fresh\r\n            this.readUpToMap[room.roomId] = roomEvent.getId()!;\r\n        }\r\n\r\n        // Attach listeners for feeding events - the underlying widget classes handle permissions for us\r\n        this.client.on(ClientEvent.Event, this.onEvent);\r\n        this.client.on(MatrixEventEvent.Decrypted, this.onEventDecrypted);\r\n        this.client.on(ClientEvent.ToDeviceEvent, this.onToDeviceEvent);\r\n\r\n        this.messaging.on(\r\n            `action:${WidgetApiFromWidgetAction.UpdateAlwaysOnScreen}`,\r\n            (ev: CustomEvent<IStickyActionRequest>) => {\r\n                if (this.messaging?.hasCapability(MatrixCapabilities.AlwaysOnScreen)) {\r\n                    ActiveWidgetStore.instance.setWidgetPersistence(\r\n                        this.mockWidget.id,\r\n                        this.roomId ?? null,\r\n                        ev.detail.data.value,\r\n                    );\r\n                    ev.preventDefault();\r\n                    this.messaging.transport.reply(ev.detail, <IWidgetApiRequestEmptyData>{}); // ack\r\n                }\r\n            },\r\n        );\r\n\r\n        // TODO: Replace this event listener with appropriate driver functionality once the API\r\n        // establishes a sane way to send events back and forth.\r\n        this.messaging.on(\r\n            `action:${WidgetApiFromWidgetAction.SendSticker}`,\r\n            (ev: CustomEvent<IStickerActionRequest>) => {\r\n                if (this.messaging?.hasCapability(MatrixCapabilities.StickerSending)) {\r\n                    // Acknowledge first\r\n                    ev.preventDefault();\r\n                    this.messaging.transport.reply(ev.detail, <IWidgetApiRequestEmptyData>{});\r\n\r\n                    // Send the sticker\r\n                    defaultDispatcher.dispatch({\r\n                        action: \"m.sticker\",\r\n                        data: ev.detail.data,\r\n                        widgetId: this.mockWidget.id,\r\n                    });\r\n                }\r\n            },\r\n        );\r\n\r\n        if (WidgetType.STICKERPICKER.matches(this.mockWidget.type)) {\r\n            this.messaging.on(\r\n                `action:${ElementWidgetActions.OpenIntegrationManager}`,\r\n                (ev: CustomEvent<IWidgetApiRequest>) => {\r\n                    // Acknowledge first\r\n                    ev.preventDefault();\r\n                    this.messaging?.transport.reply(ev.detail, <IWidgetApiRequestEmptyData>{});\r\n\r\n                    // First close the stickerpicker\r\n                    defaultDispatcher.dispatch({ action: \"stickerpicker_close\" });\r\n\r\n                    // Now open the integration manager\r\n                    // TODO: Spec this interaction.\r\n                    const data = ev.detail.data;\r\n                    const integType = data?.integType as string;\r\n                    const integId = <string>data?.integId;\r\n\r\n                    const roomId = SdkContextClass.instance.roomViewStore.getRoomId();\r\n                    const room = roomId ? this.client.getRoom(roomId) : undefined;\r\n                    if (!room) return;\r\n\r\n                    // noinspection JSIgnoredPromiseFromCall\r\n                    IntegrationManagers.sharedInstance()?.getPrimaryManager()?.open(room, `type_${integType}`, integId);\r\n                },\r\n            );\r\n        }\r\n\r\n        if (WidgetType.JITSI.matches(this.mockWidget.type)) {\r\n            this.messaging.on(`action:${ElementWidgetActions.HangupCall}`, (ev: CustomEvent<IHangupCallApiRequest>) => {\r\n                ev.preventDefault();\r\n                if (ev.detail.data?.errorMessage) {\r\n                    Modal.createDialog(ErrorDialog, {\r\n                        title: _t(\"Connection lost\"),\r\n                        description: _t(\"You were disconnected from the call. (Error: %(message)s)\", {\r\n                            message: ev.detail.data.errorMessage,\r\n                        }),\r\n                    });\r\n                }\r\n                this.messaging?.transport.reply(ev.detail, <IWidgetApiRequestEmptyData>{});\r\n            });\r\n        }\r\n    }\r\n\r\n    public async prepare(): Promise<void> {\r\n        // Ensure the variables are ready for us to be rendered before continuing\r\n        await (WidgetVariableCustomisations?.isReady?.() ?? Promise.resolve());\r\n\r\n        if (this.scalarToken) return;\r\n        const existingMessaging = WidgetMessagingStore.instance.getMessaging(this.mockWidget, this.roomId);\r\n        if (existingMessaging) this.messaging = existingMessaging;\r\n        try {\r\n            if (WidgetUtils.isScalarUrl(this.mockWidget.templateUrl)) {\r\n                const managers = IntegrationManagers.sharedInstance();\r\n                if (managers.hasManager()) {\r\n                    // TODO: Pick the right manager for the widget\r\n                    const defaultManager = managers.getPrimaryManager();\r\n                    if (defaultManager && WidgetUtils.isScalarUrl(defaultManager.apiUrl)) {\r\n                        const scalar = defaultManager.getScalarClient();\r\n                        this.scalarToken = await scalar.getScalarToken();\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n            // All errors are non-fatal\r\n            logger.error(\"Error preparing widget communications: \", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops the widget messaging for if it is started. Skips stopping if it is an active\r\n     * widget.\r\n     * @param opts\r\n     */\r\n    public stopMessaging(opts = { forceDestroy: false }): void {\r\n        if (\r\n            !opts?.forceDestroy &&\r\n            ActiveWidgetStore.instance.getWidgetPersistence(this.mockWidget.id, this.roomId ?? null)\r\n        ) {\r\n            logger.log(\"Skipping destroy - persistent widget\");\r\n            return;\r\n        }\r\n        if (!this.started) return;\r\n        WidgetMessagingStore.instance.stopMessaging(this.mockWidget, this.roomId);\r\n        this.messaging = null;\r\n\r\n        this.client.off(ClientEvent.Event, this.onEvent);\r\n        this.client.off(MatrixEventEvent.Decrypted, this.onEventDecrypted);\r\n        this.client.off(ClientEvent.ToDeviceEvent, this.onToDeviceEvent);\r\n    }\r\n\r\n    private onEvent = (ev: MatrixEvent): void => {\r\n        this.client.decryptEventIfNeeded(ev);\r\n        if (ev.isBeingDecrypted() || ev.isDecryptionFailure()) return;\r\n        this.feedEvent(ev);\r\n    };\r\n\r\n    private onEventDecrypted = (ev: MatrixEvent): void => {\r\n        if (ev.isDecryptionFailure()) return;\r\n        this.feedEvent(ev);\r\n    };\r\n\r\n    private onToDeviceEvent = async (ev: MatrixEvent): Promise<void> => {\r\n        await this.client.decryptEventIfNeeded(ev);\r\n        if (ev.isDecryptionFailure()) return;\r\n        await this.messaging?.feedToDevice(ev.getEffectiveEvent() as IRoomEvent, ev.isEncrypted());\r\n    };\r\n\r\n    private feedEvent(ev: MatrixEvent): void {\r\n        if (!this.messaging) return;\r\n\r\n        // Check to see if this event would be before or after our \"read up to\" marker. If it's\r\n        // before, or we can't decide, then we assume the widget will have already seen the event.\r\n        // If the event is after, or we don't have a marker for the room, then we'll send it through.\r\n        //\r\n        // This approach of \"read up to\" prevents widgets receiving decryption spam from startup or\r\n        // receiving out-of-order events from backfill and such.\r\n        const upToEventId = this.readUpToMap[ev.getRoomId()!];\r\n        if (upToEventId) {\r\n            // Small optimization for exact match (prevent search)\r\n            if (upToEventId === ev.getId()) {\r\n                return;\r\n            }\r\n\r\n            let isBeforeMark = true;\r\n\r\n            const room = this.client.getRoom(ev.getRoomId()!);\r\n            if (!room) return;\r\n            // Timelines are most recent last, so reverse the order and limit ourselves to 100 events\r\n            // to avoid overusing the CPU.\r\n            const timeline = room.getLiveTimeline();\r\n            const events = arrayFastClone(timeline.getEvents()).reverse().slice(0, 100);\r\n\r\n            for (const timelineEvent of events) {\r\n                if (timelineEvent.getId() === upToEventId) {\r\n                    break;\r\n                } else if (timelineEvent.getId() === ev.getId()) {\r\n                    isBeforeMark = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (isBeforeMark) {\r\n                // Ignore the event: it is before our interest.\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Skip marker assignment if membership is 'invite', otherwise 'm.room.member' from\r\n        // invitation room will assign it and new state events will be not forwarded to the widget\r\n        // because of empty timeline for invitation room and assigned marker.\r\n        const evRoomId = ev.getRoomId();\r\n        const evId = ev.getId();\r\n        if (evRoomId && evId) {\r\n            const room = this.client.getRoom(evRoomId);\r\n            if (room && room.getMyMembership() === \"join\") {\r\n                this.readUpToMap[evRoomId] = evId;\r\n            }\r\n        }\r\n\r\n        const raw = ev.getEffectiveEvent();\r\n        this.messaging.feedEvent(raw as IRoomEvent, this.eventListenerRoomId!).catch((e) => {\r\n            logger.error(\"Error sending event to widget: \", e);\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"}