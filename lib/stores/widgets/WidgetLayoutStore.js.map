{"version":3,"file":"WidgetLayoutStore.js","names":["_roomState","require","_utils","_SettingsStore","_interopRequireDefault","_WidgetStore","_WidgetType","_numbers","_dispatcher","_ReadyWatchingStore","_SettingLevel","_arrays","_AsyncStore","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","WIDGET_LAYOUT_EVENT_TYPE","exports","Container","MAX_PINNED","MIN_WIDGET_WIDTH_PCT","MIN_WIDGET_HEIGHT_PCT","WidgetLayoutStore","ReadyWatchingStore","constructor","defaultDispatcher","MapWithDefault","Map","msc3946ProcessDynamicPredecessor","SettingsStore","getValue","matrixClient","byRoom","room","getVisibleRooms","recalculateRoom","roomId","getRoom","updateAllRooms","ev","getType","getRoomId","_settingName","_atLevel","_newValAtLevel","_newVal","instance","internalInstance","start","emissionForRoom","emitFor","emit","onReady","on","RoomStateEvent","Events","updateRoomFromState","pinnedRef","watchSetting","updateFromSettings","layoutRef","dynamicRef","WidgetStore","UPDATE_EVENT","updateFromWidgetStore","onNotReady","off","unwatchSetting","widgets","getApps","set","roomContainers","getOrCreate","beforeChanges","JSON","stringify","recursiveMapToObject","layoutEv","currentState","getStateEvents","legacyPinned","userLayout","overrides","getId","roomLayout","getContent","topWidgets","rightWidgets","centerWidgets","widget","stateContainer","id","container","manualContainer","isLegacyPinned","defaultContainer","WidgetType","JITSI","matches","type","Top","Right","Center","console","error","targetContainer","runoff","slice","sort","a","b","layoutA","layoutB","userLayoutA","userLayoutB","defaultA","Number","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","defaultB","orderA","defaultNumber","index","orderB","compare","widths","maxHeight","doAutobalance","widgetLayout","userWidgetLayout","isFinite","width","val","normalized","clamp","height","defRoomHeight","h","Math","max","difference","sum","abs","toReclaim","largeIndices","map","v","p","idx","newRoomContainers","ordered","distributions","afterChanges","getContainerWidgets","get","isInContainer","some","w","canAddToContainer","getResizerDistributions","d","toFixed","setResizerDistributions","numbers","substring","remaining","splice","localLayout","updateUserLayout","getContainerHeight","setContainerHeight","moveWithinContainer","delta","arrayFastClone","currentIdx","findIndex","newIdx","moveToContainer","toContainer","allWidgets","getAllWidgets","_ref","newLayout","hasMaximisedWidget","centerWidget","hasPinnedWidgets","canCopyLayoutToRoom","maySendStateEvent","getUserId","copyLayoutToRoom","evContent","containerWidgets","round","undefined","sendStateEvent","containers","ret","containerValue","setValue","SettingLevel","ROOM_ACCOUNT","catch","window","mxWidgetLayoutStore"],"sources":["../../../src/stores/widgets/WidgetLayoutStore.ts"],"sourcesContent":["/*\r\n * Copyright 2021 - 2022 The Matrix.org Foundation C.I.C.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *         http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Room } from \"matrix-js-sdk/src/models/room\";\r\nimport { MatrixEvent } from \"matrix-js-sdk/src/models/event\";\r\nimport { RoomStateEvent } from \"matrix-js-sdk/src/models/room-state\";\r\nimport { Optional } from \"matrix-events-sdk\";\r\nimport { compare, MapWithDefault, recursiveMapToObject } from \"matrix-js-sdk/src/utils\";\r\nimport { IWidget } from \"matrix-widget-api\";\r\n\r\nimport SettingsStore from \"../../settings/SettingsStore\";\r\nimport WidgetStore, { IApp } from \"../WidgetStore\";\r\nimport { WidgetType } from \"../../widgets/WidgetType\";\r\nimport { clamp, defaultNumber, sum } from \"../../utils/numbers\";\r\nimport defaultDispatcher from \"../../dispatcher/dispatcher\";\r\nimport { ReadyWatchingStore } from \"../ReadyWatchingStore\";\r\nimport { SettingLevel } from \"../../settings/SettingLevel\";\r\nimport { arrayFastClone } from \"../../utils/arrays\";\r\nimport { UPDATE_EVENT } from \"../AsyncStore\";\r\n\r\nexport const WIDGET_LAYOUT_EVENT_TYPE = \"io.element.widgets.layout\";\r\n\r\nexport enum Container {\r\n    // \"Top\" is the app drawer, and currently the only sensible value.\r\n    Top = \"top\",\r\n\r\n    // \"Right\" is the right panel, and the default for widgets. Setting\r\n    // this as a container on a widget is essentially like saying \"no\r\n    // changes needed\", though this may change in the future.\r\n    Right = \"right\",\r\n\r\n    Center = \"center\",\r\n}\r\n\r\nexport interface IStoredLayout {\r\n    // Where to store the widget. Required.\r\n    container: Container;\r\n\r\n    // The index (order) to position the widgets in. Only applies for\r\n    // ordered containers (like the top container). Smaller numbers first,\r\n    // and conflicts resolved by comparing widget IDs.\r\n    index?: number;\r\n\r\n    // Percentage (integer) for relative width of the container to consume.\r\n    // Clamped to 0-100 and may have minimums imposed upon it. Only applies\r\n    // to containers which support inner resizing (currently only the top\r\n    // container).\r\n    width?: number;\r\n\r\n    // Percentage (integer) for relative height of the container. Note that\r\n    // this only applies to the top container currently, and that container\r\n    // will take the highest value among widgets in the container. Clamped\r\n    // to 0-100 and may have minimums imposed on it.\r\n    height?: number | null;\r\n\r\n    // TODO: [Deferred] Maximizing (fullscreen) widgets by default.\r\n}\r\n\r\ninterface IWidgetLayouts {\r\n    [widgetId: string]: IStoredLayout;\r\n}\r\n\r\ninterface ILayoutStateEvent {\r\n    // TODO: [Deferred] Forced layout (fixed with no changes)\r\n\r\n    // The widget layouts.\r\n    widgets: IWidgetLayouts;\r\n}\r\n\r\ninterface ILayoutSettings extends ILayoutStateEvent {\r\n    overrides?: string; // event ID for layout state event, if present\r\n}\r\n\r\n// Dev note: \"Pinned\" widgets are ones in the top container.\r\nexport const MAX_PINNED = 3;\r\n\r\n// These two are whole percentages and don't really mean anything. Later values will decide\r\n// minimum, but these help determine proportions during our calculations here. In fact, these\r\n// values should be *smaller* than the actual minimums imposed by later components.\r\nconst MIN_WIDGET_WIDTH_PCT = 10; // 10%\r\nconst MIN_WIDGET_HEIGHT_PCT = 2; // 2%\r\n\r\ninterface ContainerValue {\r\n    ordered: IApp[];\r\n    height?: number;\r\n    distributions?: number[];\r\n}\r\n\r\nexport class WidgetLayoutStore extends ReadyWatchingStore {\r\n    private static internalInstance: WidgetLayoutStore;\r\n\r\n    // Map: room Id → container → ContainerValue\r\n    private byRoom: MapWithDefault<string, Map<Container, ContainerValue>> = new MapWithDefault(() => new Map());\r\n    private pinnedRef: string | undefined;\r\n    private layoutRef: string | undefined;\r\n    private dynamicRef: string | undefined;\r\n\r\n    private constructor() {\r\n        super(defaultDispatcher);\r\n    }\r\n\r\n    public static get instance(): WidgetLayoutStore {\r\n        if (!this.internalInstance) {\r\n            this.internalInstance = new WidgetLayoutStore();\r\n            this.internalInstance.start();\r\n        }\r\n        return this.internalInstance;\r\n    }\r\n\r\n    public static emissionForRoom(room: Room): string {\r\n        return `update_${room.roomId}`;\r\n    }\r\n\r\n    private emitFor(room: Room): void {\r\n        this.emit(WidgetLayoutStore.emissionForRoom(room));\r\n    }\r\n\r\n    protected async onReady(): Promise<void> {\r\n        this.updateAllRooms();\r\n\r\n        this.matrixClient?.on(RoomStateEvent.Events, this.updateRoomFromState);\r\n        this.pinnedRef = SettingsStore.watchSetting(\"Widgets.pinned\", null, this.updateFromSettings);\r\n        this.layoutRef = SettingsStore.watchSetting(\"Widgets.layout\", null, this.updateFromSettings);\r\n        this.dynamicRef = SettingsStore.watchSetting(\r\n            \"feature_dynamic_room_predecessors\",\r\n            null,\r\n            this.updateFromSettings,\r\n        );\r\n        WidgetStore.instance.on(UPDATE_EVENT, this.updateFromWidgetStore);\r\n    }\r\n\r\n    protected async onNotReady(): Promise<void> {\r\n        this.byRoom = new MapWithDefault(() => new Map());\r\n\r\n        this.matrixClient?.off(RoomStateEvent.Events, this.updateRoomFromState);\r\n        if (this.pinnedRef) SettingsStore.unwatchSetting(this.pinnedRef);\r\n        if (this.layoutRef) SettingsStore.unwatchSetting(this.layoutRef);\r\n        if (this.dynamicRef) SettingsStore.unwatchSetting(this.dynamicRef);\r\n        WidgetStore.instance.off(UPDATE_EVENT, this.updateFromWidgetStore);\r\n    }\r\n\r\n    private updateAllRooms = (): void => {\r\n        const msc3946ProcessDynamicPredecessor = SettingsStore.getValue(\"feature_dynamic_room_predecessors\");\r\n        if (!this.matrixClient) return;\r\n        this.byRoom = new MapWithDefault(() => new Map());\r\n        for (const room of this.matrixClient.getVisibleRooms(msc3946ProcessDynamicPredecessor)) {\r\n            this.recalculateRoom(room);\r\n        }\r\n    };\r\n\r\n    private updateFromWidgetStore = (roomId?: string): void => {\r\n        if (roomId) {\r\n            const room = this.matrixClient?.getRoom(roomId);\r\n            if (room) this.recalculateRoom(room);\r\n        } else {\r\n            this.updateAllRooms();\r\n        }\r\n    };\r\n\r\n    private updateRoomFromState = (ev: MatrixEvent): void => {\r\n        if (ev.getType() !== WIDGET_LAYOUT_EVENT_TYPE) return;\r\n        const room = this.matrixClient?.getRoom(ev.getRoomId());\r\n        if (room) this.recalculateRoom(room);\r\n    };\r\n\r\n    private updateFromSettings = (\r\n        _settingName: string,\r\n        roomId: string | null,\r\n        _atLevel: SettingLevel,\r\n        _newValAtLevel: any,\r\n        _newVal: any,\r\n    ): void => {\r\n        if (roomId) {\r\n            const room = this.matrixClient?.getRoom(roomId);\r\n            if (room) this.recalculateRoom(room);\r\n        } else {\r\n            this.updateAllRooms();\r\n        }\r\n    };\r\n\r\n    public recalculateRoom(room: Room): void {\r\n        const widgets = WidgetStore.instance.getApps(room.roomId);\r\n        if (!widgets?.length) {\r\n            this.byRoom.set(room.roomId, new Map());\r\n            this.emitFor(room);\r\n            return;\r\n        }\r\n\r\n        const roomContainers = this.byRoom.getOrCreate(room.roomId);\r\n        const beforeChanges = JSON.stringify(recursiveMapToObject(roomContainers));\r\n\r\n        const layoutEv = room.currentState.getStateEvents(WIDGET_LAYOUT_EVENT_TYPE, \"\");\r\n        const legacyPinned = SettingsStore.getValue(\"Widgets.pinned\", room.roomId);\r\n        let userLayout = SettingsStore.getValue<ILayoutSettings | null>(\"Widgets.layout\", room.roomId);\r\n\r\n        if (layoutEv && userLayout && userLayout.overrides !== layoutEv.getId()) {\r\n            // For some other layout that we don't really care about. The user can reset this\r\n            // by updating their personal layout.\r\n            userLayout = null;\r\n        }\r\n\r\n        const roomLayout = layoutEv?.getContent<ILayoutStateEvent>() ?? null;\r\n        // We filter for the center container first.\r\n        // (An error is raised, if there are multiple widgets marked for the center container)\r\n        // For the right and top container multiple widgets are allowed.\r\n        const topWidgets: IApp[] = [];\r\n        const rightWidgets: IApp[] = [];\r\n        const centerWidgets: IApp[] = [];\r\n        for (const widget of widgets) {\r\n            const stateContainer = roomLayout?.widgets?.[widget.id]?.container;\r\n            const manualContainer = userLayout?.widgets?.[widget.id]?.container;\r\n            const isLegacyPinned = !!legacyPinned?.[widget.id];\r\n            const defaultContainer = WidgetType.JITSI.matches(widget.type) ? Container.Top : Container.Right;\r\n            if (manualContainer ? manualContainer === Container.Center : stateContainer === Container.Center) {\r\n                if (centerWidgets.length) {\r\n                    console.error(\"Tried to push a second widget into the center container\");\r\n                } else {\r\n                    centerWidgets.push(widget);\r\n                }\r\n                // The widget won't need to be put in any other container.\r\n                continue;\r\n            }\r\n            let targetContainer: Container = defaultContainer;\r\n            if (!!manualContainer || !!stateContainer) {\r\n                targetContainer = manualContainer ?? stateContainer!;\r\n            } else if (isLegacyPinned && !stateContainer) {\r\n                // Special legacy case\r\n                targetContainer = Container.Top;\r\n            }\r\n            (targetContainer === Container.Top ? topWidgets : rightWidgets).push(widget);\r\n        }\r\n\r\n        // Trim to MAX_PINNED\r\n        const runoff = topWidgets.slice(MAX_PINNED);\r\n        rightWidgets.push(...runoff);\r\n\r\n        // Order the widgets in the top container, putting autopinned Jitsi widgets first\r\n        // unless they have a specific order in mind\r\n        topWidgets.sort((a, b) => {\r\n            const layoutA = roomLayout?.widgets?.[a.id];\r\n            const layoutB = roomLayout?.widgets?.[b.id];\r\n\r\n            const userLayoutA = userLayout?.widgets?.[a.id];\r\n            const userLayoutB = userLayout?.widgets?.[b.id];\r\n\r\n            // Jitsi widgets are defaulted to be the leftmost widget whereas other widgets\r\n            // default to the right side.\r\n            const defaultA = WidgetType.JITSI.matches(a.type) ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER;\r\n            const defaultB = WidgetType.JITSI.matches(b.type) ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER;\r\n\r\n            const orderA = defaultNumber(userLayoutA?.index, defaultNumber(layoutA?.index, defaultA));\r\n            const orderB = defaultNumber(userLayoutB?.index, defaultNumber(layoutB?.index, defaultB));\r\n\r\n            if (orderA === orderB) {\r\n                // We just need a tiebreak\r\n                return compare(a.id, b.id);\r\n            }\r\n\r\n            return orderA - orderB;\r\n        });\r\n\r\n        // Determine width distribution and height of the top container now (the only relevant one)\r\n        const widths: number[] = [];\r\n        let maxHeight: number | null = null; // null == default\r\n        let doAutobalance = true;\r\n        for (let i = 0; i < topWidgets.length; i++) {\r\n            const widget = topWidgets[i];\r\n            const widgetLayout = roomLayout?.widgets?.[widget.id];\r\n            const userWidgetLayout = userLayout?.widgets?.[widget.id];\r\n\r\n            if (Number.isFinite(userWidgetLayout?.width) || Number.isFinite(widgetLayout?.width)) {\r\n                const val = (userWidgetLayout?.width || widgetLayout?.width)!;\r\n                const normalized = clamp(val, MIN_WIDGET_WIDTH_PCT, 100);\r\n                widths.push(normalized);\r\n                doAutobalance = false; // a manual width was specified\r\n            } else {\r\n                widths.push(100); // we'll figure this out later\r\n            }\r\n\r\n            if (widgetLayout?.height || userWidgetLayout?.height) {\r\n                const defRoomHeight = defaultNumber(widgetLayout?.height, MIN_WIDGET_HEIGHT_PCT);\r\n                const h = defaultNumber(userWidgetLayout?.height, defRoomHeight);\r\n                maxHeight = Math.max(maxHeight ?? 0, clamp(h, MIN_WIDGET_HEIGHT_PCT, 100));\r\n            }\r\n        }\r\n        if (doAutobalance) {\r\n            for (let i = 0; i < widths.length; i++) {\r\n                widths[i] = 100 / widths.length;\r\n            }\r\n        } else {\r\n            // If we're not autobalancing then it means that we're trying to make\r\n            // sure that widgets make up exactly 100% of space (not over, not under)\r\n            const difference = sum(...widths) - 100; // positive = over, negative = under\r\n            if (difference < 0) {\r\n                // For a deficit we just fill everything in equally\r\n                for (let i = 0; i < widths.length; i++) {\r\n                    widths[i] += Math.abs(difference) / widths.length;\r\n                }\r\n            } else if (difference > 0) {\r\n                // When we're over, we try to scale all the widgets within range first.\r\n                // We clamp values to try and keep ourselves sane and within range.\r\n                for (let i = 0; i < widths.length; i++) {\r\n                    widths[i] = clamp(widths[i] - difference / widths.length, MIN_WIDGET_WIDTH_PCT, 100);\r\n                }\r\n\r\n                // If we're still over, find the widgets which have more width than the minimum\r\n                // and balance them out until we're at 100%. This should keep us as close as possible\r\n                // to the intended distributions.\r\n                //\r\n                // Note: if we ever decide to set a minimum which is larger than 100%/MAX_WIDGETS then\r\n                // we probably have other issues - this code assumes we don't do that.\r\n                const toReclaim = sum(...widths) - 100;\r\n                if (toReclaim > 0) {\r\n                    const largeIndices = widths\r\n                        .map((v, i) => [i, v])\r\n                        .filter((p) => p[1] > MIN_WIDGET_WIDTH_PCT)\r\n                        .map((p) => p[0]);\r\n                    for (const idx of largeIndices) {\r\n                        widths[idx] -= toReclaim / largeIndices.length;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Finally, fill in our cache and update\r\n        const newRoomContainers = new Map();\r\n        this.byRoom.set(room.roomId, newRoomContainers);\r\n        if (topWidgets.length) {\r\n            newRoomContainers.set(Container.Top, {\r\n                ordered: topWidgets,\r\n                distributions: widths,\r\n                height: maxHeight,\r\n            });\r\n        }\r\n        if (rightWidgets.length) {\r\n            newRoomContainers.set(Container.Right, {\r\n                ordered: rightWidgets,\r\n            });\r\n        }\r\n        if (centerWidgets.length) {\r\n            newRoomContainers.set(Container.Center, {\r\n                ordered: centerWidgets,\r\n            });\r\n        }\r\n\r\n        const afterChanges = JSON.stringify(recursiveMapToObject(newRoomContainers));\r\n\r\n        if (afterChanges !== beforeChanges) {\r\n            this.emitFor(room);\r\n        }\r\n    }\r\n\r\n    public getContainerWidgets(room: Optional<Room>, container: Container): IWidget[] {\r\n        return (room && this.byRoom.get(room.roomId)?.get(container)?.ordered) || [];\r\n    }\r\n\r\n    public isInContainer(room: Room, widget: IWidget, container: Container): boolean {\r\n        return this.getContainerWidgets(room, container).some((w) => w.id === widget.id);\r\n    }\r\n\r\n    public canAddToContainer(room: Room, container: Container): boolean {\r\n        switch (container) {\r\n            case Container.Top:\r\n                return this.getContainerWidgets(room, container).length < MAX_PINNED;\r\n            case Container.Right:\r\n                return this.getContainerWidgets(room, container).length < MAX_PINNED;\r\n            case Container.Center:\r\n                return this.getContainerWidgets(room, container).length < 1;\r\n        }\r\n    }\r\n\r\n    public getResizerDistributions(room: Room, container: Container): string[] {\r\n        // yes, string.\r\n        let distributions = this.byRoom.get(room.roomId)?.get(container)?.distributions;\r\n        if (!distributions || distributions.length < 2) return [];\r\n\r\n        // The distributor actually expects to be fed N-1 sizes and expands the middle section\r\n        // instead of the edges. Therefore, we need to return [0] when there's two widgets or\r\n        // [0, 2] when there's three (skipping [1] because it's irrelevant).\r\n\r\n        if (distributions.length === 2) distributions = [distributions[0]];\r\n        if (distributions.length === 3) distributions = [distributions[0], distributions[2]];\r\n        return distributions.map((d) => `${d.toFixed(1)}%`); // actual percents - these are decoded later\r\n    }\r\n\r\n    public setResizerDistributions(room: Room, container: Container, distributions: string[]): void {\r\n        if (container !== Container.Top) return; // ignore - not relevant\r\n\r\n        const numbers = distributions.map((d) => Number(Number(d.substring(0, d.length - 1)).toFixed(1)));\r\n        const widgets = this.getContainerWidgets(room, container);\r\n\r\n        // From getResizerDistributions, we need to fill in the middle size if applicable.\r\n        const remaining = 100 - sum(...numbers);\r\n        if (numbers.length === 2) numbers.splice(1, 0, remaining);\r\n        if (numbers.length === 1) numbers.push(remaining);\r\n\r\n        const localLayout: Record<string, IStoredLayout> = {};\r\n        widgets.forEach((w, i) => {\r\n            localLayout[w.id] = {\r\n                container: container,\r\n                width: numbers[i],\r\n                index: i,\r\n                height: this.byRoom.get(room.roomId)?.get(container)?.height || MIN_WIDGET_HEIGHT_PCT,\r\n            };\r\n        });\r\n        this.updateUserLayout(room, localLayout);\r\n    }\r\n\r\n    public getContainerHeight(room: Room, container: Container): number | null {\r\n        return this.byRoom.get(room.roomId)?.get(container)?.height ?? null; // let the default get returned if needed\r\n    }\r\n\r\n    public setContainerHeight(room: Room, container: Container, height?: number | null): void {\r\n        const widgets = this.getContainerWidgets(room, container);\r\n        const widths = this.byRoom.get(room.roomId)?.get(container)?.distributions;\r\n        const localLayout: Record<string, IStoredLayout> = {};\r\n        widgets.forEach((w, i) => {\r\n            localLayout[w.id] = {\r\n                container: container,\r\n                width: widths?.[i],\r\n                index: i,\r\n                height: height,\r\n            };\r\n        });\r\n        this.updateUserLayout(room, localLayout);\r\n    }\r\n\r\n    public moveWithinContainer(room: Room, container: Container, widget: IWidget, delta: number): void {\r\n        const widgets = arrayFastClone(this.getContainerWidgets(room, container));\r\n        const currentIdx = widgets.findIndex((w) => w.id === widget.id);\r\n        if (currentIdx < 0) return; // no change needed\r\n\r\n        widgets.splice(currentIdx, 1); // remove existing widget\r\n        const newIdx = clamp(currentIdx + delta, 0, widgets.length);\r\n        widgets.splice(newIdx, 0, widget);\r\n\r\n        const widths = this.byRoom.get(room.roomId)?.get(container)?.distributions;\r\n        const height = this.byRoom.get(room.roomId)?.get(container)?.height;\r\n        const localLayout: Record<string, IStoredLayout> = {};\r\n        widgets.forEach((w, i) => {\r\n            localLayout[w.id] = {\r\n                container: container,\r\n                width: widths?.[i],\r\n                index: i,\r\n                height,\r\n            };\r\n        });\r\n        this.updateUserLayout(room, localLayout);\r\n    }\r\n\r\n    public moveToContainer(room: Room, widget: IWidget, toContainer: Container): void {\r\n        const allWidgets = this.getAllWidgets(room);\r\n        if (!allWidgets.some(([w]) => w.id === widget.id)) return; // invalid\r\n        // Prepare other containers (potentially move widgets to obey the following rules)\r\n        const newLayout: Record<string, IStoredLayout> = {};\r\n        switch (toContainer) {\r\n            case Container.Right:\r\n                // new \"right\" widget\r\n                break;\r\n            case Container.Center:\r\n                // new \"center\" widget => all other widgets go into \"right\"\r\n                for (const w of this.getContainerWidgets(room, Container.Top)) {\r\n                    newLayout[w.id] = { container: Container.Right };\r\n                }\r\n                for (const w of this.getContainerWidgets(room, Container.Center)) {\r\n                    newLayout[w.id] = { container: Container.Right };\r\n                }\r\n                break;\r\n            case Container.Top:\r\n                // new \"top\" widget => the center widget moves into \"right\"\r\n                if (this.hasMaximisedWidget(room)) {\r\n                    const centerWidget = this.getContainerWidgets(room, Container.Center)[0];\r\n                    newLayout[centerWidget.id] = { container: Container.Right };\r\n                }\r\n                break;\r\n        }\r\n\r\n        newLayout[widget.id] = { container: toContainer };\r\n\r\n        // move widgets into requested containers.\r\n        this.updateUserLayout(room, newLayout);\r\n    }\r\n\r\n    public hasMaximisedWidget(room: Room): boolean {\r\n        return this.getContainerWidgets(room, Container.Center).length > 0;\r\n    }\r\n\r\n    public hasPinnedWidgets(room: Room): boolean {\r\n        return this.getContainerWidgets(room, Container.Top).length > 0;\r\n    }\r\n\r\n    public canCopyLayoutToRoom(room: Room): boolean {\r\n        if (!this.matrixClient) return false; // not ready yet\r\n        return room.currentState.maySendStateEvent(WIDGET_LAYOUT_EVENT_TYPE, this.matrixClient.getUserId()!);\r\n    }\r\n\r\n    public copyLayoutToRoom(room: Room): void {\r\n        const allWidgets = this.getAllWidgets(room);\r\n        const evContent: ILayoutStateEvent = { widgets: {} };\r\n        for (const [widget, container] of allWidgets) {\r\n            evContent.widgets[widget.id] = { container };\r\n            if (container === Container.Top) {\r\n                const containerWidgets = this.getContainerWidgets(room, container);\r\n                const idx = containerWidgets.findIndex((w) => w.id === widget.id);\r\n                const widths = this.byRoom.get(room.roomId)?.get(container)?.distributions;\r\n                const height = this.byRoom.get(room.roomId)?.get(container)?.height;\r\n                evContent.widgets[widget.id] = {\r\n                    ...evContent.widgets[widget.id],\r\n                    height: height ? Math.round(height) : undefined,\r\n                    width: widths?.[idx] ? Math.round(widths[idx]) : undefined,\r\n                    index: idx,\r\n                };\r\n            }\r\n        }\r\n        this.matrixClient?.sendStateEvent(room.roomId, WIDGET_LAYOUT_EVENT_TYPE, evContent, \"\");\r\n    }\r\n\r\n    private getAllWidgets(room: Room): [IApp, Container][] {\r\n        const containers = this.byRoom.get(room.roomId);\r\n        if (!containers) return [];\r\n\r\n        const ret: [IApp, Container][] = [];\r\n        for (const [container, containerValue] of containers) {\r\n            const widgets = containerValue.ordered;\r\n            for (const widget of widgets) {\r\n                ret.push([widget, container as Container]);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    private updateUserLayout(room: Room, newLayout: IWidgetLayouts): void {\r\n        // Polyfill any missing widgets\r\n        const allWidgets = this.getAllWidgets(room);\r\n        for (const [widget, container] of allWidgets) {\r\n            const containerWidgets = this.getContainerWidgets(room, container);\r\n            const idx = containerWidgets.findIndex((w) => w.id === widget.id);\r\n            const widths = this.byRoom.get(room.roomId)?.get(container)?.distributions;\r\n            if (!newLayout[widget.id]) {\r\n                newLayout[widget.id] = {\r\n                    container: container,\r\n                    index: idx,\r\n                    height: this.byRoom.get(room.roomId)?.get(container)?.height,\r\n                    width: widths?.[idx],\r\n                };\r\n            }\r\n        }\r\n\r\n        const layoutEv = room.currentState.getStateEvents(WIDGET_LAYOUT_EVENT_TYPE, \"\");\r\n        SettingsStore.setValue(\"Widgets.layout\", room.roomId, SettingLevel.ROOM_ACCOUNT, {\r\n            overrides: layoutEv?.getId(),\r\n            widgets: newLayout,\r\n        }).catch(() => this.recalculateRoom(room));\r\n        this.recalculateRoom(room); // call to try local echo on changes (the catch above undoes any errors)\r\n    }\r\n}\r\n\r\nwindow.mxWidgetLayoutStore = WidgetLayoutStore.instance;\r\n"],"mappings":"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"}