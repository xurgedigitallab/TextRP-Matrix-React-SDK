{"version":3,"file":"OwnBeaconStore.js","names":["_lodash","require","_matrix","_contentHelpers","_beacon","_logger","_dispatcher","_interopRequireDefault","_AsyncStoreWithClient","_arrays","_beacon2","_localRoom","_SettingsStore","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","isOwnBeacon","beacon","userId","beaconInfoOwner","OwnBeaconStoreEvent","exports","MOVING_UPDATE_INTERVAL","STATIC_UPDATE_INTERVAL","BAIL_AFTER_CONSECUTIVE_ERROR_COUNT","CREATED_BEACONS_KEY","removeLocallyCreateBeaconEventId","eventId","ids","getLocallyCreatedBeaconEventIds","window","localStorage","setItem","JSON","stringify","id","storeLocallyCreateBeaconEventId","parse","getItem","Array","isArray","Error","error","logger","OwnBeaconStore","AsyncStoreWithClient","constructor","defaultDispatcher","Map","roomId","getLiveBeaconIds","some","beaconHasLocationPublishError","beaconId","counts","beaconLocationPublishErrorCounts","get","undefined","incrementBeaconLocationPublishErrorCount","publishCurrentLocationToBeacons","liveBeaconIds","beaconsByRoomId","has","beacons","beaconIdentifier","beaconInfo","live","updateBeaconEvent","beaconInfoId","_event","matrixClient","getUserId","addBeacon","checkLiveness","monitorLiveness","isLive","identifier","stopBeacon","emit","LivenessChange","roomState","member","membership","removeBeacon","delete","clearBeacons","initialiseBeaconState","getSafeUserId","visibleRooms","getVisibleRooms","SettingsStore","getValue","room","currentState","ownBeaconsArray","values","set","Set","add","destroy","locallyCreatedBeaconEventIds","prevLiveBeaconIds","includes","sort","sortBeaconsByLatestCreation","map","diff","arrayDiff","added","removed","isMonitoringLiveLocation","togglePollingLocation","beaconInfoContent","existingLiveBeaconIdsForRoom","Promise","all","event_id","doMaybeLocalRoomAction","actualRoomId","unstable_createLiveBeacon","startPollingLocation","stopPollingLocation","clearPositionWatch","watchPosition","onWatchedPosition","onGeolocationError","message","locationInterval","setInterval","lastPublishedPositionTimestamp","Date","now","MonitoringLivePosition","clearInterval","geolocationError","position","timedGeoPosition","mapGeolocationPositionToTimedGeo","publishLocationToBeacons","debouncedPublishLocationToBeacons","GeolocationError","Unavailable","PermissionDenied","getCurrentPosition","update","description","timeout","timestamp","assetType","updateContent","makeBeaconInfoContent","unstable_setLiveBeacon","hadError","beaconUpdateErrors","BeaconUpdateError","healthyLiveBeaconIds","sendLocationToBeacon","debounce","_ref","geoUri","content","makeBeaconContent","sendEvent","M_BEACON","name","isError","LocationPublishError","instance","internalInstance","onNotReady","removeListener","BeaconEvent","onBeaconLiveness","New","onNewBeacon","Update","onUpdateBeacon","Destroy","onDestroyBeacon","RoomStateEvent","Members","onRoomStateMembers","unwatchSetting","dynamicWatcherRef","clear","onReady","on","watchSetting","reinitialiseBeaconState","onAction","payload","start"],"sources":["../../src/stores/OwnBeaconStore.ts"],"sourcesContent":["/*\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { debounce } from \"lodash\";\r\nimport {\r\n    Beacon,\r\n    BeaconIdentifier,\r\n    BeaconEvent,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    RoomState,\r\n    RoomStateEvent,\r\n} from \"matrix-js-sdk/src/matrix\";\r\nimport { BeaconInfoState, makeBeaconContent, makeBeaconInfoContent } from \"matrix-js-sdk/src/content-helpers\";\r\nimport { MBeaconInfoEventContent, M_BEACON } from \"matrix-js-sdk/src/@types/beacon\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\n\r\nimport defaultDispatcher from \"../dispatcher/dispatcher\";\r\nimport { ActionPayload } from \"../dispatcher/payloads\";\r\nimport { AsyncStoreWithClient } from \"./AsyncStoreWithClient\";\r\nimport { arrayDiff } from \"../utils/arrays\";\r\nimport {\r\n    ClearWatchCallback,\r\n    GeolocationError,\r\n    mapGeolocationPositionToTimedGeo,\r\n    sortBeaconsByLatestCreation,\r\n    TimedGeoUri,\r\n    watchPosition,\r\n} from \"../utils/beacon\";\r\nimport { getCurrentPosition } from \"../utils/beacon\";\r\nimport { doMaybeLocalRoomAction } from \"../utils/local-room\";\r\nimport SettingsStore from \"../settings/SettingsStore\";\r\n\r\nconst isOwnBeacon = (beacon: Beacon, userId: string): boolean => beacon.beaconInfoOwner === userId;\r\n\r\nexport enum OwnBeaconStoreEvent {\r\n    LivenessChange = \"OwnBeaconStore.LivenessChange\",\r\n    MonitoringLivePosition = \"OwnBeaconStore.MonitoringLivePosition\",\r\n    LocationPublishError = \"LocationPublishError\",\r\n    BeaconUpdateError = \"BeaconUpdateError\",\r\n}\r\n\r\nconst MOVING_UPDATE_INTERVAL = 5000;\r\nconst STATIC_UPDATE_INTERVAL = 30000;\r\n\r\nconst BAIL_AFTER_CONSECUTIVE_ERROR_COUNT = 2;\r\n\r\ntype OwnBeaconStoreState = {\r\n    beacons: Map<BeaconIdentifier, Beacon>;\r\n    beaconLocationPublishErrorCounts: Map<BeaconIdentifier, number>;\r\n    beaconUpdateErrors: Map<BeaconIdentifier, Error>;\r\n    beaconsByRoomId: Map<Room[\"roomId\"], Set<BeaconIdentifier>>;\r\n    liveBeaconIds: BeaconIdentifier[];\r\n};\r\n\r\nconst CREATED_BEACONS_KEY = \"mx_live_beacon_created_id\";\r\nconst removeLocallyCreateBeaconEventId = (eventId: string): void => {\r\n    const ids = getLocallyCreatedBeaconEventIds();\r\n    window.localStorage.setItem(CREATED_BEACONS_KEY, JSON.stringify(ids.filter((id) => id !== eventId)));\r\n};\r\nconst storeLocallyCreateBeaconEventId = (eventId: string): void => {\r\n    const ids = getLocallyCreatedBeaconEventIds();\r\n    window.localStorage.setItem(CREATED_BEACONS_KEY, JSON.stringify([...ids, eventId]));\r\n};\r\n\r\nconst getLocallyCreatedBeaconEventIds = (): string[] => {\r\n    let ids: string[];\r\n    try {\r\n        ids = JSON.parse(window.localStorage.getItem(CREATED_BEACONS_KEY) ?? \"[]\");\r\n        if (!Array.isArray(ids)) {\r\n            throw new Error(\"Invalid stored value\");\r\n        }\r\n    } catch (error) {\r\n        logger.error(\"Failed to retrieve locally created beacon event ids\", error);\r\n        ids = [];\r\n    }\r\n    return ids;\r\n};\r\nexport class OwnBeaconStore extends AsyncStoreWithClient<OwnBeaconStoreState> {\r\n    private static readonly internalInstance = (() => {\r\n        const instance = new OwnBeaconStore();\r\n        instance.start();\r\n        return instance;\r\n    })();\r\n    // users beacons, keyed by event type\r\n    public readonly beacons = new Map<BeaconIdentifier, Beacon>();\r\n    public readonly beaconsByRoomId = new Map<Room[\"roomId\"], Set<BeaconIdentifier>>();\r\n    /**\r\n     * Track over the wire errors for published positions\r\n     * Counts consecutive wire errors per beacon\r\n     * Reset on successful publish of location\r\n     */\r\n    public readonly beaconLocationPublishErrorCounts = new Map<BeaconIdentifier, number>();\r\n    public readonly beaconUpdateErrors = new Map<BeaconIdentifier, Error>();\r\n    /**\r\n     * ids of live beacons\r\n     * ordered by creation time descending\r\n     */\r\n    private liveBeaconIds: BeaconIdentifier[] = [];\r\n    private locationInterval?: number;\r\n    private geolocationError?: GeolocationError;\r\n    private clearPositionWatch?: ClearWatchCallback;\r\n    /**\r\n     * Track when the last position was published\r\n     * So we can manually get position on slow interval\r\n     * when the target is stationary\r\n     */\r\n    private lastPublishedPositionTimestamp?: number;\r\n    /**\r\n     * Ref returned from watchSetting for the MSC3946 labs flag\r\n     */\r\n    private dynamicWatcherRef: string | undefined;\r\n\r\n    public constructor() {\r\n        super(defaultDispatcher);\r\n    }\r\n\r\n    public static get instance(): OwnBeaconStore {\r\n        return OwnBeaconStore.internalInstance;\r\n    }\r\n\r\n    /**\r\n     * True when we have live beacons\r\n     * and geolocation.watchPosition is active\r\n     */\r\n    public get isMonitoringLiveLocation(): boolean {\r\n        return !!this.clearPositionWatch;\r\n    }\r\n\r\n    protected async onNotReady(): Promise<void> {\r\n        if (this.matrixClient) {\r\n            this.matrixClient.removeListener(BeaconEvent.LivenessChange, this.onBeaconLiveness);\r\n            this.matrixClient.removeListener(BeaconEvent.New, this.onNewBeacon);\r\n            this.matrixClient.removeListener(BeaconEvent.Update, this.onUpdateBeacon);\r\n            this.matrixClient.removeListener(BeaconEvent.Destroy, this.onDestroyBeacon);\r\n            this.matrixClient.removeListener(RoomStateEvent.Members, this.onRoomStateMembers);\r\n        }\r\n        SettingsStore.unwatchSetting(this.dynamicWatcherRef ?? \"\");\r\n\r\n        this.clearBeacons();\r\n    }\r\n\r\n    private clearBeacons(): void {\r\n        this.beacons.forEach((beacon) => beacon.destroy());\r\n\r\n        this.stopPollingLocation();\r\n        this.beacons.clear();\r\n        this.beaconsByRoomId.clear();\r\n        this.liveBeaconIds = [];\r\n        this.beaconLocationPublishErrorCounts.clear();\r\n        this.beaconUpdateErrors.clear();\r\n    }\r\n\r\n    protected async onReady(): Promise<void> {\r\n        if (this.matrixClient) {\r\n            this.matrixClient.on(BeaconEvent.LivenessChange, this.onBeaconLiveness);\r\n            this.matrixClient.on(BeaconEvent.New, this.onNewBeacon);\r\n            this.matrixClient.on(BeaconEvent.Update, this.onUpdateBeacon);\r\n            this.matrixClient.on(BeaconEvent.Destroy, this.onDestroyBeacon);\r\n            this.matrixClient.on(RoomStateEvent.Members, this.onRoomStateMembers);\r\n        }\r\n        this.dynamicWatcherRef = SettingsStore.watchSetting(\r\n            \"feature_dynamic_room_predecessors\",\r\n            null,\r\n            this.reinitialiseBeaconState,\r\n        );\r\n\r\n        this.initialiseBeaconState();\r\n    }\r\n\r\n    protected async onAction(payload: ActionPayload): Promise<void> {\r\n        // we don't actually do anything here\r\n    }\r\n\r\n    public hasLiveBeacons = (roomId?: string): boolean => {\r\n        return !!this.getLiveBeaconIds(roomId).length;\r\n    };\r\n\r\n    /**\r\n     * Some live beacon has a wire error\r\n     * Optionally filter by room\r\n     */\r\n    public hasLocationPublishErrors = (roomId?: string): boolean => {\r\n        return this.getLiveBeaconIds(roomId).some(this.beaconHasLocationPublishError);\r\n    };\r\n\r\n    /**\r\n     * If a beacon has failed to publish position\r\n     * past the allowed consecutive failure count (BAIL_AFTER_CONSECUTIVE_ERROR_COUNT)\r\n     * Then consider it to have an error\r\n     */\r\n    public beaconHasLocationPublishError = (beaconId: string): boolean => {\r\n        const counts = this.beaconLocationPublishErrorCounts.get(beaconId);\r\n        return counts !== undefined && counts >= BAIL_AFTER_CONSECUTIVE_ERROR_COUNT;\r\n    };\r\n\r\n    public resetLocationPublishError = (beaconId: string): void => {\r\n        this.incrementBeaconLocationPublishErrorCount(beaconId, false);\r\n\r\n        // always publish to all live beacons together\r\n        // instead of just one that was changed\r\n        // to keep lastPublishedTimestamp simple\r\n        // and extra published locations don't hurt\r\n        this.publishCurrentLocationToBeacons();\r\n    };\r\n\r\n    public getLiveBeaconIds = (roomId?: string): string[] => {\r\n        if (!roomId) {\r\n            return this.liveBeaconIds;\r\n        }\r\n        return this.liveBeaconIds.filter((beaconId) => this.beaconsByRoomId.get(roomId)?.has(beaconId));\r\n    };\r\n\r\n    public getLiveBeaconIdsWithLocationPublishError = (roomId?: string): string[] => {\r\n        return this.getLiveBeaconIds(roomId).filter(this.beaconHasLocationPublishError);\r\n    };\r\n\r\n    public getBeaconById = (beaconId: string): Beacon | undefined => {\r\n        return this.beacons.get(beaconId);\r\n    };\r\n\r\n    public stopBeacon = async (beaconIdentifier: string): Promise<void> => {\r\n        const beacon = this.beacons.get(beaconIdentifier);\r\n        // if no beacon, or beacon is already explicitly set isLive: false\r\n        // do nothing\r\n        if (!beacon?.beaconInfo?.live) {\r\n            return;\r\n        }\r\n\r\n        await this.updateBeaconEvent(beacon, { live: false });\r\n        // prune from local store\r\n        removeLocallyCreateBeaconEventId(beacon.beaconInfoId);\r\n    };\r\n\r\n    /**\r\n     * Listeners\r\n     */\r\n\r\n    private onNewBeacon = (_event: MatrixEvent, beacon: Beacon): void => {\r\n        if (!this.matrixClient || !isOwnBeacon(beacon, this.matrixClient.getUserId()!)) {\r\n            return;\r\n        }\r\n        this.addBeacon(beacon);\r\n        this.checkLiveness();\r\n    };\r\n\r\n    /**\r\n     * This will be called when a beacon is replaced\r\n     */\r\n    private onUpdateBeacon = (_event: MatrixEvent, beacon: Beacon): void => {\r\n        if (!this.matrixClient || !isOwnBeacon(beacon, this.matrixClient.getUserId()!)) {\r\n            return;\r\n        }\r\n\r\n        this.checkLiveness();\r\n        beacon.monitorLiveness();\r\n    };\r\n\r\n    private onDestroyBeacon = (beaconIdentifier: BeaconIdentifier): void => {\r\n        // check if we care about this beacon\r\n        if (!this.beacons.has(beaconIdentifier)) {\r\n            return;\r\n        }\r\n\r\n        this.checkLiveness();\r\n    };\r\n\r\n    private onBeaconLiveness = (isLive: boolean, beacon: Beacon): void => {\r\n        // check if we care about this beacon\r\n        if (!this.beacons.has(beacon.identifier)) {\r\n            return;\r\n        }\r\n\r\n        // beacon expired, update beacon to un-alive state\r\n        if (!isLive) {\r\n            this.stopBeacon(beacon.identifier);\r\n        }\r\n\r\n        this.checkLiveness();\r\n\r\n        this.emit(OwnBeaconStoreEvent.LivenessChange, this.getLiveBeaconIds());\r\n    };\r\n\r\n    /**\r\n     * Check for changes in membership in rooms with beacons\r\n     * and stop monitoring beacons in rooms user is no longer member of\r\n     */\r\n    private onRoomStateMembers = (_event: MatrixEvent, roomState: RoomState, member: RoomMember): void => {\r\n        // no beacons for this room, ignore\r\n        if (\r\n            !this.matrixClient ||\r\n            !this.beaconsByRoomId.has(roomState.roomId) ||\r\n            member.userId !== this.matrixClient.getUserId()\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        // TODO check powerlevels here\r\n        // in PSF-797\r\n\r\n        // stop watching beacons in rooms where user is no longer a member\r\n        if (member.membership === \"leave\" || member.membership === \"ban\") {\r\n            this.beaconsByRoomId.get(roomState.roomId)?.forEach(this.removeBeacon);\r\n            this.beaconsByRoomId.delete(roomState.roomId);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * State management\r\n     */\r\n\r\n    /**\r\n     * Live beacon ids that do not have wire errors\r\n     */\r\n    private get healthyLiveBeaconIds(): string[] {\r\n        return this.liveBeaconIds.filter(\r\n            (beaconId) => !this.beaconHasLocationPublishError(beaconId) && !this.beaconUpdateErrors.has(beaconId),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @internal public for test only\r\n     */\r\n    public reinitialiseBeaconState = (): void => {\r\n        this.clearBeacons();\r\n        this.initialiseBeaconState();\r\n    };\r\n\r\n    private initialiseBeaconState = (): void => {\r\n        if (!this.matrixClient) return;\r\n        const userId = this.matrixClient.getSafeUserId();\r\n        const visibleRooms = this.matrixClient.getVisibleRooms(\r\n            SettingsStore.getValue(\"feature_dynamic_room_predecessors\"),\r\n        );\r\n\r\n        visibleRooms.forEach((room) => {\r\n            const roomState = room.currentState;\r\n            const beacons = roomState.beacons;\r\n            const ownBeaconsArray = [...beacons.values()].filter((beacon) => isOwnBeacon(beacon, userId));\r\n            ownBeaconsArray.forEach((beacon) => this.addBeacon(beacon));\r\n        });\r\n\r\n        this.checkLiveness();\r\n    };\r\n\r\n    private addBeacon = (beacon: Beacon): void => {\r\n        this.beacons.set(beacon.identifier, beacon);\r\n\r\n        if (!this.beaconsByRoomId.has(beacon.roomId)) {\r\n            this.beaconsByRoomId.set(beacon.roomId, new Set<string>());\r\n        }\r\n\r\n        this.beaconsByRoomId.get(beacon.roomId)!.add(beacon.identifier);\r\n\r\n        beacon.monitorLiveness();\r\n    };\r\n\r\n    /**\r\n     * Remove listeners for a given beacon\r\n     * remove from state\r\n     * and update liveness if changed\r\n     */\r\n    private removeBeacon = (beaconId: string): void => {\r\n        if (!this.beacons.has(beaconId)) {\r\n            return;\r\n        }\r\n        this.beacons.get(beaconId)!.destroy();\r\n        this.beacons.delete(beaconId);\r\n\r\n        this.checkLiveness();\r\n    };\r\n\r\n    private checkLiveness = (): void => {\r\n        const locallyCreatedBeaconEventIds = getLocallyCreatedBeaconEventIds();\r\n        const prevLiveBeaconIds = this.getLiveBeaconIds();\r\n        this.liveBeaconIds = [...this.beacons.values()]\r\n            .filter(\r\n                (beacon) =>\r\n                    beacon.isLive &&\r\n                    // only beacons created on this device should be shared to\r\n                    locallyCreatedBeaconEventIds.includes(beacon.beaconInfoId),\r\n            )\r\n            .sort(sortBeaconsByLatestCreation)\r\n            .map((beacon) => beacon.identifier);\r\n\r\n        const diff = arrayDiff(prevLiveBeaconIds, this.liveBeaconIds);\r\n\r\n        if (diff.added.length || diff.removed.length) {\r\n            this.emit(OwnBeaconStoreEvent.LivenessChange, this.liveBeaconIds);\r\n        }\r\n\r\n        // publish current location immediately\r\n        // when there are new live beacons\r\n        // and we already have a live monitor\r\n        // so first position is published quickly\r\n        // even when target is stationary\r\n        //\r\n        // when there is no existing live monitor\r\n        // it will be created below by togglePollingLocation\r\n        // and publish first position quickly\r\n        if (diff.added.length && this.isMonitoringLiveLocation) {\r\n            this.publishCurrentLocationToBeacons();\r\n        }\r\n\r\n        // if overall liveness changed\r\n        if (!!prevLiveBeaconIds?.length !== !!this.liveBeaconIds.length) {\r\n            this.togglePollingLocation();\r\n        }\r\n    };\r\n\r\n    public createLiveBeacon = async (\r\n        roomId: Room[\"roomId\"],\r\n        beaconInfoContent: MBeaconInfoEventContent,\r\n    ): Promise<void> => {\r\n        if (!this.matrixClient) return;\r\n        // explicitly stop any live beacons this user has\r\n        // to ensure they remain stopped\r\n        // if the new replacing beacon is redacted\r\n        const existingLiveBeaconIdsForRoom = this.getLiveBeaconIds(roomId);\r\n        await Promise.all(existingLiveBeaconIdsForRoom.map((beaconId) => this.stopBeacon(beaconId)));\r\n\r\n        // eslint-disable-next-line camelcase\r\n        const { event_id } = await doMaybeLocalRoomAction(\r\n            roomId,\r\n            (actualRoomId: string) => this.matrixClient!.unstable_createLiveBeacon(actualRoomId, beaconInfoContent),\r\n            this.matrixClient,\r\n        );\r\n\r\n        storeLocallyCreateBeaconEventId(event_id);\r\n    };\r\n\r\n    /**\r\n     * Geolocation\r\n     */\r\n\r\n    private togglePollingLocation = (): void => {\r\n        if (!!this.liveBeaconIds.length) {\r\n            this.startPollingLocation();\r\n        } else {\r\n            this.stopPollingLocation();\r\n        }\r\n    };\r\n\r\n    private startPollingLocation = async (): Promise<void> => {\r\n        // clear any existing interval\r\n        this.stopPollingLocation();\r\n\r\n        try {\r\n            this.clearPositionWatch = watchPosition(this.onWatchedPosition, this.onGeolocationError);\r\n        } catch (error) {\r\n            this.onGeolocationError(error?.message);\r\n            // don't set locationInterval if geolocation failed to setup\r\n            return;\r\n        }\r\n\r\n        this.locationInterval = window.setInterval(() => {\r\n            if (!this.lastPublishedPositionTimestamp) {\r\n                return;\r\n            }\r\n            // if position was last updated STATIC_UPDATE_INTERVAL ms ago or more\r\n            // get our position and publish it\r\n            if (this.lastPublishedPositionTimestamp <= Date.now() - STATIC_UPDATE_INTERVAL) {\r\n                this.publishCurrentLocationToBeacons();\r\n            }\r\n        }, STATIC_UPDATE_INTERVAL);\r\n\r\n        this.emit(OwnBeaconStoreEvent.MonitoringLivePosition);\r\n    };\r\n\r\n    private stopPollingLocation = (): void => {\r\n        clearInterval(this.locationInterval);\r\n        this.locationInterval = undefined;\r\n        this.lastPublishedPositionTimestamp = undefined;\r\n        this.geolocationError = undefined;\r\n\r\n        if (this.clearPositionWatch) {\r\n            this.clearPositionWatch();\r\n            this.clearPositionWatch = undefined;\r\n        }\r\n\r\n        this.emit(OwnBeaconStoreEvent.MonitoringLivePosition);\r\n    };\r\n\r\n    private onWatchedPosition = (position: GeolocationPosition): void => {\r\n        const timedGeoPosition = mapGeolocationPositionToTimedGeo(position);\r\n\r\n        // if this is our first position, publish immediately\r\n        if (!this.lastPublishedPositionTimestamp) {\r\n            this.publishLocationToBeacons(timedGeoPosition);\r\n        } else {\r\n            this.debouncedPublishLocationToBeacons(timedGeoPosition);\r\n        }\r\n    };\r\n\r\n    private onGeolocationError = async (error: GeolocationError): Promise<void> => {\r\n        this.geolocationError = error;\r\n        logger.error(\"Geolocation failed\", this.geolocationError);\r\n\r\n        // other errors are considered non-fatal\r\n        // and self recovering\r\n        if (![GeolocationError.Unavailable, GeolocationError.PermissionDenied].includes(error)) {\r\n            return;\r\n        }\r\n\r\n        this.stopPollingLocation();\r\n        // kill live beacons when location permissions are revoked\r\n        await Promise.all(this.liveBeaconIds.map(this.stopBeacon));\r\n    };\r\n\r\n    /**\r\n     * Gets the current location\r\n     * (as opposed to using watched location)\r\n     * and publishes it to all live beacons\r\n     */\r\n    private publishCurrentLocationToBeacons = async (): Promise<void> => {\r\n        try {\r\n            const position = await getCurrentPosition();\r\n            this.publishLocationToBeacons(mapGeolocationPositionToTimedGeo(position));\r\n        } catch (error) {\r\n            this.onGeolocationError(error?.message);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * MatrixClient api\r\n     */\r\n\r\n    /**\r\n     * Updates beacon with provided content update\r\n     * Records error in beaconUpdateErrors\r\n     * rethrows\r\n     */\r\n    private updateBeaconEvent = async (beacon: Beacon, update: Partial<BeaconInfoState>): Promise<void> => {\r\n        const { description, timeout, timestamp, live, assetType } = {\r\n            ...beacon.beaconInfo,\r\n            ...update,\r\n        };\r\n\r\n        const updateContent = makeBeaconInfoContent(timeout, live, description, assetType, timestamp);\r\n\r\n        try {\r\n            await this.matrixClient!.unstable_setLiveBeacon(beacon.roomId, updateContent);\r\n            // cleanup any errors\r\n            const hadError = this.beaconUpdateErrors.has(beacon.identifier);\r\n            if (hadError) {\r\n                this.beaconUpdateErrors.delete(beacon.identifier);\r\n                this.emit(OwnBeaconStoreEvent.BeaconUpdateError, beacon.identifier, false);\r\n            }\r\n        } catch (error) {\r\n            logger.error(\"Failed to update beacon\", error);\r\n            this.beaconUpdateErrors.set(beacon.identifier, error);\r\n            this.emit(OwnBeaconStoreEvent.BeaconUpdateError, beacon.identifier, true);\r\n\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sends m.location events to all live beacons\r\n     * Sets last published beacon\r\n     */\r\n    private publishLocationToBeacons = async (position: TimedGeoUri): Promise<void> => {\r\n        this.lastPublishedPositionTimestamp = Date.now();\r\n        await Promise.all(\r\n            this.healthyLiveBeaconIds.map((beaconId) =>\r\n                this.beacons.has(beaconId) ? this.sendLocationToBeacon(this.beacons.get(beaconId)!, position) : null,\r\n            ),\r\n        );\r\n    };\r\n\r\n    private debouncedPublishLocationToBeacons = debounce(this.publishLocationToBeacons, MOVING_UPDATE_INTERVAL);\r\n\r\n    /**\r\n     * Sends m.location event to referencing given beacon\r\n     */\r\n    private sendLocationToBeacon = async (beacon: Beacon, { geoUri, timestamp }: TimedGeoUri): Promise<void> => {\r\n        const content = makeBeaconContent(geoUri, timestamp, beacon.beaconInfoId);\r\n        try {\r\n            await this.matrixClient!.sendEvent(beacon.roomId, M_BEACON.name, content);\r\n            this.incrementBeaconLocationPublishErrorCount(beacon.identifier, false);\r\n        } catch (error) {\r\n            logger.error(error);\r\n            this.incrementBeaconLocationPublishErrorCount(beacon.identifier, true);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Manage beacon wire error count\r\n     * - clear count for beacon when not error\r\n     * - increment count for beacon when is error\r\n     * - emit if beacon error count crossed threshold\r\n     */\r\n    private incrementBeaconLocationPublishErrorCount = (beaconId: string, isError: boolean): void => {\r\n        const hadError = this.beaconHasLocationPublishError(beaconId);\r\n\r\n        if (isError) {\r\n            // increment error count\r\n            this.beaconLocationPublishErrorCounts.set(\r\n                beaconId,\r\n                (this.beaconLocationPublishErrorCounts.get(beaconId) ?? 0) + 1,\r\n            );\r\n        } else {\r\n            // clear any error count\r\n            this.beaconLocationPublishErrorCounts.delete(beaconId);\r\n        }\r\n\r\n        if (this.beaconHasLocationPublishError(beaconId) !== hadError) {\r\n            this.emit(OwnBeaconStoreEvent.LocationPublishError, beaconId);\r\n        }\r\n    };\r\n}\r\n"],"mappings":"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"}