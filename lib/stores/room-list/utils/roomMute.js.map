{"version":3,"file":"roomMute.js","names":["_matrix","require","_RoomNotifs","_arrays","getChangedOverrideRoomMutePushRules","actionPayload","action","event","getType","EventType","PushRules","undefined","prevEvent","previousEvent","roomPushRules","getContent","global","override","filter","isRuleMaybeRoomMuteRule","prevRoomPushRules","added","removed","arrayDiff","map","rule","rule_id","exports"],"sources":["../../../../src/stores/room-list/utils/roomMute.ts"],"sourcesContent":["/*\r\nCopyright 2023 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { MatrixEvent, EventType, IPushRules } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport { ActionPayload } from \"../../../dispatcher/payloads\";\r\nimport { isRuleMaybeRoomMuteRule } from \"../../../RoomNotifs\";\r\nimport { arrayDiff } from \"../../../utils/arrays\";\r\n\r\n/**\r\n * Gets any changed push rules that are room specific overrides\r\n * that mute notifications\r\n * @param actionPayload\r\n * @returns {string[]} ruleIds of added or removed rules\r\n */\r\nexport const getChangedOverrideRoomMutePushRules = (actionPayload: ActionPayload): string[] | undefined => {\r\n    if (\r\n        actionPayload.action !== \"MatrixActions.accountData\" ||\r\n        actionPayload.event?.getType() !== EventType.PushRules\r\n    ) {\r\n        return undefined;\r\n    }\r\n    const event = actionPayload.event as MatrixEvent;\r\n    const prevEvent = actionPayload.previousEvent as MatrixEvent | undefined;\r\n\r\n    if (!event || !prevEvent) {\r\n        return undefined;\r\n    }\r\n\r\n    const roomPushRules = (event.getContent() as IPushRules)?.global?.override?.filter(isRuleMaybeRoomMuteRule);\r\n    const prevRoomPushRules = (prevEvent?.getContent() as IPushRules)?.global?.override?.filter(\r\n        isRuleMaybeRoomMuteRule,\r\n    );\r\n\r\n    const { added, removed } = arrayDiff(\r\n        prevRoomPushRules?.map((rule) => rule.rule_id) || [],\r\n        roomPushRules?.map((rule) => rule.rule_id) || [],\r\n    );\r\n\r\n    return [...added, ...removed];\r\n};\r\n"],"mappings":";;;;;;AAgBA,IAAAA,OAAA,GAAAC,OAAA;AAGA,IAAAC,WAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AApBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMG,mCAAmC,GAAIC,aAA4B,IAA2B;EACvG,IACIA,aAAa,CAACC,MAAM,KAAK,2BAA2B,IACpDD,aAAa,CAACE,KAAK,EAAEC,OAAO,CAAC,CAAC,KAAKC,iBAAS,CAACC,SAAS,EACxD;IACE,OAAOC,SAAS;EACpB;EACA,MAAMJ,KAAK,GAAGF,aAAa,CAACE,KAAoB;EAChD,MAAMK,SAAS,GAAGP,aAAa,CAACQ,aAAwC;EAExE,IAAI,CAACN,KAAK,IAAI,CAACK,SAAS,EAAE;IACtB,OAAOD,SAAS;EACpB;EAEA,MAAMG,aAAa,GAAIP,KAAK,CAACQ,UAAU,CAAC,CAAC,EAAiBC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,CAACC,mCAAuB,CAAC;EAC3G,MAAMC,iBAAiB,GAAIR,SAAS,EAAEG,UAAU,CAAC,CAAC,EAAiBC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,CACvFC,mCACJ,CAAC;EAED,MAAM;IAAEE,KAAK;IAAEC;EAAQ,CAAC,GAAG,IAAAC,iBAAS,EAChCH,iBAAiB,EAAEI,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,OAAO,CAAC,IAAI,EAAE,EACpDZ,aAAa,EAAEU,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,OAAO,CAAC,IAAI,EAClD,CAAC;EAED,OAAO,CAAC,GAAGL,KAAK,EAAE,GAAGC,OAAO,CAAC;AACjC,CAAC;AAACK,OAAA,CAAAvB,mCAAA,GAAAA,mCAAA"}