{"version":3,"file":"NaturalAlgorithm.js","names":["_logger","require","_tagSorting","_OrderingAlgorithm","_models","_RoomNotificationStateStore","NaturalAlgorithm","OrderingAlgorithm","constructor","tagId","initialSortingAlgorithm","_defineProperty2","default","defaultRooms","mutedRooms","setRooms","rooms","categorizeRooms","cachedCategorizedOrderedRooms","sortRoomsWithAlgorithm","sortingAlgorithm","buildCachedOrderedRooms","handleRoomUpdate","room","cause","isSplice","RoomUpdateCause","NewRoom","RoomRemoved","isInPlace","Timeline","ReadReceipt","PossibleMuteChange","isMuted","isMutedToBottom","getRoomIsMuted","Error","removeRoom","onPossibleMuteChange","defaultIndex","findIndex","r","roomId","splice","mutedIndex","logger","warn","cachedOrderedRooms","state","RoomNotificationStateStore","instance","getRoomState","muted","reduce","acc","push","exports"],"sources":["../../../../../src/stores/room-list/algorithms/list-ordering/NaturalAlgorithm.ts"],"sourcesContent":["/*\r\nCopyright 2020 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { Room } from \"matrix-js-sdk/src/models/room\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\n\r\nimport { SortAlgorithm } from \"../models\";\r\nimport { sortRoomsWithAlgorithm } from \"../tag-sorting\";\r\nimport { OrderingAlgorithm } from \"./OrderingAlgorithm\";\r\nimport { RoomUpdateCause, TagID } from \"../../models\";\r\nimport { RoomNotificationStateStore } from \"../../../notifications/RoomNotificationStateStore\";\r\n\r\ntype NaturalCategorizedRoomMap = {\r\n    defaultRooms: Room[];\r\n    mutedRooms: Room[];\r\n};\r\n\r\n/**\r\n * Uses the natural tag sorting algorithm order to determine tag ordering. No\r\n * additional behavioural changes are present.\r\n */\r\nexport class NaturalAlgorithm extends OrderingAlgorithm {\r\n    private cachedCategorizedOrderedRooms: NaturalCategorizedRoomMap = {\r\n        defaultRooms: [],\r\n        mutedRooms: [],\r\n    };\r\n    public constructor(tagId: TagID, initialSortingAlgorithm: SortAlgorithm) {\r\n        super(tagId, initialSortingAlgorithm);\r\n    }\r\n\r\n    public setRooms(rooms: Room[]): void {\r\n        const { defaultRooms, mutedRooms } = this.categorizeRooms(rooms);\r\n\r\n        this.cachedCategorizedOrderedRooms = {\r\n            defaultRooms: sortRoomsWithAlgorithm(defaultRooms, this.tagId, this.sortingAlgorithm),\r\n            mutedRooms: sortRoomsWithAlgorithm(mutedRooms, this.tagId, this.sortingAlgorithm),\r\n        };\r\n        this.buildCachedOrderedRooms();\r\n    }\r\n\r\n    public handleRoomUpdate(room: Room, cause: RoomUpdateCause): boolean {\r\n        const isSplice = cause === RoomUpdateCause.NewRoom || cause === RoomUpdateCause.RoomRemoved;\r\n        const isInPlace =\r\n            cause === RoomUpdateCause.Timeline ||\r\n            cause === RoomUpdateCause.ReadReceipt ||\r\n            cause === RoomUpdateCause.PossibleMuteChange;\r\n        const isMuted = this.isMutedToBottom && this.getRoomIsMuted(room);\r\n\r\n        if (!isSplice && !isInPlace) {\r\n            throw new Error(`Unsupported update cause: ${cause}`);\r\n        }\r\n\r\n        if (cause === RoomUpdateCause.NewRoom) {\r\n            if (isMuted) {\r\n                this.cachedCategorizedOrderedRooms.mutedRooms = sortRoomsWithAlgorithm(\r\n                    [...this.cachedCategorizedOrderedRooms.mutedRooms, room],\r\n                    this.tagId,\r\n                    this.sortingAlgorithm,\r\n                );\r\n            } else {\r\n                this.cachedCategorizedOrderedRooms.defaultRooms = sortRoomsWithAlgorithm(\r\n                    [...this.cachedCategorizedOrderedRooms.defaultRooms, room],\r\n                    this.tagId,\r\n                    this.sortingAlgorithm,\r\n                );\r\n            }\r\n            this.buildCachedOrderedRooms();\r\n            return true;\r\n        } else if (cause === RoomUpdateCause.RoomRemoved) {\r\n            return this.removeRoom(room);\r\n        } else if (cause === RoomUpdateCause.PossibleMuteChange) {\r\n            if (this.isMutedToBottom) {\r\n                return this.onPossibleMuteChange(room);\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // TODO: Optimize this to avoid useless operations: https://github.com/vector-im/element-web/issues/14457\r\n        // For example, we can skip updates to alphabetic (sometimes) and manually ordered tags\r\n        if (isMuted) {\r\n            this.cachedCategorizedOrderedRooms.mutedRooms = sortRoomsWithAlgorithm(\r\n                this.cachedCategorizedOrderedRooms.mutedRooms,\r\n                this.tagId,\r\n                this.sortingAlgorithm,\r\n            );\r\n        } else {\r\n            this.cachedCategorizedOrderedRooms.defaultRooms = sortRoomsWithAlgorithm(\r\n                this.cachedCategorizedOrderedRooms.defaultRooms,\r\n                this.tagId,\r\n                this.sortingAlgorithm,\r\n            );\r\n        }\r\n        this.buildCachedOrderedRooms();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Remove a room from the cached room list\r\n     * @param room Room to remove\r\n     * @returns {boolean} true when room list should update as result\r\n     */\r\n    private removeRoom(room: Room): boolean {\r\n        const defaultIndex = this.cachedCategorizedOrderedRooms.defaultRooms.findIndex((r) => r.roomId === room.roomId);\r\n        if (defaultIndex > -1) {\r\n            this.cachedCategorizedOrderedRooms.defaultRooms.splice(defaultIndex, 1);\r\n            this.buildCachedOrderedRooms();\r\n            return true;\r\n        }\r\n        const mutedIndex = this.cachedCategorizedOrderedRooms.mutedRooms.findIndex((r) => r.roomId === room.roomId);\r\n        if (mutedIndex > -1) {\r\n            this.cachedCategorizedOrderedRooms.mutedRooms.splice(mutedIndex, 1);\r\n            this.buildCachedOrderedRooms();\r\n            return true;\r\n        }\r\n\r\n        logger.warn(`Tried to remove unknown room from ${this.tagId}: ${room.roomId}`);\r\n        // room was not in cached lists, no update\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sets cachedOrderedRooms from cachedCategorizedOrderedRooms\r\n     */\r\n    private buildCachedOrderedRooms(): void {\r\n        this.cachedOrderedRooms = [\r\n            ...this.cachedCategorizedOrderedRooms.defaultRooms,\r\n            ...this.cachedCategorizedOrderedRooms.mutedRooms,\r\n        ];\r\n    }\r\n\r\n    private getRoomIsMuted(room: Room): boolean {\r\n        // It's fine for us to call this a lot because it's cached, and we shouldn't be\r\n        // wasting anything by doing so as the store holds single references\r\n        const state = RoomNotificationStateStore.instance.getRoomState(room);\r\n        return state.muted;\r\n    }\r\n\r\n    private categorizeRooms(rooms: Room[]): NaturalCategorizedRoomMap {\r\n        if (!this.isMutedToBottom) {\r\n            return { defaultRooms: rooms, mutedRooms: [] };\r\n        }\r\n        return rooms.reduce<NaturalCategorizedRoomMap>(\r\n            (acc, room: Room) => {\r\n                if (this.getRoomIsMuted(room)) {\r\n                    acc.mutedRooms.push(room);\r\n                } else {\r\n                    acc.defaultRooms.push(room);\r\n                }\r\n                return acc;\r\n            },\r\n            { defaultRooms: [], mutedRooms: [] } as NaturalCategorizedRoomMap,\r\n        );\r\n    }\r\n\r\n    private onPossibleMuteChange(room: Room): boolean {\r\n        const isMuted = this.getRoomIsMuted(room);\r\n        if (isMuted) {\r\n            const defaultIndex = this.cachedCategorizedOrderedRooms.defaultRooms.findIndex(\r\n                (r) => r.roomId === room.roomId,\r\n            );\r\n\r\n            // room has been muted\r\n            if (defaultIndex > -1) {\r\n                // remove from the default list\r\n                this.cachedCategorizedOrderedRooms.defaultRooms.splice(defaultIndex, 1);\r\n                // add to muted list and reorder\r\n                this.cachedCategorizedOrderedRooms.mutedRooms = sortRoomsWithAlgorithm(\r\n                    [...this.cachedCategorizedOrderedRooms.mutedRooms, room],\r\n                    this.tagId,\r\n                    this.sortingAlgorithm,\r\n                );\r\n                // rebuild\r\n                this.buildCachedOrderedRooms();\r\n                return true;\r\n            }\r\n        } else {\r\n            const mutedIndex = this.cachedCategorizedOrderedRooms.mutedRooms.findIndex((r) => r.roomId === room.roomId);\r\n\r\n            // room has been unmuted\r\n            if (mutedIndex > -1) {\r\n                // remove from the muted list\r\n                this.cachedCategorizedOrderedRooms.mutedRooms.splice(mutedIndex, 1);\r\n                // add to default list and reorder\r\n                this.cachedCategorizedOrderedRooms.defaultRooms = sortRoomsWithAlgorithm(\r\n                    [...this.cachedCategorizedOrderedRooms.defaultRooms, room],\r\n                    this.tagId,\r\n                    this.sortingAlgorithm,\r\n                );\r\n                // rebuild\r\n                this.buildCachedOrderedRooms();\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"],"mappings":"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"}