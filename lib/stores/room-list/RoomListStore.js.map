{"version":3,"file":"RoomListStore.js","names":["_logger","require","_event","_SettingsStore","_interopRequireDefault","_models","_models2","_dispatcher","_readReceipts","_IFilterCondition","_Algorithm","_membership","_RoomListLayoutStore","_MarkedExecution","_AsyncStoreWithClient","_RoomNotificationStateStore","_VisibilityProvider","_SpaceWatcher","_Interface","_SlidingRoomListStore","_AsyncStore","_SDKContext","_roomMute","LISTS_UPDATE_EVENT","RoomListStoreEvent","ListsUpdate","exports","LISTS_LOADING_EVENT","ListsLoading","RoomListStoreClass","AsyncStoreWithClient","constructor","dis","_defineProperty2","default","Algorithm","MarkedExecution","tagId","Object","keys","orderedLists","RoomNotificationStateStore","instance","getListState","setRooms","emit","forceUpdate","updateFn","mark","trigger","recalculatePrefiltering","setMaxListeners","algorithm","start","msc3946ProcessDynamicPredecessor","SettingsStore","getValue","msc3946SettingWatcherRef","watchSetting","_settingName","_roomId","_level","_newValAtLevel","newVal","regenerateAllLists","componentWillUnmount","unwatchSetting","setupWatchers","SpaceWatcher","getOrderedRooms","resetStore","reset","prefilterConditions","initialListsGenerated","off","LIST_UPDATED_EVENT","onAlgorithmListUpdated","FILTER_CHANGED","stop","on","makeReady","forcedClient","readyStore","useUnitTestClient","SdkContextClass","roomViewStore","addListener","UPDATE_EVENT","handleRVSUpdate","onAlgorithmFilterUpdated","logger","log","updateAlgorithmInstances","_ref","matrixClient","activeRoomId","getRoomId","stickyRoom","setStickyRoom","activeRoom","getRoom","warn","onReady","onNotReady","onAction","payload","logicallyReady","TEST_MODE","onDispatchAsync","setImmediate","Error","action","readReceiptChangeIsFor","event","room","roomId","handleRoomUpdate","RoomUpdateCause","ReadReceipt","roomPayload","PossibleTagChange","eventPayload","isLiveEvent","isLiveUnfilteredRoomTimelineEvent","tryUpdate","updatedRoom","getType","EventType","RoomTombstone","getStateKey","newRoom","getContent","Timeline","getId","window","setTimeout","event_type","Direct","dmMap","userId","roomIds","onDispatchMyMembership","possibleMuteChangeRoomIds","getChangedOverrideRoomMutePushRules","PossibleMuteChange","membershipPayload","oldMembership","getEffectiveMembership","newMembership","membership","EffectiveMembership","Join","roomState","currentState","predecessor","findPredecessor","prevRoom","isSticky","RoomRemoved","NewRoom","Invite","cause","getMyMembership","VisibilityProvider","onNewInvitedRoom","isRoomVisible","every","c","isVisible","shouldUpdate","hasTagSortingMap","updatesInhibited","rooms","getPlausibleRooms","currentSticky","stickyIsStillPresent","includes","setKnownRooms","setTagSorting","sort","setAndPersistTagSorting","localStorage","setItem","getTagSorting","getStoredTagSorting","getItem","calculateTagSorting","definedSort","storedSort","tagSort","SortAlgorithm","Recent","setListOrder","order","setAndPersistListOrder","setListOrdering","getListOrder","getListOrdering","getStoredListOrder","calculateListOrder","defaultOrder","ListAlgorithm","Natural","definedOrder","storedOrder","listOrder","tag","getVisibleRooms","filter","r","length","_ref2","sorts","orders","allTags","OrderedDefaultTagIDs","RoomListLayoutStore","ensureLayoutExists","populateTags","addFilter","promise","Promise","resolve","onPrefilterUpdated","push","then","removeFilter","removed","idx","indexOf","splice","getTagsForRoom","algorithmTags","DefaultTagID","Untagged","getCount","manualRoomUpdate","RoomListStore","internalInstance","info","SlidingRoomListStoreClass","defaultDispatcher","mxRoomListStore"],"sources":["../../../src/stores/room-list/RoomListStore.ts"],"sourcesContent":["/*\r\nCopyright 2018 - 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { MatrixClient } from \"matrix-js-sdk/src/client\";\r\nimport { Room } from \"matrix-js-sdk/src/models/room\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\nimport { EventType } from \"matrix-js-sdk/src/@types/event\";\r\nimport { RoomState } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport SettingsStore from \"../../settings/SettingsStore\";\r\nimport { DefaultTagID, OrderedDefaultTagIDs, RoomUpdateCause, TagID } from \"./models\";\r\nimport { IListOrderingMap, ITagMap, ITagSortingMap, ListAlgorithm, SortAlgorithm } from \"./algorithms/models\";\r\nimport { ActionPayload } from \"../../dispatcher/payloads\";\r\nimport defaultDispatcher, { MatrixDispatcher } from \"../../dispatcher/dispatcher\";\r\nimport { readReceiptChangeIsFor } from \"../../utils/read-receipts\";\r\nimport { FILTER_CHANGED, IFilterCondition } from \"./filters/IFilterCondition\";\r\nimport { Algorithm, LIST_UPDATED_EVENT } from \"./algorithms/Algorithm\";\r\nimport { EffectiveMembership, getEffectiveMembership } from \"../../utils/membership\";\r\nimport RoomListLayoutStore from \"./RoomListLayoutStore\";\r\nimport { MarkedExecution } from \"../../utils/MarkedExecution\";\r\nimport { AsyncStoreWithClient } from \"../AsyncStoreWithClient\";\r\nimport { RoomNotificationStateStore } from \"../notifications/RoomNotificationStateStore\";\r\nimport { VisibilityProvider } from \"./filters/VisibilityProvider\";\r\nimport { SpaceWatcher } from \"./SpaceWatcher\";\r\nimport { IRoomTimelineActionPayload } from \"../../actions/MatrixActionCreators\";\r\nimport { RoomListStore as Interface, RoomListStoreEvent } from \"./Interface\";\r\nimport { SlidingRoomListStoreClass } from \"./SlidingRoomListStore\";\r\nimport { UPDATE_EVENT } from \"../AsyncStore\";\r\nimport { SdkContextClass } from \"../../contexts/SDKContext\";\r\nimport { getChangedOverrideRoomMutePushRules } from \"./utils/roomMute\";\r\n\r\ninterface IState {\r\n    // state is tracked in underlying classes\r\n}\r\n\r\nexport const LISTS_UPDATE_EVENT = RoomListStoreEvent.ListsUpdate;\r\nexport const LISTS_LOADING_EVENT = RoomListStoreEvent.ListsLoading; // unused; used by SlidingRoomListStore\r\n\r\nexport class RoomListStoreClass extends AsyncStoreWithClient<IState> implements Interface {\r\n    /**\r\n     * Set to true if you're running tests on the store. Should not be touched in\r\n     * any other environment.\r\n     */\r\n    public static TEST_MODE = false;\r\n\r\n    private initialListsGenerated = false;\r\n    private msc3946ProcessDynamicPredecessor: boolean;\r\n    private msc3946SettingWatcherRef: string;\r\n    private algorithm = new Algorithm();\r\n    private prefilterConditions: IFilterCondition[] = [];\r\n    private updateFn = new MarkedExecution(() => {\r\n        for (const tagId of Object.keys(this.orderedLists)) {\r\n            RoomNotificationStateStore.instance.getListState(tagId).setRooms(this.orderedLists[tagId]);\r\n        }\r\n        this.emit(LISTS_UPDATE_EVENT);\r\n    });\r\n\r\n    public constructor(dis: MatrixDispatcher) {\r\n        super(dis);\r\n        this.setMaxListeners(20); // RoomList + LeftPanel + 8xRoomSubList + spares\r\n        this.algorithm.start();\r\n\r\n        this.msc3946ProcessDynamicPredecessor = SettingsStore.getValue(\"feature_dynamic_room_predecessors\");\r\n        this.msc3946SettingWatcherRef = SettingsStore.watchSetting(\r\n            \"feature_dynamic_room_predecessors\",\r\n            null,\r\n            (_settingName, _roomId, _level, _newValAtLevel, newVal) => {\r\n                this.msc3946ProcessDynamicPredecessor = newVal;\r\n                this.regenerateAllLists({ trigger: true });\r\n            },\r\n        );\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        SettingsStore.unwatchSetting(this.msc3946SettingWatcherRef);\r\n    }\r\n\r\n    private setupWatchers(): void {\r\n        // TODO: Maybe destroy this if this class supports destruction\r\n        new SpaceWatcher(this);\r\n    }\r\n\r\n    public get orderedLists(): ITagMap {\r\n        if (!this.algorithm) return {}; // No tags yet.\r\n        return this.algorithm.getOrderedRooms();\r\n    }\r\n\r\n    // Intended for test usage\r\n    public async resetStore(): Promise<void> {\r\n        await this.reset();\r\n        this.prefilterConditions = [];\r\n        this.initialListsGenerated = false;\r\n\r\n        this.algorithm.off(LIST_UPDATED_EVENT, this.onAlgorithmListUpdated);\r\n        this.algorithm.off(FILTER_CHANGED, this.onAlgorithmListUpdated);\r\n        this.algorithm.stop();\r\n        this.algorithm = new Algorithm();\r\n        this.algorithm.on(LIST_UPDATED_EVENT, this.onAlgorithmListUpdated);\r\n        this.algorithm.on(FILTER_CHANGED, this.onAlgorithmListUpdated);\r\n\r\n        // Reset state without causing updates as the client will have been destroyed\r\n        // and downstream code will throw NPE errors.\r\n        await this.reset(null, true);\r\n    }\r\n\r\n    // Public for test usage. Do not call this.\r\n    public async makeReady(forcedClient?: MatrixClient): Promise<void> {\r\n        if (forcedClient) {\r\n            this.readyStore.useUnitTestClient(forcedClient);\r\n        }\r\n\r\n        SdkContextClass.instance.roomViewStore.addListener(UPDATE_EVENT, () => this.handleRVSUpdate({}));\r\n        this.algorithm.on(LIST_UPDATED_EVENT, this.onAlgorithmListUpdated);\r\n        this.algorithm.on(FILTER_CHANGED, this.onAlgorithmFilterUpdated);\r\n        this.setupWatchers();\r\n\r\n        // Update any settings here, as some may have happened before we were logically ready.\r\n        logger.log(\"Regenerating room lists: Startup\");\r\n        this.updateAlgorithmInstances();\r\n        this.regenerateAllLists({ trigger: false });\r\n        this.handleRVSUpdate({ trigger: false }); // fake an RVS update to adjust sticky room, if needed\r\n\r\n        this.updateFn.mark(); // we almost certainly want to trigger an update.\r\n        this.updateFn.trigger();\r\n    }\r\n\r\n    /**\r\n     * Handles suspected RoomViewStore changes.\r\n     * @param trigger Set to false to prevent a list update from being sent. Should only\r\n     * be used if the calling code will manually trigger the update.\r\n     */\r\n    private handleRVSUpdate({ trigger = true }): void {\r\n        if (!this.matrixClient) return; // We assume there won't be RVS updates without a client\r\n\r\n        const activeRoomId = SdkContextClass.instance.roomViewStore.getRoomId();\r\n        if (!activeRoomId && this.algorithm.stickyRoom) {\r\n            this.algorithm.setStickyRoom(null);\r\n        } else if (activeRoomId) {\r\n            const activeRoom = this.matrixClient.getRoom(activeRoomId);\r\n            if (!activeRoom) {\r\n                logger.warn(`${activeRoomId} is current in RVS but missing from client - clearing sticky room`);\r\n                this.algorithm.setStickyRoom(null);\r\n            } else if (activeRoom !== this.algorithm.stickyRoom) {\r\n                this.algorithm.setStickyRoom(activeRoom);\r\n            }\r\n        }\r\n\r\n        if (trigger) this.updateFn.trigger();\r\n    }\r\n\r\n    protected async onReady(): Promise<any> {\r\n        await this.makeReady();\r\n    }\r\n\r\n    protected async onNotReady(): Promise<any> {\r\n        await this.resetStore();\r\n    }\r\n\r\n    protected async onAction(payload: ActionPayload): Promise<void> {\r\n        // If we're not remotely ready, don't even bother scheduling the dispatch handling.\r\n        // This is repeated in the handler just in case things change between a decision here and\r\n        // when the timer fires.\r\n        const logicallyReady = this.matrixClient && this.initialListsGenerated;\r\n        if (!logicallyReady) return;\r\n\r\n        // When we're running tests we can't reliably use setImmediate out of timing concerns.\r\n        // As such, we use a more synchronous model.\r\n        if (RoomListStoreClass.TEST_MODE) {\r\n            await this.onDispatchAsync(payload);\r\n            return;\r\n        }\r\n\r\n        // We do this to intentionally break out of the current event loop task, allowing\r\n        // us to instead wait for a more convenient time to run our updates.\r\n        setImmediate(() => this.onDispatchAsync(payload));\r\n    }\r\n\r\n    protected async onDispatchAsync(payload: ActionPayload): Promise<void> {\r\n        // Everything here requires a MatrixClient or some sort of logical readiness.\r\n        if (!this.matrixClient || !this.initialListsGenerated) return;\r\n\r\n        if (!this.algorithm) {\r\n            // This shouldn't happen because `initialListsGenerated` implies we have an algorithm.\r\n            throw new Error(\"Room list store has no algorithm to process dispatcher update with\");\r\n        }\r\n\r\n        if (payload.action === \"MatrixActions.Room.receipt\") {\r\n            // First see if the receipt event is for our own user. If it was, trigger\r\n            // a room update (we probably read the room on a different device).\r\n            if (readReceiptChangeIsFor(payload.event, this.matrixClient)) {\r\n                const room = payload.room;\r\n                if (!room) {\r\n                    logger.warn(`Own read receipt was in unknown room ${room.roomId}`);\r\n                    return;\r\n                }\r\n                await this.handleRoomUpdate(room, RoomUpdateCause.ReadReceipt);\r\n                this.updateFn.trigger();\r\n                return;\r\n            }\r\n        } else if (payload.action === \"MatrixActions.Room.tags\") {\r\n            const roomPayload = <any>payload; // TODO: Type out the dispatcher types\r\n            await this.handleRoomUpdate(roomPayload.room, RoomUpdateCause.PossibleTagChange);\r\n            this.updateFn.trigger();\r\n        } else if (payload.action === \"MatrixActions.Room.timeline\") {\r\n            const eventPayload = <IRoomTimelineActionPayload>payload;\r\n\r\n            // Ignore non-live events (backfill) and notification timeline set events (without a room)\r\n            if (!eventPayload.isLiveEvent || !eventPayload.isLiveUnfilteredRoomTimelineEvent || !eventPayload.room) {\r\n                return;\r\n            }\r\n\r\n            const roomId = eventPayload.event.getRoomId();\r\n            const room = this.matrixClient.getRoom(roomId);\r\n            const tryUpdate = async (updatedRoom: Room): Promise<void> => {\r\n                if (\r\n                    eventPayload.event.getType() === EventType.RoomTombstone &&\r\n                    eventPayload.event.getStateKey() === \"\"\r\n                ) {\r\n                    const newRoom = this.matrixClient?.getRoom(eventPayload.event.getContent()[\"replacement_room\"]);\r\n                    if (newRoom) {\r\n                        // If we have the new room, then the new room check will have seen the predecessor\r\n                        // and did the required updates, so do nothing here.\r\n                        return;\r\n                    }\r\n                }\r\n                await this.handleRoomUpdate(updatedRoom, RoomUpdateCause.Timeline);\r\n                this.updateFn.trigger();\r\n            };\r\n            if (!room) {\r\n                logger.warn(`Live timeline event ${eventPayload.event.getId()} received without associated room`);\r\n                logger.warn(`Queuing failed room update for retry as a result.`);\r\n                window.setTimeout(async (): Promise<void> => {\r\n                    const updatedRoom = this.matrixClient?.getRoom(roomId);\r\n\r\n                    if (updatedRoom) {\r\n                        await tryUpdate(updatedRoom);\r\n                    }\r\n                }, 100); // 100ms should be enough for the room to show up\r\n                return;\r\n            } else {\r\n                await tryUpdate(room);\r\n            }\r\n        } else if (payload.action === \"MatrixActions.Event.decrypted\") {\r\n            const eventPayload = <any>payload; // TODO: Type out the dispatcher types\r\n            const roomId = eventPayload.event.getRoomId();\r\n            if (!roomId) {\r\n                return;\r\n            }\r\n            const room = this.matrixClient.getRoom(roomId);\r\n            if (!room) {\r\n                logger.warn(`Event ${eventPayload.event.getId()} was decrypted in an unknown room ${roomId}`);\r\n                return;\r\n            }\r\n            await this.handleRoomUpdate(room, RoomUpdateCause.Timeline);\r\n            this.updateFn.trigger();\r\n        } else if (payload.action === \"MatrixActions.accountData\" && payload.event_type === EventType.Direct) {\r\n            const eventPayload = <any>payload; // TODO: Type out the dispatcher types\r\n            const dmMap = eventPayload.event.getContent();\r\n            for (const userId of Object.keys(dmMap)) {\r\n                const roomIds = dmMap[userId];\r\n                for (const roomId of roomIds) {\r\n                    const room = this.matrixClient.getRoom(roomId);\r\n                    if (!room) {\r\n                        logger.warn(`${roomId} was found in DMs but the room is not in the store`);\r\n                        continue;\r\n                    }\r\n\r\n                    // We expect this RoomUpdateCause to no-op if there's no change, and we don't expect\r\n                    // the user to have hundreds of rooms to update in one event. As such, we just hammer\r\n                    // away at updates until the problem is solved. If we were expecting more than a couple\r\n                    // of rooms to be updated at once, we would consider batching the rooms up.\r\n                    await this.handleRoomUpdate(room, RoomUpdateCause.PossibleTagChange);\r\n                }\r\n            }\r\n            this.updateFn.trigger();\r\n        } else if (payload.action === \"MatrixActions.Room.myMembership\") {\r\n            this.onDispatchMyMembership(<any>payload);\r\n            return;\r\n        }\r\n\r\n        const possibleMuteChangeRoomIds = getChangedOverrideRoomMutePushRules(payload);\r\n        if (possibleMuteChangeRoomIds) {\r\n            for (const roomId of possibleMuteChangeRoomIds) {\r\n                const room = roomId && this.matrixClient.getRoom(roomId);\r\n                if (room) {\r\n                    await this.handleRoomUpdate(room, RoomUpdateCause.PossibleMuteChange);\r\n                }\r\n            }\r\n            this.updateFn.trigger();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle a MatrixActions.Room.myMembership event from the dispatcher.\r\n     *\r\n     * Public for test.\r\n     */\r\n    public async onDispatchMyMembership(membershipPayload: any): Promise<void> {\r\n        // TODO: Type out the dispatcher types so membershipPayload is not any\r\n        const oldMembership = getEffectiveMembership(membershipPayload.oldMembership);\r\n        const newMembership = getEffectiveMembership(membershipPayload.membership);\r\n        if (oldMembership !== EffectiveMembership.Join && newMembership === EffectiveMembership.Join) {\r\n            // If we're joining an upgraded room, we'll want to make sure we don't proliferate\r\n            // the dead room in the list.\r\n            const roomState: RoomState = membershipPayload.room.currentState;\r\n            const predecessor = roomState.findPredecessor(this.msc3946ProcessDynamicPredecessor);\r\n            if (predecessor) {\r\n                const prevRoom = this.matrixClient?.getRoom(predecessor.roomId);\r\n                if (prevRoom) {\r\n                    const isSticky = this.algorithm.stickyRoom === prevRoom;\r\n                    if (isSticky) {\r\n                        this.algorithm.setStickyRoom(null);\r\n                    }\r\n\r\n                    // Note: we hit the algorithm instead of our handleRoomUpdate() function to\r\n                    // avoid redundant updates.\r\n                    this.algorithm.handleRoomUpdate(prevRoom, RoomUpdateCause.RoomRemoved);\r\n                } else {\r\n                    logger.warn(`Unable to find predecessor room with id ${predecessor.roomId}`);\r\n                }\r\n            }\r\n\r\n            await this.handleRoomUpdate(membershipPayload.room, RoomUpdateCause.NewRoom);\r\n            this.updateFn.trigger();\r\n            return;\r\n        }\r\n\r\n        if (oldMembership !== EffectiveMembership.Invite && newMembership === EffectiveMembership.Invite) {\r\n            await this.handleRoomUpdate(membershipPayload.room, RoomUpdateCause.NewRoom);\r\n            this.updateFn.trigger();\r\n            return;\r\n        }\r\n\r\n        // If it's not a join, it's transitioning into a different list (possibly historical)\r\n        if (oldMembership !== newMembership) {\r\n            await this.handleRoomUpdate(membershipPayload.room, RoomUpdateCause.PossibleTagChange);\r\n            this.updateFn.trigger();\r\n            return;\r\n        }\r\n    }\r\n\r\n    private async handleRoomUpdate(room: Room, cause: RoomUpdateCause): Promise<any> {\r\n        if (cause === RoomUpdateCause.NewRoom && room.getMyMembership() === \"invite\") {\r\n            // Let the visibility provider know that there is a new invited room. It would be nice\r\n            // if this could just be an event that things listen for but the point of this is that\r\n            // we delay doing anything about this room until the VoipUserMapper had had a chance\r\n            // to do the things it needs to do to decide if we should show this room or not, so\r\n            // an even wouldn't et us do that.\r\n            await VisibilityProvider.instance.onNewInvitedRoom(room);\r\n        }\r\n\r\n        if (!VisibilityProvider.instance.isRoomVisible(room)) {\r\n            return; // don't do anything on rooms that aren't visible\r\n        }\r\n\r\n        if (\r\n            (cause === RoomUpdateCause.NewRoom || cause === RoomUpdateCause.PossibleTagChange) &&\r\n            !this.prefilterConditions.every((c) => c.isVisible(room))\r\n        ) {\r\n            return; // don't do anything on new/moved rooms which ought not to be shown\r\n        }\r\n\r\n        const shouldUpdate = this.algorithm.handleRoomUpdate(room, cause);\r\n        if (shouldUpdate) {\r\n            this.updateFn.mark();\r\n        }\r\n    }\r\n\r\n    private async recalculatePrefiltering(): Promise<void> {\r\n        if (!this.algorithm) return;\r\n        if (!this.algorithm.hasTagSortingMap) return; // we're still loading\r\n\r\n        // Inhibit updates because we're about to lie heavily to the algorithm\r\n        this.algorithm.updatesInhibited = true;\r\n\r\n        // Figure out which rooms are about to be valid, and the state of affairs\r\n        const rooms = this.getPlausibleRooms();\r\n        const currentSticky = this.algorithm.stickyRoom;\r\n        const stickyIsStillPresent = currentSticky && rooms.includes(currentSticky);\r\n\r\n        // Reset the sticky room before resetting the known rooms so the algorithm\r\n        // doesn't freak out.\r\n        this.algorithm.setStickyRoom(null);\r\n        this.algorithm.setKnownRooms(rooms);\r\n\r\n        // Set the sticky room back, if needed, now that we have updated the store.\r\n        // This will use relative stickyness to the new room set.\r\n        if (stickyIsStillPresent) {\r\n            this.algorithm.setStickyRoom(currentSticky);\r\n        }\r\n\r\n        // Finally, mark an update and resume updates from the algorithm\r\n        this.updateFn.mark();\r\n        this.algorithm.updatesInhibited = false;\r\n    }\r\n\r\n    public setTagSorting(tagId: TagID, sort: SortAlgorithm): void {\r\n        this.setAndPersistTagSorting(tagId, sort);\r\n        this.updateFn.trigger();\r\n    }\r\n\r\n    private setAndPersistTagSorting(tagId: TagID, sort: SortAlgorithm): void {\r\n        this.algorithm.setTagSorting(tagId, sort);\r\n        // TODO: Per-account? https://github.com/vector-im/element-web/issues/14114\r\n        localStorage.setItem(`mx_tagSort_${tagId}`, sort);\r\n    }\r\n\r\n    public getTagSorting(tagId: TagID): SortAlgorithm | null {\r\n        return this.algorithm.getTagSorting(tagId);\r\n    }\r\n\r\n    // noinspection JSMethodCanBeStatic\r\n    private getStoredTagSorting(tagId: TagID): SortAlgorithm {\r\n        // TODO: Per-account? https://github.com/vector-im/element-web/issues/14114\r\n        return <SortAlgorithm>localStorage.getItem(`mx_tagSort_${tagId}`);\r\n    }\r\n\r\n    // logic must match calculateListOrder\r\n    private calculateTagSorting(tagId: TagID): SortAlgorithm {\r\n        const definedSort = this.getTagSorting(tagId);\r\n        const storedSort = this.getStoredTagSorting(tagId);\r\n\r\n        // We use the following order to determine which of the 4 flags to use:\r\n        // Stored > Settings > Defined > Default\r\n\r\n        let tagSort = SortAlgorithm.Recent;\r\n        if (storedSort) {\r\n            tagSort = storedSort;\r\n        } else if (definedSort) {\r\n            tagSort = definedSort;\r\n        } // else default (already set)\r\n\r\n        return tagSort;\r\n    }\r\n\r\n    public setListOrder(tagId: TagID, order: ListAlgorithm): void {\r\n        this.setAndPersistListOrder(tagId, order);\r\n        this.updateFn.trigger();\r\n    }\r\n\r\n    private setAndPersistListOrder(tagId: TagID, order: ListAlgorithm): void {\r\n        this.algorithm.setListOrdering(tagId, order);\r\n        // TODO: Per-account? https://github.com/vector-im/element-web/issues/14114\r\n        localStorage.setItem(`mx_listOrder_${tagId}`, order);\r\n    }\r\n\r\n    public getListOrder(tagId: TagID): ListAlgorithm | null {\r\n        return this.algorithm.getListOrdering(tagId);\r\n    }\r\n\r\n    // noinspection JSMethodCanBeStatic\r\n    private getStoredListOrder(tagId: TagID): ListAlgorithm {\r\n        // TODO: Per-account? https://github.com/vector-im/element-web/issues/14114\r\n        return <ListAlgorithm>localStorage.getItem(`mx_listOrder_${tagId}`);\r\n    }\r\n\r\n    // logic must match calculateTagSorting\r\n    private calculateListOrder(tagId: TagID): ListAlgorithm {\r\n        const defaultOrder = ListAlgorithm.Natural;\r\n        const definedOrder = this.getListOrder(tagId);\r\n        const storedOrder = this.getStoredListOrder(tagId);\r\n\r\n        // We use the following order to determine which of the 4 flags to use:\r\n        // Stored > Settings > Defined > Default\r\n\r\n        let listOrder = defaultOrder;\r\n        if (storedOrder) {\r\n            listOrder = storedOrder;\r\n        } else if (definedOrder) {\r\n            listOrder = definedOrder;\r\n        } // else default (already set)\r\n\r\n        return listOrder;\r\n    }\r\n\r\n    private updateAlgorithmInstances(): void {\r\n        // We'll require an update, so mark for one. Marking now also prevents the calls\r\n        // to setTagSorting and setListOrder from causing triggers.\r\n        this.updateFn.mark();\r\n\r\n        for (const tag of Object.keys(this.orderedLists)) {\r\n            const definedSort = this.getTagSorting(tag);\r\n            const definedOrder = this.getListOrder(tag);\r\n\r\n            const tagSort = this.calculateTagSorting(tag);\r\n            const listOrder = this.calculateListOrder(tag);\r\n\r\n            if (tagSort !== definedSort) {\r\n                this.setAndPersistTagSorting(tag, tagSort);\r\n            }\r\n            if (listOrder !== definedOrder) {\r\n                this.setAndPersistListOrder(tag, listOrder);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onAlgorithmListUpdated = (forceUpdate: boolean): void => {\r\n        this.updateFn.mark();\r\n        if (forceUpdate) this.updateFn.trigger();\r\n    };\r\n\r\n    private onAlgorithmFilterUpdated = (): void => {\r\n        // The filter can happen off-cycle, so trigger an update. The filter will have\r\n        // already caused a mark.\r\n        this.updateFn.trigger();\r\n    };\r\n\r\n    private onPrefilterUpdated = async (): Promise<void> => {\r\n        await this.recalculatePrefiltering();\r\n        this.updateFn.trigger();\r\n    };\r\n\r\n    private getPlausibleRooms(): Room[] {\r\n        if (!this.matrixClient) return [];\r\n\r\n        let rooms = this.matrixClient.getVisibleRooms(this.msc3946ProcessDynamicPredecessor);\r\n        rooms = rooms.filter((r) => VisibilityProvider.instance.isRoomVisible(r));\r\n\r\n        if (this.prefilterConditions.length > 0) {\r\n            rooms = rooms.filter((r) => {\r\n                for (const filter of this.prefilterConditions) {\r\n                    if (!filter.isVisible(r)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n\r\n        return rooms;\r\n    }\r\n\r\n    /**\r\n     * Regenerates the room whole room list, discarding any previous results.\r\n     *\r\n     * Note: This is only exposed externally for the tests. Do not call this from within\r\n     * the app.\r\n     * @param trigger Set to false to prevent a list update from being sent. Should only\r\n     * be used if the calling code will manually trigger the update.\r\n     */\r\n    public regenerateAllLists({ trigger = true }): void {\r\n        logger.warn(\"Regenerating all room lists\");\r\n\r\n        const rooms = this.getPlausibleRooms();\r\n\r\n        const sorts: ITagSortingMap = {};\r\n        const orders: IListOrderingMap = {};\r\n        const allTags = [...OrderedDefaultTagIDs];\r\n        for (const tagId of allTags) {\r\n            sorts[tagId] = this.calculateTagSorting(tagId);\r\n            orders[tagId] = this.calculateListOrder(tagId);\r\n\r\n            RoomListLayoutStore.instance.ensureLayoutExists(tagId);\r\n        }\r\n\r\n        this.algorithm.populateTags(sorts, orders);\r\n        this.algorithm.setKnownRooms(rooms);\r\n\r\n        this.initialListsGenerated = true;\r\n\r\n        if (trigger) this.updateFn.trigger();\r\n    }\r\n\r\n    /**\r\n     * Adds a filter condition to the room list store. Filters may be applied async,\r\n     * and thus might not cause an update to the store immediately.\r\n     * @param {IFilterCondition} filter The filter condition to add.\r\n     */\r\n    public async addFilter(filter: IFilterCondition): Promise<void> {\r\n        let promise = Promise.resolve();\r\n        filter.on(FILTER_CHANGED, this.onPrefilterUpdated);\r\n        this.prefilterConditions.push(filter);\r\n        promise = this.recalculatePrefiltering();\r\n        promise.then(() => this.updateFn.trigger());\r\n    }\r\n\r\n    /**\r\n     * Removes a filter condition from the room list store. If the filter was\r\n     * not previously added to the room list store, this will no-op. The effects\r\n     * of removing a filter may be applied async and therefore might not cause\r\n     * an update right away.\r\n     * @param {IFilterCondition} filter The filter condition to remove.\r\n     */\r\n    public removeFilter(filter: IFilterCondition): void {\r\n        let promise = Promise.resolve();\r\n        let removed = false;\r\n        const idx = this.prefilterConditions.indexOf(filter);\r\n        if (idx >= 0) {\r\n            filter.off(FILTER_CHANGED, this.onPrefilterUpdated);\r\n            this.prefilterConditions.splice(idx, 1);\r\n            promise = this.recalculatePrefiltering();\r\n            removed = true;\r\n        }\r\n\r\n        if (removed) {\r\n            promise.then(() => this.updateFn.trigger());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the tags for a room identified by the store. The returned set\r\n     * should never be empty, and will contain DefaultTagID.Untagged if\r\n     * the store is not aware of any tags.\r\n     * @param room The room to get the tags for.\r\n     * @returns The tags for the room.\r\n     */\r\n    public getTagsForRoom(room: Room): TagID[] {\r\n        const algorithmTags = this.algorithm.getTagsForRoom(room);\r\n        if (!algorithmTags) return [DefaultTagID.Untagged];\r\n        return algorithmTags;\r\n    }\r\n\r\n    public getCount(tagId: TagID): number {\r\n        // The room list store knows about all the rooms, so just return the length.\r\n        return this.orderedLists[tagId].length || 0;\r\n    }\r\n\r\n    /**\r\n     * Manually update a room with a given cause. This should only be used if the\r\n     * room list store would otherwise be incapable of doing the update itself. Note\r\n     * that this may race with the room list's regular operation.\r\n     * @param {Room} room The room to update.\r\n     * @param {RoomUpdateCause} cause The cause to update for.\r\n     */\r\n    public async manualRoomUpdate(room: Room, cause: RoomUpdateCause): Promise<void> {\r\n        await this.handleRoomUpdate(room, cause);\r\n        this.updateFn.trigger();\r\n    }\r\n}\r\n\r\nexport default class RoomListStore {\r\n    private static internalInstance: Interface;\r\n\r\n    public static get instance(): Interface {\r\n        if (!RoomListStore.internalInstance) {\r\n            if (SettingsStore.getValue(\"feature_sliding_sync\")) {\r\n                logger.info(\"using SlidingRoomListStoreClass\");\r\n                const instance = new SlidingRoomListStoreClass(defaultDispatcher, SdkContextClass.instance);\r\n                instance.start();\r\n                RoomListStore.internalInstance = instance;\r\n            } else {\r\n                const instance = new RoomListStoreClass(defaultDispatcher);\r\n                instance.start();\r\n                RoomListStore.internalInstance = instance;\r\n            }\r\n        }\r\n\r\n        return this.internalInstance;\r\n    }\r\n}\r\n\r\nwindow.mxRoomListStore = RoomListStore.instance;\r\n"],"mappings":";;;;;;;;AAkBA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AAGA,IAAAE,cAAA,GAAAC,sBAAA,CAAAH,OAAA;AACA,IAAAI,OAAA,GAAAJ,OAAA;AACA,IAAAK,QAAA,GAAAL,OAAA;AAEA,IAAAM,WAAA,GAAAH,sBAAA,CAAAH,OAAA;AACA,IAAAO,aAAA,GAAAP,OAAA;AACA,IAAAQ,iBAAA,GAAAR,OAAA;AACA,IAAAS,UAAA,GAAAT,OAAA;AACA,IAAAU,WAAA,GAAAV,OAAA;AACA,IAAAW,oBAAA,GAAAR,sBAAA,CAAAH,OAAA;AACA,IAAAY,gBAAA,GAAAZ,OAAA;AACA,IAAAa,qBAAA,GAAAb,OAAA;AACA,IAAAc,2BAAA,GAAAd,OAAA;AACA,IAAAe,mBAAA,GAAAf,OAAA;AACA,IAAAgB,aAAA,GAAAhB,OAAA;AAEA,IAAAiB,UAAA,GAAAjB,OAAA;AACA,IAAAkB,qBAAA,GAAAlB,OAAA;AACA,IAAAmB,WAAA,GAAAnB,OAAA;AACA,IAAAoB,WAAA,GAAApB,OAAA;AACA,IAAAqB,SAAA,GAAArB,OAAA;AA1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAkCO,MAAMsB,kBAAkB,GAAGC,6BAAkB,CAACC,WAAW;AAACC,OAAA,CAAAH,kBAAA,GAAAA,kBAAA;AAC1D,MAAMI,mBAAmB,GAAGH,6BAAkB,CAACI,YAAY,CAAC,CAAC;AAAAF,OAAA,CAAAC,mBAAA,GAAAA,mBAAA;AAE7D,MAAME,kBAAkB,SAASC,0CAAoB,CAA8B;EAmB/EC,WAAWA,CAACC,GAAqB,EAAE;IACtC,KAAK,CAACA,GAAG,CAAC;IAAC,IAAAC,gBAAA,CAAAC,OAAA,iCAbiB,KAAK;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA,qBAGjB,IAAIC,oBAAS,CAAC,CAAC;IAAA,IAAAF,gBAAA,CAAAC,OAAA,+BACe,EAAE;IAAA,IAAAD,gBAAA,CAAAC,OAAA,oBACjC,IAAIE,gCAAe,CAAC,MAAM;MACzC,KAAK,MAAMC,KAAK,IAAIC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACC,YAAY,CAAC,EAAE;QAChDC,sDAA0B,CAACC,QAAQ,CAACC,YAAY,CAACN,KAAK,CAAC,CAACO,QAAQ,CAAC,IAAI,CAACJ,YAAY,CAACH,KAAK,CAAC,CAAC;MAC9F;MACA,IAAI,CAACQ,IAAI,CAACtB,kBAAkB,CAAC;IACjC,CAAC,CAAC;IAAA,IAAAU,gBAAA,CAAAC,OAAA,kCAybgCY,WAAoB,IAAW;MAC7D,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAC,CAAC;MACpB,IAAIF,WAAW,EAAE,IAAI,CAACC,QAAQ,CAACE,OAAO,CAAC,CAAC;IAC5C,CAAC;IAAA,IAAAhB,gBAAA,CAAAC,OAAA,oCAEkC,MAAY;MAC3C;MACA;MACA,IAAI,CAACa,QAAQ,CAACE,OAAO,CAAC,CAAC;IAC3B,CAAC;IAAA,IAAAhB,gBAAA,CAAAC,OAAA,8BAE4B,YAA2B;MACpD,MAAM,IAAI,CAACgB,uBAAuB,CAAC,CAAC;MACpC,IAAI,CAACH,QAAQ,CAACE,OAAO,CAAC,CAAC;IAC3B,CAAC;IAncG,IAAI,CAACE,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1B,IAAI,CAACC,SAAS,CAACC,KAAK,CAAC,CAAC;IAEtB,IAAI,CAACC,gCAAgC,GAAGC,sBAAa,CAACC,QAAQ,CAAC,mCAAmC,CAAC;IACnG,IAAI,CAACC,wBAAwB,GAAGF,sBAAa,CAACG,YAAY,CACtD,mCAAmC,EACnC,IAAI,EACJ,CAACC,YAAY,EAAEC,OAAO,EAAEC,MAAM,EAAEC,cAAc,EAAEC,MAAM,KAAK;MACvD,IAAI,CAACT,gCAAgC,GAAGS,MAAM;MAC9C,IAAI,CAACC,kBAAkB,CAAC;QAAEf,OAAO,EAAE;MAAK,CAAC,CAAC;IAC9C,CACJ,CAAC;EACL;EAEOgB,oBAAoBA,CAAA,EAAS;IAChCV,sBAAa,CAACW,cAAc,CAAC,IAAI,CAACT,wBAAwB,CAAC;EAC/D;EAEQU,aAAaA,CAAA,EAAS;IAC1B;IACA,IAAIC,0BAAY,CAAC,IAAI,CAAC;EAC1B;EAEA,IAAW5B,YAAYA,CAAA,EAAY;IAC/B,IAAI,CAAC,IAAI,CAACY,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;IAChC,OAAO,IAAI,CAACA,SAAS,CAACiB,eAAe,CAAC,CAAC;EAC3C;;EAEA;EACA,MAAaC,UAAUA,CAAA,EAAkB;IACrC,MAAM,IAAI,CAACC,KAAK,CAAC,CAAC;IAClB,IAAI,CAACC,mBAAmB,GAAG,EAAE;IAC7B,IAAI,CAACC,qBAAqB,GAAG,KAAK;IAElC,IAAI,CAACrB,SAAS,CAACsB,GAAG,CAACC,6BAAkB,EAAE,IAAI,CAACC,sBAAsB,CAAC;IACnE,IAAI,CAACxB,SAAS,CAACsB,GAAG,CAACG,gCAAc,EAAE,IAAI,CAACD,sBAAsB,CAAC;IAC/D,IAAI,CAACxB,SAAS,CAAC0B,IAAI,CAAC,CAAC;IACrB,IAAI,CAAC1B,SAAS,GAAG,IAAIjB,oBAAS,CAAC,CAAC;IAChC,IAAI,CAACiB,SAAS,CAAC2B,EAAE,CAACJ,6BAAkB,EAAE,IAAI,CAACC,sBAAsB,CAAC;IAClE,IAAI,CAACxB,SAAS,CAAC2B,EAAE,CAACF,gCAAc,EAAE,IAAI,CAACD,sBAAsB,CAAC;;IAE9D;IACA;IACA,MAAM,IAAI,CAACL,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;EAChC;;EAEA;EACA,MAAaS,SAASA,CAACC,YAA2B,EAAiB;IAC/D,IAAIA,YAAY,EAAE;MACd,IAAI,CAACC,UAAU,CAACC,iBAAiB,CAACF,YAAY,CAAC;IACnD;IAEAG,2BAAe,CAAC1C,QAAQ,CAAC2C,aAAa,CAACC,WAAW,CAACC,wBAAY,EAAE,MAAM,IAAI,CAACC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;IAChG,IAAI,CAACpC,SAAS,CAAC2B,EAAE,CAACJ,6BAAkB,EAAE,IAAI,CAACC,sBAAsB,CAAC;IAClE,IAAI,CAACxB,SAAS,CAAC2B,EAAE,CAACF,gCAAc,EAAE,IAAI,CAACY,wBAAwB,CAAC;IAChE,IAAI,CAACtB,aAAa,CAAC,CAAC;;IAEpB;IACAuB,cAAM,CAACC,GAAG,CAAC,kCAAkC,CAAC;IAC9C,IAAI,CAACC,wBAAwB,CAAC,CAAC;IAC/B,IAAI,CAAC5B,kBAAkB,CAAC;MAAEf,OAAO,EAAE;IAAM,CAAC,CAAC;IAC3C,IAAI,CAACuC,eAAe,CAAC;MAAEvC,OAAO,EAAE;IAAM,CAAC,CAAC,CAAC,CAAC;;IAE1C,IAAI,CAACF,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtB,IAAI,CAACD,QAAQ,CAACE,OAAO,CAAC,CAAC;EAC3B;;EAEA;AACJ;AACA;AACA;AACA;EACYuC,eAAeA,CAAAK,IAAA,EAA2B;IAAA,IAA1B;MAAE5C,OAAO,GAAG;IAAK,CAAC,GAAA4C,IAAA;IACtC,IAAI,CAAC,IAAI,CAACC,YAAY,EAAE,OAAO,CAAC;;IAEhC,MAAMC,YAAY,GAAGX,2BAAe,CAAC1C,QAAQ,CAAC2C,aAAa,CAACW,SAAS,CAAC,CAAC;IACvE,IAAI,CAACD,YAAY,IAAI,IAAI,CAAC3C,SAAS,CAAC6C,UAAU,EAAE;MAC5C,IAAI,CAAC7C,SAAS,CAAC8C,aAAa,CAAC,IAAI,CAAC;IACtC,CAAC,MAAM,IAAIH,YAAY,EAAE;MACrB,MAAMI,UAAU,GAAG,IAAI,CAACL,YAAY,CAACM,OAAO,CAACL,YAAY,CAAC;MAC1D,IAAI,CAACI,UAAU,EAAE;QACbT,cAAM,CAACW,IAAI,CAAE,GAAEN,YAAa,mEAAkE,CAAC;QAC/F,IAAI,CAAC3C,SAAS,CAAC8C,aAAa,CAAC,IAAI,CAAC;MACtC,CAAC,MAAM,IAAIC,UAAU,KAAK,IAAI,CAAC/C,SAAS,CAAC6C,UAAU,EAAE;QACjD,IAAI,CAAC7C,SAAS,CAAC8C,aAAa,CAACC,UAAU,CAAC;MAC5C;IACJ;IAEA,IAAIlD,OAAO,EAAE,IAAI,CAACF,QAAQ,CAACE,OAAO,CAAC,CAAC;EACxC;EAEA,MAAgBqD,OAAOA,CAAA,EAAiB;IACpC,MAAM,IAAI,CAACtB,SAAS,CAAC,CAAC;EAC1B;EAEA,MAAgBuB,UAAUA,CAAA,EAAiB;IACvC,MAAM,IAAI,CAACjC,UAAU,CAAC,CAAC;EAC3B;EAEA,MAAgBkC,QAAQA,CAACC,OAAsB,EAAiB;IAC5D;IACA;IACA;IACA,MAAMC,cAAc,GAAG,IAAI,CAACZ,YAAY,IAAI,IAAI,CAACrB,qBAAqB;IACtE,IAAI,CAACiC,cAAc,EAAE;;IAErB;IACA;IACA,IAAI7E,kBAAkB,CAAC8E,SAAS,EAAE;MAC9B,MAAM,IAAI,CAACC,eAAe,CAACH,OAAO,CAAC;MACnC;IACJ;;IAEA;IACA;IACAI,YAAY,CAAC,MAAM,IAAI,CAACD,eAAe,CAACH,OAAO,CAAC,CAAC;EACrD;EAEA,MAAgBG,eAAeA,CAACH,OAAsB,EAAiB;IACnE;IACA,IAAI,CAAC,IAAI,CAACX,YAAY,IAAI,CAAC,IAAI,CAACrB,qBAAqB,EAAE;IAEvD,IAAI,CAAC,IAAI,CAACrB,SAAS,EAAE;MACjB;MACA,MAAM,IAAI0D,KAAK,CAAC,oEAAoE,CAAC;IACzF;IAEA,IAAIL,OAAO,CAACM,MAAM,KAAK,4BAA4B,EAAE;MACjD;MACA;MACA,IAAI,IAAAC,oCAAsB,EAACP,OAAO,CAACQ,KAAK,EAAE,IAAI,CAACnB,YAAY,CAAC,EAAE;QAC1D,MAAMoB,IAAI,GAAGT,OAAO,CAACS,IAAI;QACzB,IAAI,CAACA,IAAI,EAAE;UACPxB,cAAM,CAACW,IAAI,CAAE,wCAAuCa,IAAI,CAACC,MAAO,EAAC,CAAC;UAClE;QACJ;QACA,MAAM,IAAI,CAACC,gBAAgB,CAACF,IAAI,EAAEG,uBAAe,CAACC,WAAW,CAAC;QAC9D,IAAI,CAACvE,QAAQ,CAACE,OAAO,CAAC,CAAC;QACvB;MACJ;IACJ,CAAC,MAAM,IAAIwD,OAAO,CAACM,MAAM,KAAK,yBAAyB,EAAE;MACrD,MAAMQ,WAAW,GAAQd,OAAO,CAAC,CAAC;MAClC,MAAM,IAAI,CAACW,gBAAgB,CAACG,WAAW,CAACL,IAAI,EAAEG,uBAAe,CAACG,iBAAiB,CAAC;MAChF,IAAI,CAACzE,QAAQ,CAACE,OAAO,CAAC,CAAC;IAC3B,CAAC,MAAM,IAAIwD,OAAO,CAACM,MAAM,KAAK,6BAA6B,EAAE;MACzD,MAAMU,YAAY,GAA+BhB,OAAO;;MAExD;MACA,IAAI,CAACgB,YAAY,CAACC,WAAW,IAAI,CAACD,YAAY,CAACE,iCAAiC,IAAI,CAACF,YAAY,CAACP,IAAI,EAAE;QACpG;MACJ;MAEA,MAAMC,MAAM,GAAGM,YAAY,CAACR,KAAK,CAACjB,SAAS,CAAC,CAAC;MAC7C,MAAMkB,IAAI,GAAG,IAAI,CAACpB,YAAY,CAACM,OAAO,CAACe,MAAM,CAAC;MAC9C,MAAMS,SAAS,GAAG,MAAOC,WAAiB,IAAoB;QAC1D,IACIJ,YAAY,CAACR,KAAK,CAACa,OAAO,CAAC,CAAC,KAAKC,gBAAS,CAACC,aAAa,IACxDP,YAAY,CAACR,KAAK,CAACgB,WAAW,CAAC,CAAC,KAAK,EAAE,EACzC;UACE,MAAMC,OAAO,GAAG,IAAI,CAACpC,YAAY,EAAEM,OAAO,CAACqB,YAAY,CAACR,KAAK,CAACkB,UAAU,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC;UAC/F,IAAID,OAAO,EAAE;YACT;YACA;YACA;UACJ;QACJ;QACA,MAAM,IAAI,CAACd,gBAAgB,CAACS,WAAW,EAAER,uBAAe,CAACe,QAAQ,CAAC;QAClE,IAAI,CAACrF,QAAQ,CAACE,OAAO,CAAC,CAAC;MAC3B,CAAC;MACD,IAAI,CAACiE,IAAI,EAAE;QACPxB,cAAM,CAACW,IAAI,CAAE,uBAAsBoB,YAAY,CAACR,KAAK,CAACoB,KAAK,CAAC,CAAE,mCAAkC,CAAC;QACjG3C,cAAM,CAACW,IAAI,CAAE,mDAAkD,CAAC;QAChEiC,MAAM,CAACC,UAAU,CAAC,YAA2B;UACzC,MAAMV,WAAW,GAAG,IAAI,CAAC/B,YAAY,EAAEM,OAAO,CAACe,MAAM,CAAC;UAEtD,IAAIU,WAAW,EAAE;YACb,MAAMD,SAAS,CAACC,WAAW,CAAC;UAChC;QACJ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;QACT;MACJ,CAAC,MAAM;QACH,MAAMD,SAAS,CAACV,IAAI,CAAC;MACzB;IACJ,CAAC,MAAM,IAAIT,OAAO,CAACM,MAAM,KAAK,+BAA+B,EAAE;MAC3D,MAAMU,YAAY,GAAQhB,OAAO,CAAC,CAAC;MACnC,MAAMU,MAAM,GAAGM,YAAY,CAACR,KAAK,CAACjB,SAAS,CAAC,CAAC;MAC7C,IAAI,CAACmB,MAAM,EAAE;QACT;MACJ;MACA,MAAMD,IAAI,GAAG,IAAI,CAACpB,YAAY,CAACM,OAAO,CAACe,MAAM,CAAC;MAC9C,IAAI,CAACD,IAAI,EAAE;QACPxB,cAAM,CAACW,IAAI,CAAE,SAAQoB,YAAY,CAACR,KAAK,CAACoB,KAAK,CAAC,CAAE,qCAAoClB,MAAO,EAAC,CAAC;QAC7F;MACJ;MACA,MAAM,IAAI,CAACC,gBAAgB,CAACF,IAAI,EAAEG,uBAAe,CAACe,QAAQ,CAAC;MAC3D,IAAI,CAACrF,QAAQ,CAACE,OAAO,CAAC,CAAC;IAC3B,CAAC,MAAM,IAAIwD,OAAO,CAACM,MAAM,KAAK,2BAA2B,IAAIN,OAAO,CAAC+B,UAAU,KAAKT,gBAAS,CAACU,MAAM,EAAE;MAClG,MAAMhB,YAAY,GAAQhB,OAAO,CAAC,CAAC;MACnC,MAAMiC,KAAK,GAAGjB,YAAY,CAACR,KAAK,CAACkB,UAAU,CAAC,CAAC;MAC7C,KAAK,MAAMQ,MAAM,IAAIrG,MAAM,CAACC,IAAI,CAACmG,KAAK,CAAC,EAAE;QACrC,MAAME,OAAO,GAAGF,KAAK,CAACC,MAAM,CAAC;QAC7B,KAAK,MAAMxB,MAAM,IAAIyB,OAAO,EAAE;UAC1B,MAAM1B,IAAI,GAAG,IAAI,CAACpB,YAAY,CAACM,OAAO,CAACe,MAAM,CAAC;UAC9C,IAAI,CAACD,IAAI,EAAE;YACPxB,cAAM,CAACW,IAAI,CAAE,GAAEc,MAAO,oDAAmD,CAAC;YAC1E;UACJ;;UAEA;UACA;UACA;UACA;UACA,MAAM,IAAI,CAACC,gBAAgB,CAACF,IAAI,EAAEG,uBAAe,CAACG,iBAAiB,CAAC;QACxE;MACJ;MACA,IAAI,CAACzE,QAAQ,CAACE,OAAO,CAAC,CAAC;IAC3B,CAAC,MAAM,IAAIwD,OAAO,CAACM,MAAM,KAAK,iCAAiC,EAAE;MAC7D,IAAI,CAAC8B,sBAAsB,CAAMpC,OAAO,CAAC;MACzC;IACJ;IAEA,MAAMqC,yBAAyB,GAAG,IAAAC,6CAAmC,EAACtC,OAAO,CAAC;IAC9E,IAAIqC,yBAAyB,EAAE;MAC3B,KAAK,MAAM3B,MAAM,IAAI2B,yBAAyB,EAAE;QAC5C,MAAM5B,IAAI,GAAGC,MAAM,IAAI,IAAI,CAACrB,YAAY,CAACM,OAAO,CAACe,MAAM,CAAC;QACxD,IAAID,IAAI,EAAE;UACN,MAAM,IAAI,CAACE,gBAAgB,CAACF,IAAI,EAAEG,uBAAe,CAAC2B,kBAAkB,CAAC;QACzE;MACJ;MACA,IAAI,CAACjG,QAAQ,CAACE,OAAO,CAAC,CAAC;IAC3B;EACJ;;EAEA;AACJ;AACA;AACA;AACA;EACI,MAAa4F,sBAAsBA,CAACI,iBAAsB,EAAiB;IACvE;IACA,MAAMC,aAAa,GAAG,IAAAC,kCAAsB,EAACF,iBAAiB,CAACC,aAAa,CAAC;IAC7E,MAAME,aAAa,GAAG,IAAAD,kCAAsB,EAACF,iBAAiB,CAACI,UAAU,CAAC;IAC1E,IAAIH,aAAa,KAAKI,+BAAmB,CAACC,IAAI,IAAIH,aAAa,KAAKE,+BAAmB,CAACC,IAAI,EAAE;MAC1F;MACA;MACA,MAAMC,SAAoB,GAAGP,iBAAiB,CAAC/B,IAAI,CAACuC,YAAY;MAChE,MAAMC,WAAW,GAAGF,SAAS,CAACG,eAAe,CAAC,IAAI,CAACrG,gCAAgC,CAAC;MACpF,IAAIoG,WAAW,EAAE;QACb,MAAME,QAAQ,GAAG,IAAI,CAAC9D,YAAY,EAAEM,OAAO,CAACsD,WAAW,CAACvC,MAAM,CAAC;QAC/D,IAAIyC,QAAQ,EAAE;UACV,MAAMC,QAAQ,GAAG,IAAI,CAACzG,SAAS,CAAC6C,UAAU,KAAK2D,QAAQ;UACvD,IAAIC,QAAQ,EAAE;YACV,IAAI,CAACzG,SAAS,CAAC8C,aAAa,CAAC,IAAI,CAAC;UACtC;;UAEA;UACA;UACA,IAAI,CAAC9C,SAAS,CAACgE,gBAAgB,CAACwC,QAAQ,EAAEvC,uBAAe,CAACyC,WAAW,CAAC;QAC1E,CAAC,MAAM;UACHpE,cAAM,CAACW,IAAI,CAAE,2CAA0CqD,WAAW,CAACvC,MAAO,EAAC,CAAC;QAChF;MACJ;MAEA,MAAM,IAAI,CAACC,gBAAgB,CAAC6B,iBAAiB,CAAC/B,IAAI,EAAEG,uBAAe,CAAC0C,OAAO,CAAC;MAC5E,IAAI,CAAChH,QAAQ,CAACE,OAAO,CAAC,CAAC;MACvB;IACJ;IAEA,IAAIiG,aAAa,KAAKI,+BAAmB,CAACU,MAAM,IAAIZ,aAAa,KAAKE,+BAAmB,CAACU,MAAM,EAAE;MAC9F,MAAM,IAAI,CAAC5C,gBAAgB,CAAC6B,iBAAiB,CAAC/B,IAAI,EAAEG,uBAAe,CAAC0C,OAAO,CAAC;MAC5E,IAAI,CAAChH,QAAQ,CAACE,OAAO,CAAC,CAAC;MACvB;IACJ;;IAEA;IACA,IAAIiG,aAAa,KAAKE,aAAa,EAAE;MACjC,MAAM,IAAI,CAAChC,gBAAgB,CAAC6B,iBAAiB,CAAC/B,IAAI,EAAEG,uBAAe,CAACG,iBAAiB,CAAC;MACtF,IAAI,CAACzE,QAAQ,CAACE,OAAO,CAAC,CAAC;MACvB;IACJ;EACJ;EAEA,MAAcmE,gBAAgBA,CAACF,IAAU,EAAE+C,KAAsB,EAAgB;IAC7E,IAAIA,KAAK,KAAK5C,uBAAe,CAAC0C,OAAO,IAAI7C,IAAI,CAACgD,eAAe,CAAC,CAAC,KAAK,QAAQ,EAAE;MAC1E;MACA;MACA;MACA;MACA;MACA,MAAMC,sCAAkB,CAACzH,QAAQ,CAAC0H,gBAAgB,CAAClD,IAAI,CAAC;IAC5D;IAEA,IAAI,CAACiD,sCAAkB,CAACzH,QAAQ,CAAC2H,aAAa,CAACnD,IAAI,CAAC,EAAE;MAClD,OAAO,CAAC;IACZ;;IAEA,IACI,CAAC+C,KAAK,KAAK5C,uBAAe,CAAC0C,OAAO,IAAIE,KAAK,KAAK5C,uBAAe,CAACG,iBAAiB,KACjF,CAAC,IAAI,CAAChD,mBAAmB,CAAC8F,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAACC,SAAS,CAACtD,IAAI,CAAC,CAAC,EAC3D;MACE,OAAO,CAAC;IACZ;;IAEA,MAAMuD,YAAY,GAAG,IAAI,CAACrH,SAAS,CAACgE,gBAAgB,CAACF,IAAI,EAAE+C,KAAK,CAAC;IACjE,IAAIQ,YAAY,EAAE;MACd,IAAI,CAAC1H,QAAQ,CAACC,IAAI,CAAC,CAAC;IACxB;EACJ;EAEA,MAAcE,uBAAuBA,CAAA,EAAkB;IACnD,IAAI,CAAC,IAAI,CAACE,SAAS,EAAE;IACrB,IAAI,CAAC,IAAI,CAACA,SAAS,CAACsH,gBAAgB,EAAE,OAAO,CAAC;;IAE9C;IACA,IAAI,CAACtH,SAAS,CAACuH,gBAAgB,GAAG,IAAI;;IAEtC;IACA,MAAMC,KAAK,GAAG,IAAI,CAACC,iBAAiB,CAAC,CAAC;IACtC,MAAMC,aAAa,GAAG,IAAI,CAAC1H,SAAS,CAAC6C,UAAU;IAC/C,MAAM8E,oBAAoB,GAAGD,aAAa,IAAIF,KAAK,CAACI,QAAQ,CAACF,aAAa,CAAC;;IAE3E;IACA;IACA,IAAI,CAAC1H,SAAS,CAAC8C,aAAa,CAAC,IAAI,CAAC;IAClC,IAAI,CAAC9C,SAAS,CAAC6H,aAAa,CAACL,KAAK,CAAC;;IAEnC;IACA;IACA,IAAIG,oBAAoB,EAAE;MACtB,IAAI,CAAC3H,SAAS,CAAC8C,aAAa,CAAC4E,aAAa,CAAC;IAC/C;;IAEA;IACA,IAAI,CAAC/H,QAAQ,CAACC,IAAI,CAAC,CAAC;IACpB,IAAI,CAACI,SAAS,CAACuH,gBAAgB,GAAG,KAAK;EAC3C;EAEOO,aAAaA,CAAC7I,KAAY,EAAE8I,IAAmB,EAAQ;IAC1D,IAAI,CAACC,uBAAuB,CAAC/I,KAAK,EAAE8I,IAAI,CAAC;IACzC,IAAI,CAACpI,QAAQ,CAACE,OAAO,CAAC,CAAC;EAC3B;EAEQmI,uBAAuBA,CAAC/I,KAAY,EAAE8I,IAAmB,EAAQ;IACrE,IAAI,CAAC/H,SAAS,CAAC8H,aAAa,CAAC7I,KAAK,EAAE8I,IAAI,CAAC;IACzC;IACAE,YAAY,CAACC,OAAO,CAAE,cAAajJ,KAAM,EAAC,EAAE8I,IAAI,CAAC;EACrD;EAEOI,aAAaA,CAAClJ,KAAY,EAAwB;IACrD,OAAO,IAAI,CAACe,SAAS,CAACmI,aAAa,CAAClJ,KAAK,CAAC;EAC9C;;EAEA;EACQmJ,mBAAmBA,CAACnJ,KAAY,EAAiB;IACrD;IACA,OAAsBgJ,YAAY,CAACI,OAAO,CAAE,cAAapJ,KAAM,EAAC,CAAC;EACrE;;EAEA;EACQqJ,mBAAmBA,CAACrJ,KAAY,EAAiB;IACrD,MAAMsJ,WAAW,GAAG,IAAI,CAACJ,aAAa,CAAClJ,KAAK,CAAC;IAC7C,MAAMuJ,UAAU,GAAG,IAAI,CAACJ,mBAAmB,CAACnJ,KAAK,CAAC;;IAElD;IACA;;IAEA,IAAIwJ,OAAO,GAAGC,sBAAa,CAACC,MAAM;IAClC,IAAIH,UAAU,EAAE;MACZC,OAAO,GAAGD,UAAU;IACxB,CAAC,MAAM,IAAID,WAAW,EAAE;MACpBE,OAAO,GAAGF,WAAW;IACzB,CAAC,CAAC;;IAEF,OAAOE,OAAO;EAClB;EAEOG,YAAYA,CAAC3J,KAAY,EAAE4J,KAAoB,EAAQ;IAC1D,IAAI,CAACC,sBAAsB,CAAC7J,KAAK,EAAE4J,KAAK,CAAC;IACzC,IAAI,CAAClJ,QAAQ,CAACE,OAAO,CAAC,CAAC;EAC3B;EAEQiJ,sBAAsBA,CAAC7J,KAAY,EAAE4J,KAAoB,EAAQ;IACrE,IAAI,CAAC7I,SAAS,CAAC+I,eAAe,CAAC9J,KAAK,EAAE4J,KAAK,CAAC;IAC5C;IACAZ,YAAY,CAACC,OAAO,CAAE,gBAAejJ,KAAM,EAAC,EAAE4J,KAAK,CAAC;EACxD;EAEOG,YAAYA,CAAC/J,KAAY,EAAwB;IACpD,OAAO,IAAI,CAACe,SAAS,CAACiJ,eAAe,CAAChK,KAAK,CAAC;EAChD;;EAEA;EACQiK,kBAAkBA,CAACjK,KAAY,EAAiB;IACpD;IACA,OAAsBgJ,YAAY,CAACI,OAAO,CAAE,gBAAepJ,KAAM,EAAC,CAAC;EACvE;;EAEA;EACQkK,kBAAkBA,CAAClK,KAAY,EAAiB;IACpD,MAAMmK,YAAY,GAAGC,sBAAa,CAACC,OAAO;IAC1C,MAAMC,YAAY,GAAG,IAAI,CAACP,YAAY,CAAC/J,KAAK,CAAC;IAC7C,MAAMuK,WAAW,GAAG,IAAI,CAACN,kBAAkB,CAACjK,KAAK,CAAC;;IAElD;IACA;;IAEA,IAAIwK,SAAS,GAAGL,YAAY;IAC5B,IAAII,WAAW,EAAE;MACbC,SAAS,GAAGD,WAAW;IAC3B,CAAC,MAAM,IAAID,YAAY,EAAE;MACrBE,SAAS,GAAGF,YAAY;IAC5B,CAAC,CAAC;;IAEF,OAAOE,SAAS;EACpB;EAEQjH,wBAAwBA,CAAA,EAAS;IACrC;IACA;IACA,IAAI,CAAC7C,QAAQ,CAACC,IAAI,CAAC,CAAC;IAEpB,KAAK,MAAM8J,GAAG,IAAIxK,MAAM,CAACC,IAAI,CAAC,IAAI,CAACC,YAAY,CAAC,EAAE;MAC9C,MAAMmJ,WAAW,GAAG,IAAI,CAACJ,aAAa,CAACuB,GAAG,CAAC;MAC3C,MAAMH,YAAY,GAAG,IAAI,CAACP,YAAY,CAACU,GAAG,CAAC;MAE3C,MAAMjB,OAAO,GAAG,IAAI,CAACH,mBAAmB,CAACoB,GAAG,CAAC;MAC7C,MAAMD,SAAS,GAAG,IAAI,CAACN,kBAAkB,CAACO,GAAG,CAAC;MAE9C,IAAIjB,OAAO,KAAKF,WAAW,EAAE;QACzB,IAAI,CAACP,uBAAuB,CAAC0B,GAAG,EAAEjB,OAAO,CAAC;MAC9C;MACA,IAAIgB,SAAS,KAAKF,YAAY,EAAE;QAC5B,IAAI,CAACT,sBAAsB,CAACY,GAAG,EAAED,SAAS,CAAC;MAC/C;IACJ;EACJ;EAkBQhC,iBAAiBA,CAAA,EAAW;IAChC,IAAI,CAAC,IAAI,CAAC/E,YAAY,EAAE,OAAO,EAAE;IAEjC,IAAI8E,KAAK,GAAG,IAAI,CAAC9E,YAAY,CAACiH,eAAe,CAAC,IAAI,CAACzJ,gCAAgC,CAAC;IACpFsH,KAAK,GAAGA,KAAK,CAACoC,MAAM,CAAEC,CAAC,IAAK9C,sCAAkB,CAACzH,QAAQ,CAAC2H,aAAa,CAAC4C,CAAC,CAAC,CAAC;IAEzE,IAAI,IAAI,CAACzI,mBAAmB,CAAC0I,MAAM,GAAG,CAAC,EAAE;MACrCtC,KAAK,GAAGA,KAAK,CAACoC,MAAM,CAAEC,CAAC,IAAK;QACxB,KAAK,MAAMD,MAAM,IAAI,IAAI,CAACxI,mBAAmB,EAAE;UAC3C,IAAI,CAACwI,MAAM,CAACxC,SAAS,CAACyC,CAAC,CAAC,EAAE;YACtB,OAAO,KAAK;UAChB;QACJ;QACA,OAAO,IAAI;MACf,CAAC,CAAC;IACN;IAEA,OAAOrC,KAAK;EAChB;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACW5G,kBAAkBA,CAAAmJ,KAAA,EAA2B;IAAA,IAA1B;MAAElK,OAAO,GAAG;IAAK,CAAC,GAAAkK,KAAA;IACxCzH,cAAM,CAACW,IAAI,CAAC,6BAA6B,CAAC;IAE1C,MAAMuE,KAAK,GAAG,IAAI,CAACC,iBAAiB,CAAC,CAAC;IAEtC,MAAMuC,KAAqB,GAAG,CAAC,CAAC;IAChC,MAAMC,MAAwB,GAAG,CAAC,CAAC;IACnC,MAAMC,OAAO,GAAG,CAAC,GAAGC,4BAAoB,CAAC;IACzC,KAAK,MAAMlL,KAAK,IAAIiL,OAAO,EAAE;MACzBF,KAAK,CAAC/K,KAAK,CAAC,GAAG,IAAI,CAACqJ,mBAAmB,CAACrJ,KAAK,CAAC;MAC9CgL,MAAM,CAAChL,KAAK,CAAC,GAAG,IAAI,CAACkK,kBAAkB,CAAClK,KAAK,CAAC;MAE9CmL,4BAAmB,CAAC9K,QAAQ,CAAC+K,kBAAkB,CAACpL,KAAK,CAAC;IAC1D;IAEA,IAAI,CAACe,SAAS,CAACsK,YAAY,CAACN,KAAK,EAAEC,MAAM,CAAC;IAC1C,IAAI,CAACjK,SAAS,CAAC6H,aAAa,CAACL,KAAK,CAAC;IAEnC,IAAI,CAACnG,qBAAqB,GAAG,IAAI;IAEjC,IAAIxB,OAAO,EAAE,IAAI,CAACF,QAAQ,CAACE,OAAO,CAAC,CAAC;EACxC;;EAEA;AACJ;AACA;AACA;AACA;EACI,MAAa0K,SAASA,CAACX,MAAwB,EAAiB;IAC5D,IAAIY,OAAO,GAAGC,OAAO,CAACC,OAAO,CAAC,CAAC;IAC/Bd,MAAM,CAACjI,EAAE,CAACF,gCAAc,EAAE,IAAI,CAACkJ,kBAAkB,CAAC;IAClD,IAAI,CAACvJ,mBAAmB,CAACwJ,IAAI,CAAChB,MAAM,CAAC;IACrCY,OAAO,GAAG,IAAI,CAAC1K,uBAAuB,CAAC,CAAC;IACxC0K,OAAO,CAACK,IAAI,CAAC,MAAM,IAAI,CAAClL,QAAQ,CAACE,OAAO,CAAC,CAAC,CAAC;EAC/C;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACWiL,YAAYA,CAAClB,MAAwB,EAAQ;IAChD,IAAIY,OAAO,GAAGC,OAAO,CAACC,OAAO,CAAC,CAAC;IAC/B,IAAIK,OAAO,GAAG,KAAK;IACnB,MAAMC,GAAG,GAAG,IAAI,CAAC5J,mBAAmB,CAAC6J,OAAO,CAACrB,MAAM,CAAC;IACpD,IAAIoB,GAAG,IAAI,CAAC,EAAE;MACVpB,MAAM,CAACtI,GAAG,CAACG,gCAAc,EAAE,IAAI,CAACkJ,kBAAkB,CAAC;MACnD,IAAI,CAACvJ,mBAAmB,CAAC8J,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;MACvCR,OAAO,GAAG,IAAI,CAAC1K,uBAAuB,CAAC,CAAC;MACxCiL,OAAO,GAAG,IAAI;IAClB;IAEA,IAAIA,OAAO,EAAE;MACTP,OAAO,CAACK,IAAI,CAAC,MAAM,IAAI,CAAClL,QAAQ,CAACE,OAAO,CAAC,CAAC,CAAC;IAC/C;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACWsL,cAAcA,CAACrH,IAAU,EAAW;IACvC,MAAMsH,aAAa,GAAG,IAAI,CAACpL,SAAS,CAACmL,cAAc,CAACrH,IAAI,CAAC;IACzD,IAAI,CAACsH,aAAa,EAAE,OAAO,CAACC,oBAAY,CAACC,QAAQ,CAAC;IAClD,OAAOF,aAAa;EACxB;EAEOG,QAAQA,CAACtM,KAAY,EAAU;IAClC;IACA,OAAO,IAAI,CAACG,YAAY,CAACH,KAAK,CAAC,CAAC6K,MAAM,IAAI,CAAC;EAC/C;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAa0B,gBAAgBA,CAAC1H,IAAU,EAAE+C,KAAsB,EAAiB;IAC7E,MAAM,IAAI,CAAC7C,gBAAgB,CAACF,IAAI,EAAE+C,KAAK,CAAC;IACxC,IAAI,CAAClH,QAAQ,CAACE,OAAO,CAAC,CAAC;EAC3B;AACJ;AAACvB,OAAA,CAAAG,kBAAA,GAAAA,kBAAA;AA7kBG;AACJ;AACA;AACA;AAHI,IAAAI,gBAAA,CAAAC,OAAA,EADSL,kBAAkB,eAKD,KAAK;AA2kBpB,MAAMgN,aAAa,CAAC;EAG/B,WAAkBnM,QAAQA,CAAA,EAAc;IACpC,IAAI,CAACmM,aAAa,CAACC,gBAAgB,EAAE;MACjC,IAAIvL,sBAAa,CAACC,QAAQ,CAAC,sBAAsB,CAAC,EAAE;QAChDkC,cAAM,CAACqJ,IAAI,CAAC,iCAAiC,CAAC;QAC9C,MAAMrM,QAAQ,GAAG,IAAIsM,+CAAyB,CAACC,mBAAiB,EAAE7J,2BAAe,CAAC1C,QAAQ,CAAC;QAC3FA,QAAQ,CAACW,KAAK,CAAC,CAAC;QAChBwL,aAAa,CAACC,gBAAgB,GAAGpM,QAAQ;MAC7C,CAAC,MAAM;QACH,MAAMA,QAAQ,GAAG,IAAIb,kBAAkB,CAACoN,mBAAiB,CAAC;QAC1DvM,QAAQ,CAACW,KAAK,CAAC,CAAC;QAChBwL,aAAa,CAACC,gBAAgB,GAAGpM,QAAQ;MAC7C;IACJ;IAEA,OAAO,IAAI,CAACoM,gBAAgB;EAChC;AACJ;AAACpN,OAAA,CAAAQ,OAAA,GAAA2M,aAAA;AAAA,IAAA5M,gBAAA,CAAAC,OAAA,EAnBoB2M,aAAa;AAqBlCvG,MAAM,CAAC4G,eAAe,GAAGL,aAAa,CAACnM,QAAQ"}