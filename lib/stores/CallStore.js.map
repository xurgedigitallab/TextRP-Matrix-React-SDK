{"version":3,"file":"CallStore.js","names":["_logger","require","_groupCallEventHandler","_dispatcher","_interopRequireDefault","_AsyncStore","_AsyncStoreWithClient","_WidgetStore","_SettingsStore","_SettingLevel","_Call","CallStoreEvent","exports","CallStore","AsyncStoreWithClient","instance","_instance","start","constructor","defaultDispatcher","_defineProperty2","default","Set","Map","roomId","matrixClient","room","getRooms","updateRoom","getRoom","groupCall","onAction","onReady","on","GroupCallEventHandlerEvent","Incoming","onGroupCall","Outgoing","WidgetStore","UPDATE_EVENT","onWidgets","uncleanlyDisconnectedRoomIds","SettingsStore","getValue","length","Promise","all","map","uncleanlyDisconnectedRoomId","logger","log","getCall","clean","setValue","SettingLevel","DEVICE","onNotReady","call","listenerMap","callListeners","event","listener","off","destroy","clear","calls","_activeCalls","Ended","activeCalls","value","emit","ActiveCalls","has","Call","get","onConnectionState","state","ConnectionState","Connected","Disconnected","filter","c","onDestroy","delete","CallEvent","Destroy","set","getActiveCall"],"sources":["../../src/stores/CallStore.ts"],"sourcesContent":["/*\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\nimport { GroupCallEventHandlerEvent } from \"matrix-js-sdk/src/webrtc/groupCallEventHandler\";\r\n\r\nimport type { GroupCall } from \"matrix-js-sdk/src/webrtc/groupCall\";\r\nimport type { Room } from \"matrix-js-sdk/src/models/room\";\r\nimport defaultDispatcher from \"../dispatcher/dispatcher\";\r\nimport { UPDATE_EVENT } from \"./AsyncStore\";\r\nimport { AsyncStoreWithClient } from \"./AsyncStoreWithClient\";\r\nimport WidgetStore from \"./WidgetStore\";\r\nimport SettingsStore from \"../settings/SettingsStore\";\r\nimport { SettingLevel } from \"../settings/SettingLevel\";\r\nimport { Call, CallEvent, ConnectionState } from \"../models/Call\";\r\n\r\nexport enum CallStoreEvent {\r\n    // Signals a change in the call associated with a given room\r\n    Call = \"call\",\r\n    // Signals a change in the active calls\r\n    ActiveCalls = \"active_calls\",\r\n}\r\n\r\nexport class CallStore extends AsyncStoreWithClient<{}> {\r\n    private static _instance: CallStore;\r\n    public static get instance(): CallStore {\r\n        if (!this._instance) {\r\n            this._instance = new CallStore();\r\n            this._instance.start();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    private constructor() {\r\n        super(defaultDispatcher);\r\n    }\r\n\r\n    protected async onAction(): Promise<void> {\r\n        // nothing to do\r\n    }\r\n\r\n    protected async onReady(): Promise<any> {\r\n        if (!this.matrixClient) return;\r\n        // We assume that the calls present in a room are a function of room\r\n        // widgets and group calls, so we initialize the room map here and then\r\n        // update it whenever those change\r\n        for (const room of this.matrixClient.getRooms()) {\r\n            this.updateRoom(room);\r\n        }\r\n        this.matrixClient.on(GroupCallEventHandlerEvent.Incoming, this.onGroupCall);\r\n        this.matrixClient.on(GroupCallEventHandlerEvent.Outgoing, this.onGroupCall);\r\n        WidgetStore.instance.on(UPDATE_EVENT, this.onWidgets);\r\n\r\n        // If the room ID of a previously connected call is still in settings at\r\n        // this time, that's a sign that we failed to disconnect from it\r\n        // properly, and need to clean up after ourselves\r\n        const uncleanlyDisconnectedRoomIds = SettingsStore.getValue<string[]>(\"activeCallRoomIds\");\r\n        if (uncleanlyDisconnectedRoomIds.length) {\r\n            await Promise.all([\r\n                ...uncleanlyDisconnectedRoomIds.map(async (uncleanlyDisconnectedRoomId): Promise<void> => {\r\n                    logger.log(`Cleaning up call state for room ${uncleanlyDisconnectedRoomId}`);\r\n                    await this.getCall(uncleanlyDisconnectedRoomId)?.clean();\r\n                }),\r\n                SettingsStore.setValue(\"activeCallRoomIds\", null, SettingLevel.DEVICE, []),\r\n            ]);\r\n        }\r\n    }\r\n\r\n    protected async onNotReady(): Promise<any> {\r\n        for (const [call, listenerMap] of this.callListeners) {\r\n            // It's important that we remove the listeners before destroying the\r\n            // call, because otherwise the call's onDestroy callback would fire\r\n            // and immediately repopulate the map\r\n            for (const [event, listener] of listenerMap) call.off(event, listener);\r\n            call.destroy();\r\n        }\r\n        this.callListeners.clear();\r\n        this.calls.clear();\r\n        this._activeCalls.clear();\r\n\r\n        if (this.matrixClient) {\r\n            this.matrixClient.off(GroupCallEventHandlerEvent.Incoming, this.onGroupCall);\r\n            this.matrixClient.off(GroupCallEventHandlerEvent.Outgoing, this.onGroupCall);\r\n            this.matrixClient.off(GroupCallEventHandlerEvent.Ended, this.onGroupCall);\r\n        }\r\n        WidgetStore.instance.off(UPDATE_EVENT, this.onWidgets);\r\n    }\r\n\r\n    private _activeCalls: Set<Call> = new Set();\r\n    /**\r\n     * The calls to which the user is currently connected.\r\n     */\r\n    public get activeCalls(): Set<Call> {\r\n        return this._activeCalls;\r\n    }\r\n    private set activeCalls(value: Set<Call>) {\r\n        this._activeCalls = value;\r\n        this.emit(CallStoreEvent.ActiveCalls, value);\r\n\r\n        // The room IDs are persisted to settings so we can detect unclean disconnects\r\n        SettingsStore.setValue(\r\n            \"activeCallRoomIds\",\r\n            null,\r\n            SettingLevel.DEVICE,\r\n            [...value].map((call) => call.roomId),\r\n        );\r\n    }\r\n\r\n    private calls = new Map<string, Call>(); // Key is room ID\r\n    private callListeners = new Map<Call, Map<CallEvent, (...args: unknown[]) => unknown>>();\r\n\r\n    private updateRoom(room: Room): void {\r\n        if (!this.calls.has(room.roomId)) {\r\n            const call = Call.get(room);\r\n\r\n            if (call) {\r\n                const onConnectionState = (state: ConnectionState): void => {\r\n                    if (state === ConnectionState.Connected) {\r\n                        this.activeCalls = new Set([...this.activeCalls, call]);\r\n                    } else if (state === ConnectionState.Disconnected) {\r\n                        this.activeCalls = new Set([...this.activeCalls].filter((c) => c !== call));\r\n                    }\r\n                };\r\n                const onDestroy = (): void => {\r\n                    this.calls.delete(room.roomId);\r\n                    for (const [event, listener] of this.callListeners.get(call)!) call.off(event, listener);\r\n                    this.updateRoom(room);\r\n                };\r\n\r\n                call.on(CallEvent.ConnectionState, onConnectionState);\r\n                call.on(CallEvent.Destroy, onDestroy);\r\n\r\n                this.calls.set(room.roomId, call);\r\n                this.callListeners.set(\r\n                    call,\r\n                    new Map<CallEvent, (...args: any[]) => unknown>([\r\n                        [CallEvent.ConnectionState, onConnectionState],\r\n                        [CallEvent.Destroy, onDestroy],\r\n                    ]),\r\n                );\r\n            }\r\n\r\n            this.emit(CallStoreEvent.Call, call, room.roomId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the call associated with the given room, if any.\r\n     * @param {string} roomId The room's ID.\r\n     * @returns {Call | null} The call.\r\n     */\r\n    public getCall(roomId: string): Call | null {\r\n        return this.calls.get(roomId) ?? null;\r\n    }\r\n\r\n    /**\r\n     * Gets the active call associated with the given room, if any.\r\n     * @param roomId The room's ID.\r\n     * @returns The active call.\r\n     */\r\n    public getActiveCall(roomId: string): Call | null {\r\n        const call = this.getCall(roomId);\r\n        return call !== null && this.activeCalls.has(call) ? call : null;\r\n    }\r\n\r\n    private onWidgets = (roomId: string | null): void => {\r\n        if (!this.matrixClient) return;\r\n        if (roomId === null) {\r\n            // This store happened to start before the widget store was done\r\n            // loading all rooms, so we need to initialize each room again\r\n            for (const room of this.matrixClient.getRooms()) {\r\n                this.updateRoom(room);\r\n            }\r\n        } else {\r\n            const room = this.matrixClient.getRoom(roomId);\r\n            // Widget updates can arrive before the room does, empirically\r\n            if (room !== null) this.updateRoom(room);\r\n        }\r\n    };\r\n\r\n    private onGroupCall = (groupCall: GroupCall): void => this.updateRoom(groupCall.room);\r\n}\r\n"],"mappings":"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"}