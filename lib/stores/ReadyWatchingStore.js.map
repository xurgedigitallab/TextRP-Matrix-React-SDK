{"version":3,"file":"ReadyWatchingStore.js","names":["_sync","require","_events","_MatrixClientPeg","_actions","ReadyWatchingStore","EventEmitter","constructor","dispatcher","_defineProperty2","default","payload","onDispatcherAction","action","prevState","SyncState","Prepared","state","matrixClient","onNotReady","onReady","Action","OnLoggedOut","start","dispatcherRef","register","onAction","MatrixClientPeg","get","mxClient","useUnitTestClient","cli","destroy","unregister","exports"],"sources":["../../src/stores/ReadyWatchingStore.ts"],"sourcesContent":["/*\r\n * Copyright 2021 - 2022 The Matrix.org Foundation C.I.C.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *         http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { MatrixClient } from \"matrix-js-sdk/src/client\";\r\nimport { SyncState } from \"matrix-js-sdk/src/sync\";\r\nimport { EventEmitter } from \"events\";\r\n\r\nimport { MatrixClientPeg } from \"../MatrixClientPeg\";\r\nimport { ActionPayload } from \"../dispatcher/payloads\";\r\nimport { IDestroyable } from \"../utils/IDestroyable\";\r\nimport { Action } from \"../dispatcher/actions\";\r\nimport { MatrixDispatcher } from \"../dispatcher/dispatcher\";\r\n\r\nexport abstract class ReadyWatchingStore extends EventEmitter implements IDestroyable {\r\n    protected matrixClient: MatrixClient | null = null;\r\n    private dispatcherRef: string | null = null;\r\n\r\n    public constructor(protected readonly dispatcher: MatrixDispatcher) {\r\n        super();\r\n    }\r\n\r\n    public async start(): Promise<void> {\r\n        this.dispatcherRef = this.dispatcher.register(this.onAction);\r\n\r\n        const matrixClient = MatrixClientPeg.get();\r\n        if (matrixClient) {\r\n            this.matrixClient = matrixClient;\r\n            await this.onReady();\r\n        }\r\n    }\r\n\r\n    public get mxClient(): MatrixClient | null {\r\n        return this.matrixClient; // for external readonly access\r\n    }\r\n\r\n    public useUnitTestClient(cli: MatrixClient): void {\r\n        this.matrixClient = cli;\r\n    }\r\n\r\n    public destroy(): void {\r\n        if (this.dispatcherRef !== null) this.dispatcher.unregister(this.dispatcherRef);\r\n    }\r\n\r\n    protected async onReady(): Promise<void> {\r\n        // Default implementation is to do nothing.\r\n    }\r\n\r\n    protected async onNotReady(): Promise<void> {\r\n        // Default implementation is to do nothing.\r\n    }\r\n\r\n    protected onDispatcherAction(payload: ActionPayload): void {\r\n        // Default implementation is to do nothing.\r\n    }\r\n\r\n    private onAction = async (payload: ActionPayload): Promise<void> => {\r\n        this.onDispatcherAction(payload);\r\n\r\n        if (payload.action === \"MatrixActions.sync\") {\r\n            // Only set the client on the transition into the PREPARED state.\r\n            // Everything after this is unnecessary (we only need to know once we have a client)\r\n            // and we intentionally don't set the client before this point to avoid stores\r\n            // updating for every event emitted during the cached sync.\r\n            if (\r\n                payload.prevState !== SyncState.Prepared &&\r\n                payload.state === SyncState.Prepared &&\r\n                this.matrixClient !== payload.matrixClient\r\n            ) {\r\n                if (this.matrixClient) {\r\n                    await this.onNotReady();\r\n                }\r\n                this.matrixClient = payload.matrixClient;\r\n                await this.onReady();\r\n            }\r\n        } else if (payload.action === \"on_client_not_viable\" || payload.action === Action.OnLoggedOut) {\r\n            if (this.matrixClient) {\r\n                await this.onNotReady();\r\n                this.matrixClient = null;\r\n            }\r\n        }\r\n    };\r\n}\r\n"],"mappings":";;;;;;;;AAiBA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AAEA,IAAAE,gBAAA,GAAAF,OAAA;AAGA,IAAAG,QAAA,GAAAH,OAAA;AAvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYO,MAAeI,kBAAkB,SAASC,oBAAY,CAAyB;EAI3EC,WAAWA,CAAoBC,UAA4B,EAAE;IAChE,KAAK,CAAC,CAAC;IAAC,KAD0BA,UAA4B,GAA5BA,UAA4B;IAAA,IAAAC,gBAAA,CAAAC,OAAA,wBAHpB,IAAI;IAAA,IAAAD,gBAAA,CAAAC,OAAA,yBACX,IAAI;IAAA,IAAAD,gBAAA,CAAAC,OAAA,oBAwCxB,MAAOC,OAAsB,IAAoB;MAChE,IAAI,CAACC,kBAAkB,CAACD,OAAO,CAAC;MAEhC,IAAIA,OAAO,CAACE,MAAM,KAAK,oBAAoB,EAAE;QACzC;QACA;QACA;QACA;QACA,IACIF,OAAO,CAACG,SAAS,KAAKC,eAAS,CAACC,QAAQ,IACxCL,OAAO,CAACM,KAAK,KAAKF,eAAS,CAACC,QAAQ,IACpC,IAAI,CAACE,YAAY,KAAKP,OAAO,CAACO,YAAY,EAC5C;UACE,IAAI,IAAI,CAACA,YAAY,EAAE;YACnB,MAAM,IAAI,CAACC,UAAU,CAAC,CAAC;UAC3B;UACA,IAAI,CAACD,YAAY,GAAGP,OAAO,CAACO,YAAY;UACxC,MAAM,IAAI,CAACE,OAAO,CAAC,CAAC;QACxB;MACJ,CAAC,MAAM,IAAIT,OAAO,CAACE,MAAM,KAAK,sBAAsB,IAAIF,OAAO,CAACE,MAAM,KAAKQ,eAAM,CAACC,WAAW,EAAE;QAC3F,IAAI,IAAI,CAACJ,YAAY,EAAE;UACnB,MAAM,IAAI,CAACC,UAAU,CAAC,CAAC;UACvB,IAAI,CAACD,YAAY,GAAG,IAAI;QAC5B;MACJ;IACJ,CAAC;EA7DD;EAEA,MAAaK,KAAKA,CAAA,EAAkB;IAChC,IAAI,CAACC,aAAa,GAAG,IAAI,CAAChB,UAAU,CAACiB,QAAQ,CAAC,IAAI,CAACC,QAAQ,CAAC;IAE5D,MAAMR,YAAY,GAAGS,gCAAe,CAACC,GAAG,CAAC,CAAC;IAC1C,IAAIV,YAAY,EAAE;MACd,IAAI,CAACA,YAAY,GAAGA,YAAY;MAChC,MAAM,IAAI,CAACE,OAAO,CAAC,CAAC;IACxB;EACJ;EAEA,IAAWS,QAAQA,CAAA,EAAwB;IACvC,OAAO,IAAI,CAACX,YAAY,CAAC,CAAC;EAC9B;;EAEOY,iBAAiBA,CAACC,GAAiB,EAAQ;IAC9C,IAAI,CAACb,YAAY,GAAGa,GAAG;EAC3B;EAEOC,OAAOA,CAAA,EAAS;IACnB,IAAI,IAAI,CAACR,aAAa,KAAK,IAAI,EAAE,IAAI,CAAChB,UAAU,CAACyB,UAAU,CAAC,IAAI,CAACT,aAAa,CAAC;EACnF;EAEA,MAAgBJ,OAAOA,CAAA,EAAkB;IACrC;EAAA;EAGJ,MAAgBD,UAAUA,CAAA,EAAkB;IACxC;EAAA;EAGMP,kBAAkBA,CAACD,OAAsB,EAAQ;IACvD;EAAA;AA6BR;AAACuB,OAAA,CAAA7B,kBAAA,GAAAA,kBAAA"}