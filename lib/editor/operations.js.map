{"version":3,"file":"operations.js","names":["_parts","require","_MessageComposerFormatBar","_deserialize","formatRange","range","action","wasInitializedEmpty","selectRangeOfWordAtCaret","trim","length","Formatting","Bold","toggleInlineFormat","Italics","Strikethrough","Code","formatRangeAsCode","Quote","formatRangeAsQuote","InsertLink","formatRangeAsLink","replaceRangeAndExpandSelection","newParts","model","transform","oldLen","addedLen","replace","firstOffset","start","asOffset","lastOffset","add","startRange","asPosition","replaceRangeAndMoveCaret","offset","arguments","undefined","atNodeEnd","replaceRangeAndAutoAdjustCaret","rangeHasFormatting","prefixLength","suffixLength","lastStartingPosition","getLastStartingPosition","relativeOffset","distanceFromEnd","offsetDirection","Math","sign","atEnd","isFormattable","_index","part","text","type","Type","Plain","expandForwardsWhile","expandBackwardsWhile","rangeStartsAtBeginningOfLine","startsWithPartial","isFirstPart","index","previousIsNewline","parts","Newline","rangeEndsAtEndOfLine","lastPart","end","endsWithPartial","isLastPart","nextIsNewline","partCreator","i","splice","plain","unshift","newline","push","hasBlockFormatting","startsWith","endsWith","includes","needsBlockFormatting","some","p","shift","pop","fenceLen","longestBacktickSequence","hasInlineFormatting","repeat","linkRegex","isFormattedAsLink","test","linkDescription","isBlank","isNL","prefix","suffix","paragraphIndexes","startIndex","lastNonEmptyPart","map","lastIndexOf","forEach","_ref","startIdx","endIdx","base","isFormatted","partWithoutPrefix","serialize","slice","deserializedPart","deserializePart","partWithoutSuffix","suffixPartText","substring","hasFormatting"],"sources":["../../src/editor/operations.ts"],"sourcesContent":["/*\r\nCopyright 2019 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport Range from \"./range\";\r\nimport { Part, Type } from \"./parts\";\r\nimport { Formatting } from \"../components/views/rooms/MessageComposerFormatBar\";\r\nimport { longestBacktickSequence } from \"./deserialize\";\r\n\r\n/**\r\n * Some common queries and transformations on the editor model\r\n */\r\n\r\n/**\r\n * Formats a given range with a given action\r\n * @param {Range} range the range that should be formatted\r\n * @param {Formatting} action the action that should be performed on the range\r\n */\r\nexport function formatRange(range: Range, action: Formatting): void {\r\n    // If the selection was empty we select the current word instead\r\n    if (range.wasInitializedEmpty()) {\r\n        selectRangeOfWordAtCaret(range);\r\n    } else {\r\n        // Remove whitespace or new lines in our selection\r\n        range.trim();\r\n    }\r\n\r\n    // Edge case when just selecting whitespace or new line.\r\n    // There should be no reason to format whitespace, so we can just return.\r\n    if (range.length === 0) {\r\n        return;\r\n    }\r\n\r\n    switch (action) {\r\n        case Formatting.Bold:\r\n            toggleInlineFormat(range, \"**\");\r\n            break;\r\n        case Formatting.Italics:\r\n            toggleInlineFormat(range, \"_\");\r\n            break;\r\n        case Formatting.Strikethrough:\r\n            toggleInlineFormat(range, \"<del>\", \"</del>\");\r\n            break;\r\n        case Formatting.Code:\r\n            formatRangeAsCode(range);\r\n            break;\r\n        case Formatting.Quote:\r\n            formatRangeAsQuote(range);\r\n            break;\r\n        case Formatting.InsertLink:\r\n            formatRangeAsLink(range);\r\n            break;\r\n    }\r\n}\r\n\r\nexport function replaceRangeAndExpandSelection(range: Range, newParts: Part[]): void {\r\n    const { model } = range;\r\n    model.transform(() => {\r\n        const oldLen = range.length;\r\n        const addedLen = range.replace(newParts);\r\n        const firstOffset = range.start.asOffset(model);\r\n        const lastOffset = firstOffset.add(oldLen + addedLen);\r\n        return model.startRange(firstOffset.asPosition(model), lastOffset.asPosition(model));\r\n    });\r\n}\r\n\r\nexport function replaceRangeAndMoveCaret(range: Range, newParts: Part[], offset = 0, atNodeEnd = false): void {\r\n    const { model } = range;\r\n    model.transform(() => {\r\n        const oldLen = range.length;\r\n        const addedLen = range.replace(newParts);\r\n        const firstOffset = range.start.asOffset(model);\r\n        const lastOffset = firstOffset.add(oldLen + addedLen + offset, atNodeEnd);\r\n        return lastOffset.asPosition(model);\r\n    });\r\n}\r\n\r\n/**\r\n * Replaces a range with formatting or removes existing formatting and\r\n * positions the cursor with respect to the prefix and suffix length.\r\n * @param {Range} range the previous value\r\n * @param {Part[]} newParts the new value\r\n * @param {boolean} rangeHasFormatting the new value\r\n * @param {number} prefixLength the length of the formatting prefix\r\n * @param {number} suffixLength the length of the formatting suffix, defaults to prefix length\r\n */\r\nexport function replaceRangeAndAutoAdjustCaret(\r\n    range: Range,\r\n    newParts: Part[],\r\n    rangeHasFormatting = false,\r\n    prefixLength: number,\r\n    suffixLength = prefixLength,\r\n): void {\r\n    const { model } = range;\r\n    const lastStartingPosition = range.getLastStartingPosition();\r\n    const relativeOffset = lastStartingPosition.offset - range.start.offset;\r\n    const distanceFromEnd = range.length - relativeOffset;\r\n    // Handle edge case where the caret is located within the suffix or prefix\r\n    if (rangeHasFormatting) {\r\n        if (relativeOffset < prefixLength) {\r\n            // Was the caret at the left format string?\r\n            replaceRangeAndMoveCaret(range, newParts, -(range.length - 2 * suffixLength));\r\n            return;\r\n        }\r\n        if (distanceFromEnd < suffixLength) {\r\n            // Was the caret at the right format string?\r\n            replaceRangeAndMoveCaret(range, newParts, 0, true);\r\n            return;\r\n        }\r\n    }\r\n    // Calculate new position with respect to the previous position\r\n    model.transform(() => {\r\n        const offsetDirection = Math.sign(range.replace(newParts)); // Compensates for shrinkage or expansion\r\n        const atEnd = distanceFromEnd === suffixLength;\r\n        return lastStartingPosition\r\n            .asOffset(model)\r\n            .add(offsetDirection * prefixLength, atEnd)\r\n            .asPosition(model);\r\n    });\r\n}\r\n\r\nconst isFormattable = (_index: number, offset: number, part: Part): boolean => {\r\n    return part.text[offset] !== \" \" && part.type === Type.Plain;\r\n};\r\n\r\nexport function selectRangeOfWordAtCaret(range: Range): void {\r\n    // Select right side of word\r\n    range.expandForwardsWhile(isFormattable);\r\n    // Select left side of word\r\n    range.expandBackwardsWhile(isFormattable);\r\n    // Trim possibly selected new lines\r\n    range.trim();\r\n}\r\n\r\nexport function rangeStartsAtBeginningOfLine(range: Range): boolean {\r\n    const { model } = range;\r\n    const startsWithPartial = range.start.offset !== 0;\r\n    const isFirstPart = range.start.index === 0;\r\n    const previousIsNewline = !isFirstPart && model.parts[range.start.index - 1].type === Type.Newline;\r\n    return !startsWithPartial && (isFirstPart || previousIsNewline);\r\n}\r\n\r\nexport function rangeEndsAtEndOfLine(range: Range): boolean {\r\n    const { model } = range;\r\n    const lastPart = model.parts[range.end.index];\r\n    const endsWithPartial = range.end.offset !== lastPart.text.length;\r\n    const isLastPart = range.end.index === model.parts.length - 1;\r\n    const nextIsNewline = !isLastPart && model.parts[range.end.index + 1].type === Type.Newline;\r\n    return !endsWithPartial && (isLastPart || nextIsNewline);\r\n}\r\n\r\nexport function formatRangeAsQuote(range: Range): void {\r\n    const { model, parts } = range;\r\n    const { partCreator } = model;\r\n    for (let i = 0; i < parts.length; ++i) {\r\n        const part = parts[i];\r\n        if (part.type === Type.Newline) {\r\n            parts.splice(i + 1, 0, partCreator.plain(\"> \"));\r\n        }\r\n    }\r\n    parts.unshift(partCreator.plain(\"> \"));\r\n    if (!rangeStartsAtBeginningOfLine(range)) {\r\n        parts.unshift(partCreator.newline());\r\n    }\r\n    if (!rangeEndsAtEndOfLine(range)) {\r\n        parts.push(partCreator.newline());\r\n    }\r\n    parts.push(partCreator.newline());\r\n    replaceRangeAndExpandSelection(range, parts);\r\n}\r\n\r\nexport function formatRangeAsCode(range: Range): void {\r\n    const { model, parts } = range;\r\n    const { partCreator } = model;\r\n\r\n    const hasBlockFormatting =\r\n        range.length > 0 && range.text.startsWith(\"```\") && range.text.endsWith(\"```\") && range.text.includes(\"\\n\");\r\n\r\n    const needsBlockFormatting = parts.some((p) => p.type === Type.Newline);\r\n\r\n    if (hasBlockFormatting) {\r\n        parts.shift();\r\n        parts.pop();\r\n        if (parts[0]?.text === \"\\n\" && parts[parts.length - 1]?.text === \"\\n\") {\r\n            parts.shift();\r\n            parts.pop();\r\n        }\r\n    } else if (needsBlockFormatting) {\r\n        parts.unshift(partCreator.plain(\"```\"), partCreator.newline());\r\n        if (!rangeStartsAtBeginningOfLine(range)) {\r\n            parts.unshift(partCreator.newline());\r\n        }\r\n        parts.push(partCreator.newline(), partCreator.plain(\"```\"));\r\n        if (!rangeEndsAtEndOfLine(range)) {\r\n            parts.push(partCreator.newline());\r\n        }\r\n    } else {\r\n        const fenceLen = longestBacktickSequence(range.text);\r\n        const hasInlineFormatting = range.text.startsWith(\"`\") && range.text.endsWith(\"`\");\r\n        //if it's already formatted untoggle based on fenceLen which returns the max. num of backtick within a text else increase the fence backticks with a factor of 1.\r\n        toggleInlineFormat(range, \"`\".repeat(hasInlineFormatting ? fenceLen : fenceLen + 1));\r\n        return;\r\n    }\r\n\r\n    replaceRangeAndExpandSelection(range, parts);\r\n}\r\n\r\nexport function formatRangeAsLink(range: Range, text?: string): void {\r\n    const { model } = range;\r\n    const { partCreator } = model;\r\n    const linkRegex = /\\[(.*?)]\\(.*?\\)/g;\r\n    const isFormattedAsLink = linkRegex.test(range.text);\r\n    if (isFormattedAsLink) {\r\n        const linkDescription = range.text.replace(linkRegex, \"$1\");\r\n        const newParts = [partCreator.plain(linkDescription)];\r\n        replaceRangeAndMoveCaret(range, newParts, 0);\r\n    } else {\r\n        // We set offset to -1 here so that the caret lands between the brackets\r\n        replaceRangeAndMoveCaret(range, [partCreator.plain(\"[\" + range.text + \"]\" + \"(\" + (text ?? \"\") + \")\")], -1);\r\n    }\r\n}\r\n\r\n// parts helper methods\r\nconst isBlank = (part: Part): boolean => !part.text || !/\\S/.test(part.text);\r\nconst isNL = (part: Part): boolean => part.type === Type.Newline;\r\n\r\nexport function toggleInlineFormat(range: Range, prefix: string, suffix = prefix): void {\r\n    const { model, parts } = range;\r\n    const { partCreator } = model;\r\n\r\n    // compute paragraph [start, end] indexes\r\n    const paragraphIndexes: [number, number][] = [];\r\n    let startIndex = 0;\r\n\r\n    // start at i=2 because we look at i and up to two parts behind to detect paragraph breaks at their end\r\n    for (let i = 2; i < parts.length; i++) {\r\n        // paragraph breaks can be denoted in a multitude of ways,\r\n        // - 2 newline parts in sequence\r\n        // - newline part, plain(<empty or just spaces>), newline part\r\n\r\n        // bump startIndex onto the first non-blank after the paragraph ending\r\n        if (isBlank(parts[i - 2]) && isNL(parts[i - 1]) && !isNL(parts[i]) && !isBlank(parts[i])) {\r\n            startIndex = i;\r\n        }\r\n\r\n        // if at a paragraph break, store the indexes of the paragraph\r\n        if (isNL(parts[i - 1]) && isNL(parts[i])) {\r\n            paragraphIndexes.push([startIndex, i - 1]);\r\n            startIndex = i + 1;\r\n        } else if (isNL(parts[i - 2]) && isBlank(parts[i - 1]) && isNL(parts[i])) {\r\n            paragraphIndexes.push([startIndex, i - 2]);\r\n            startIndex = i + 1;\r\n        }\r\n    }\r\n\r\n    const lastNonEmptyPart = parts.map(isBlank).lastIndexOf(false);\r\n    // If we have not yet included the final paragraph then add it now\r\n    if (startIndex <= lastNonEmptyPart) {\r\n        paragraphIndexes.push([startIndex, lastNonEmptyPart + 1]);\r\n    }\r\n\r\n    // keep track of how many things we have inserted as an offset:=0\r\n    let offset = 0;\r\n    paragraphIndexes.forEach(([startIdx, endIdx]) => {\r\n        // for each paragraph apply the same rule\r\n        const base = startIdx + offset;\r\n        const index = endIdx + offset;\r\n\r\n        const isFormatted =\r\n            index - base > 0 && parts[base].text.startsWith(prefix) && parts[index - 1].text.endsWith(suffix);\r\n\r\n        if (isFormatted) {\r\n            // remove prefix and suffix formatting string\r\n            const partWithoutPrefix = parts[base].serialize();\r\n            partWithoutPrefix.text = partWithoutPrefix.text.slice(prefix.length);\r\n            let deserializedPart = partCreator.deserializePart(partWithoutPrefix);\r\n            if (deserializedPart) {\r\n                parts[base] = deserializedPart;\r\n            }\r\n\r\n            const partWithoutSuffix = parts[index - 1].serialize();\r\n            const suffixPartText = partWithoutSuffix.text;\r\n            partWithoutSuffix.text = suffixPartText.substring(0, suffixPartText.length - suffix.length);\r\n            deserializedPart = partCreator.deserializePart(partWithoutSuffix);\r\n            if (deserializedPart) {\r\n                parts[index - 1] = deserializedPart;\r\n            }\r\n        } else {\r\n            parts.splice(index, 0, partCreator.plain(suffix)); // splice in the later one first to not change offset\r\n            parts.splice(base, 0, partCreator.plain(prefix));\r\n            offset += 2; // offset index to account for the two items we just spliced in\r\n        }\r\n    });\r\n\r\n    // If the user didn't select something initially, we want to just restore\r\n    // the caret position instead of making a new selection.\r\n    if (range.wasInitializedEmpty() && prefix === suffix) {\r\n        // Check if we need to add a offset for a toggle or untoggle\r\n        const hasFormatting = range.text.startsWith(prefix) && range.text.endsWith(suffix);\r\n        replaceRangeAndAutoAdjustCaret(range, parts, hasFormatting, prefix.length);\r\n    } else {\r\n        replaceRangeAndExpandSelection(range, parts);\r\n    }\r\n}\r\n"],"mappings":"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"}