{"version":3,"file":"diff.js","names":["firstDiff","a","b","compareLen","Math","min","length","i","diffStringsAtEnd","oldStr","newStr","len","startInCommon","slice","removed","at","added","commonStartLen","diffDeletion","firstDiffIdx","amount","diffAtCaret","oldValue","newValue","caretPosition","diffLen","caretPositionBeforeInput","oldValueBeforeCaret","substring","newValueBeforeCaret"],"sources":["../../src/editor/diff.ts"],"sourcesContent":["/*\r\nCopyright 2019 New Vector Ltd\r\nCopyright 2019 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nexport interface IDiff {\r\n    removed?: string;\r\n    added?: string;\r\n    at?: number;\r\n}\r\n\r\nfunction firstDiff(a: string, b: string): number {\r\n    const compareLen = Math.min(a.length, b.length);\r\n    for (let i = 0; i < compareLen; ++i) {\r\n        if (a[i] !== b[i]) {\r\n            return i;\r\n        }\r\n    }\r\n    return compareLen;\r\n}\r\n\r\nfunction diffStringsAtEnd(oldStr: string, newStr: string): IDiff {\r\n    const len = Math.min(oldStr.length, newStr.length);\r\n    const startInCommon = oldStr.slice(0, len) === newStr.slice(0, len);\r\n    if (startInCommon && oldStr.length > newStr.length) {\r\n        return { removed: oldStr.slice(len), at: len };\r\n    } else if (startInCommon && oldStr.length < newStr.length) {\r\n        return { added: newStr.slice(len), at: len };\r\n    } else {\r\n        const commonStartLen = firstDiff(oldStr, newStr);\r\n        return {\r\n            removed: oldStr.slice(commonStartLen),\r\n            added: newStr.slice(commonStartLen),\r\n            at: commonStartLen,\r\n        };\r\n    }\r\n}\r\n\r\n// assumes only characters have been deleted at one location in the string, and none added\r\nexport function diffDeletion(oldStr: string, newStr: string): IDiff {\r\n    if (oldStr === newStr) {\r\n        return {};\r\n    }\r\n    const firstDiffIdx = firstDiff(oldStr, newStr);\r\n    const amount = oldStr.length - newStr.length;\r\n    return { at: firstDiffIdx, removed: oldStr.slice(firstDiffIdx, firstDiffIdx + amount) };\r\n}\r\n\r\n/**\r\n * Calculates which string was added and removed around the caret position\r\n * @param {String} oldValue the previous value\r\n * @param {String} newValue the new value\r\n * @param {Number} caretPosition the position of the caret after `newValue` was applied.\r\n * @return {object} an object with `at` as the offset where characters were removed and/or added,\r\n *                  `added` with the added string (if any), and\r\n *                  `removed` with the removed string (if any)\r\n */\r\nexport function diffAtCaret(oldValue: string, newValue: string, caretPosition: number): IDiff {\r\n    const diffLen = newValue.length - oldValue.length;\r\n    const caretPositionBeforeInput = caretPosition - diffLen;\r\n    const oldValueBeforeCaret = oldValue.substring(0, caretPositionBeforeInput);\r\n    const newValueBeforeCaret = newValue.substring(0, caretPosition);\r\n    return diffStringsAtEnd(oldValueBeforeCaret, newValueBeforeCaret);\r\n}\r\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA,SAASA,SAASA,CAACC,CAAS,EAAEC,CAAS,EAAU;EAC7C,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACJ,CAAC,CAACK,MAAM,EAAEJ,CAAC,CAACI,MAAM,CAAC;EAC/C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,EAAE,EAAEI,CAAC,EAAE;IACjC,IAAIN,CAAC,CAACM,CAAC,CAAC,KAAKL,CAAC,CAACK,CAAC,CAAC,EAAE;MACf,OAAOA,CAAC;IACZ;EACJ;EACA,OAAOJ,UAAU;AACrB;AAEA,SAASK,gBAAgBA,CAACC,MAAc,EAAEC,MAAc,EAAS;EAC7D,MAAMC,GAAG,GAAGP,IAAI,CAACC,GAAG,CAACI,MAAM,CAACH,MAAM,EAAEI,MAAM,CAACJ,MAAM,CAAC;EAClD,MAAMM,aAAa,GAAGH,MAAM,CAACI,KAAK,CAAC,CAAC,EAAEF,GAAG,CAAC,KAAKD,MAAM,CAACG,KAAK,CAAC,CAAC,EAAEF,GAAG,CAAC;EACnE,IAAIC,aAAa,IAAIH,MAAM,CAACH,MAAM,GAAGI,MAAM,CAACJ,MAAM,EAAE;IAChD,OAAO;MAAEQ,OAAO,EAAEL,MAAM,CAACI,KAAK,CAACF,GAAG,CAAC;MAAEI,EAAE,EAAEJ;IAAI,CAAC;EAClD,CAAC,MAAM,IAAIC,aAAa,IAAIH,MAAM,CAACH,MAAM,GAAGI,MAAM,CAACJ,MAAM,EAAE;IACvD,OAAO;MAAEU,KAAK,EAAEN,MAAM,CAACG,KAAK,CAACF,GAAG,CAAC;MAAEI,EAAE,EAAEJ;IAAI,CAAC;EAChD,CAAC,MAAM;IACH,MAAMM,cAAc,GAAGjB,SAAS,CAACS,MAAM,EAAEC,MAAM,CAAC;IAChD,OAAO;MACHI,OAAO,EAAEL,MAAM,CAACI,KAAK,CAACI,cAAc,CAAC;MACrCD,KAAK,EAAEN,MAAM,CAACG,KAAK,CAACI,cAAc,CAAC;MACnCF,EAAE,EAAEE;IACR,CAAC;EACL;AACJ;;AAEA;AACO,SAASC,YAAYA,CAACT,MAAc,EAAEC,MAAc,EAAS;EAChE,IAAID,MAAM,KAAKC,MAAM,EAAE;IACnB,OAAO,CAAC,CAAC;EACb;EACA,MAAMS,YAAY,GAAGnB,SAAS,CAACS,MAAM,EAAEC,MAAM,CAAC;EAC9C,MAAMU,MAAM,GAAGX,MAAM,CAACH,MAAM,GAAGI,MAAM,CAACJ,MAAM;EAC5C,OAAO;IAAES,EAAE,EAAEI,YAAY;IAAEL,OAAO,EAAEL,MAAM,CAACI,KAAK,CAACM,YAAY,EAAEA,YAAY,GAAGC,MAAM;EAAE,CAAC;AAC3F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,WAAWA,CAACC,QAAgB,EAAEC,QAAgB,EAAEC,aAAqB,EAAS;EAC1F,MAAMC,OAAO,GAAGF,QAAQ,CAACjB,MAAM,GAAGgB,QAAQ,CAAChB,MAAM;EACjD,MAAMoB,wBAAwB,GAAGF,aAAa,GAAGC,OAAO;EACxD,MAAME,mBAAmB,GAAGL,QAAQ,CAACM,SAAS,CAAC,CAAC,EAAEF,wBAAwB,CAAC;EAC3E,MAAMG,mBAAmB,GAAGN,QAAQ,CAACK,SAAS,CAAC,CAAC,EAAEJ,aAAa,CAAC;EAChE,OAAOhB,gBAAgB,CAACmB,mBAAmB,EAAEE,mBAAmB,CAAC;AACrE"}