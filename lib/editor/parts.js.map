{"version":3,"file":"parts.js","names":["_emojibaseRegex","_interopRequireDefault","require","_graphemer","_autocomplete","_HtmlUtils","Avatar","_interopRequireWildcard","_dispatcher","_actions","_SettingsStore","_strings","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","REGIONAL_EMOJI_SEPARATOR","String","fromCodePoint","Type","exports","BasePart","constructor","text","arguments","length","undefined","_defineProperty2","_text","acceptsInsertion","chr","offset","inputType","acceptsRemoval","position","merge","part","split","splitText","slice","PlainPart","remove","len","strWithRemoval","i","charAt","appendUntilRejected","str","buffer","char","getFirstGrapheme","validateAndInsert","beforeInsert","afterInsert","createAutoComplete","updateCallback","trim","remaining","canEdit","acceptsCaret","toString","type","serialize","PlainBasePart","EMOJIBASE_REGEX","test","toDOMNode","document","createTextNode","updateDOMNode","node","textContent","canUpdateDOMNode","nodeType","Node","TEXT_NODE","Plain","PillPart","resourceId","label","container","createElement","setAttribute","onClick","onclick","className","appendChild","setAvatar","textNode","childNodes","ELEMENT_NODE","nodeName","setAvatarVars","avatarUrl","initialLetter","avatarBackground","avatarLetter","style","getPropertyValue","setProperty","NewlinePart","tagName","Newline","EmojiPart","span","unicodeToShortcode","Emoji","RoomPillPart","room","avatarUrlForRoom","getInitialLetter","name","defaultAvatarUrlForString","roomId","RoomPill","isSpaceRoom","AtRoomPillPart","AtRoomPill","UserPillPart","userId","displayName","member","defaultDispatcher","dispatch","action","Action","ViewUser","UserPill","defaultAvatarUrl","avatarUrlForMember","PillCandidatePart","autoCompleteCreator","create","PillCandidate","getAutoCompleteCreator","getAutocompleterComponent","updateQuery","partCreator","AutocompleteWrapperModel","PartCreator","client","setAutoCompleteCreator","createPartForInput","input","partIndex","pillCandidate","createDefaultPart","plain","deserializePart","newline","emoji","atRoomPill","roomPill","userPill","alias","getRoom","getRooms","find","r","getCanonicalAlias","getAltAliases","includes","getMember","isRegionalIndicator","c","codePoint","codePointAt","plainWithEmoji","parts","plainText","splitter","GraphemeSplitter","iterateGraphemes","push","createMentionParts","insertTrailingCharacter","pill","SettingsStore","getValue","postfix","CommandPartCreator","command","CommandPart","Command"],"sources":["../../src/editor/parts.ts"],"sourcesContent":["/*\r\nCopyright 2019 New Vector Ltd\r\nCopyright 2019 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport EMOJIBASE_REGEX from \"emojibase-regex\";\r\nimport { MatrixClient } from \"matrix-js-sdk/src/client\";\r\nimport { RoomMember } from \"matrix-js-sdk/src/models/room-member\";\r\nimport { Room } from \"matrix-js-sdk/src/models/room\";\r\nimport GraphemeSplitter from \"graphemer\";\r\n\r\nimport AutocompleteWrapperModel, { GetAutocompleterComponent, UpdateCallback, UpdateQuery } from \"./autocomplete\";\r\nimport { unicodeToShortcode } from \"../HtmlUtils\";\r\nimport * as Avatar from \"../Avatar\";\r\nimport defaultDispatcher from \"../dispatcher/dispatcher\";\r\nimport { Action } from \"../dispatcher/actions\";\r\nimport SettingsStore from \"../settings/SettingsStore\";\r\nimport { getFirstGrapheme } from \"../utils/strings\";\r\n\r\nconst REGIONAL_EMOJI_SEPARATOR = String.fromCodePoint(0x200b);\r\n\r\ninterface ISerializedPart {\r\n    type: Type.Plain | Type.Newline | Type.Emoji | Type.Command | Type.PillCandidate;\r\n    text: string;\r\n}\r\n\r\ninterface ISerializedPillPart {\r\n    type: Type.AtRoomPill | Type.RoomPill | Type.UserPill;\r\n    text: string;\r\n    resourceId?: string;\r\n}\r\n\r\nexport type SerializedPart = ISerializedPart | ISerializedPillPart;\r\n\r\nexport enum Type {\r\n    Plain = \"plain\",\r\n    Newline = \"newline\",\r\n    Emoji = \"emoji\",\r\n    Command = \"command\",\r\n    UserPill = \"user-pill\",\r\n    RoomPill = \"room-pill\",\r\n    AtRoomPill = \"at-room-pill\",\r\n    PillCandidate = \"pill-candidate\",\r\n}\r\n\r\ninterface IBasePart {\r\n    text: string;\r\n    type: Type.Plain | Type.Newline | Type.Emoji;\r\n    canEdit: boolean;\r\n    acceptsCaret: boolean;\r\n\r\n    createAutoComplete(updateCallback: UpdateCallback): void;\r\n\r\n    serialize(): SerializedPart;\r\n    remove(offset: number, len: number): string | undefined;\r\n    split(offset: number): IBasePart;\r\n    validateAndInsert(offset: number, str: string, inputType: string | undefined): boolean;\r\n    appendUntilRejected(str: string, inputType: string | undefined): string | undefined;\r\n    updateDOMNode(node: Node): void;\r\n    canUpdateDOMNode(node: Node): boolean;\r\n    toDOMNode(): Node;\r\n\r\n    merge?(part: Part): boolean;\r\n}\r\n\r\ninterface IPillCandidatePart extends Omit<IBasePart, \"type\" | \"createAutoComplete\"> {\r\n    type: Type.PillCandidate | Type.Command;\r\n    createAutoComplete(updateCallback: UpdateCallback): AutocompleteWrapperModel | undefined;\r\n}\r\n\r\ninterface IPillPart extends Omit<IBasePart, \"type\" | \"resourceId\"> {\r\n    type: Type.AtRoomPill | Type.RoomPill | Type.UserPill;\r\n    resourceId: string;\r\n}\r\n\r\nexport type Part = IBasePart | IPillCandidatePart | IPillPart;\r\n\r\nabstract class BasePart {\r\n    protected _text: string;\r\n\r\n    public constructor(text = \"\") {\r\n        this._text = text;\r\n    }\r\n\r\n    // chr can also be a grapheme cluster\r\n    protected acceptsInsertion(chr: string, offset: number, inputType: string): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected acceptsRemoval(position: number, chr: string): boolean {\r\n        return true;\r\n    }\r\n\r\n    public merge(part: Part): boolean {\r\n        return false;\r\n    }\r\n\r\n    public split(offset: number): IBasePart {\r\n        const splitText = this.text.slice(offset);\r\n        this._text = this.text.slice(0, offset);\r\n        return new PlainPart(splitText);\r\n    }\r\n\r\n    // removes len chars, or returns the plain text this part should be replaced with\r\n    // if the part would become invalid if it removed everything.\r\n    public remove(offset: number, len: number): string | undefined {\r\n        // validate\r\n        const strWithRemoval = this.text.slice(0, offset) + this.text.slice(offset + len);\r\n        for (let i = offset; i < len + offset; ++i) {\r\n            const chr = this.text.charAt(i);\r\n            if (!this.acceptsRemoval(i, chr)) {\r\n                return strWithRemoval;\r\n            }\r\n        }\r\n        this._text = strWithRemoval;\r\n    }\r\n\r\n    // append str, returns the remaining string if a character was rejected.\r\n    public appendUntilRejected(str: string, inputType: string): string | undefined {\r\n        const offset = this.text.length;\r\n        // Take a copy as we will be taking chunks off the start of the string as we process them\r\n        // To only need to grapheme split the bits of the string we're working on.\r\n        let buffer = str;\r\n        while (buffer) {\r\n            const char = getFirstGrapheme(buffer);\r\n            if (!this.acceptsInsertion(char, offset + str.length - buffer.length, inputType)) {\r\n                break;\r\n            }\r\n            buffer = buffer.slice(char.length);\r\n        }\r\n\r\n        this._text += str.slice(0, str.length - buffer.length);\r\n        return buffer || undefined;\r\n    }\r\n\r\n    // inserts str at offset if all the characters in str were accepted, otherwise don't do anything\r\n    // return whether the str was accepted or not.\r\n    public validateAndInsert(offset: number, str: string, inputType: string): boolean {\r\n        for (let i = 0; i < str.length; ++i) {\r\n            const chr = str.charAt(i);\r\n            if (!this.acceptsInsertion(chr, offset + i, inputType)) {\r\n                return false;\r\n            }\r\n        }\r\n        const beforeInsert = this._text.slice(0, offset);\r\n        const afterInsert = this._text.slice(offset);\r\n        this._text = beforeInsert + str + afterInsert;\r\n        return true;\r\n    }\r\n\r\n    public createAutoComplete(updateCallback: UpdateCallback): void {}\r\n\r\n    protected trim(len: number): string {\r\n        const remaining = this._text.slice(len);\r\n        this._text = this._text.slice(0, len);\r\n        return remaining;\r\n    }\r\n\r\n    public get text(): string {\r\n        return this._text;\r\n    }\r\n\r\n    public abstract get type(): Type;\r\n\r\n    public get canEdit(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public get acceptsCaret(): boolean {\r\n        return this.canEdit;\r\n    }\r\n\r\n    public toString(): string {\r\n        return `${this.type}(${this.text})`;\r\n    }\r\n\r\n    public serialize(): SerializedPart {\r\n        return {\r\n            type: this.type as ISerializedPart[\"type\"],\r\n            text: this.text,\r\n        };\r\n    }\r\n\r\n    public abstract updateDOMNode(node: Node): void;\r\n    public abstract canUpdateDOMNode(node: Node): boolean;\r\n    public abstract toDOMNode(): Node;\r\n}\r\n\r\nabstract class PlainBasePart extends BasePart {\r\n    protected acceptsInsertion(chr: string, offset: number, inputType: string): boolean {\r\n        if (chr === \"\\n\" || EMOJIBASE_REGEX.test(chr)) {\r\n            return false;\r\n        }\r\n        // when not pasting or dropping text, reject characters that should start a pill candidate\r\n        if (inputType !== \"insertFromPaste\" && inputType !== \"insertFromDrop\") {\r\n            if (chr !== \"@\" && chr !== \"#\" && chr !== \":\" && chr !== \"+\") {\r\n                return true;\r\n            }\r\n\r\n            // split if we are at the beginning of the part text\r\n            if (offset === 0) {\r\n                return false;\r\n            }\r\n\r\n            // or split if the previous character is a space or regional emoji separator\r\n            // or if it is a + and this is a :\r\n            return (\r\n                this._text[offset - 1] !== \" \" &&\r\n                this._text[offset - 1] !== REGIONAL_EMOJI_SEPARATOR &&\r\n                (this._text[offset - 1] !== \"+\" || chr !== \":\")\r\n            );\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public toDOMNode(): Node {\r\n        return document.createTextNode(this.text);\r\n    }\r\n\r\n    public merge(part: Part): boolean {\r\n        if (part.type === this.type) {\r\n            this._text = this.text + part.text;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public updateDOMNode(node: Node): void {\r\n        if (node.textContent !== this.text) {\r\n            node.textContent = this.text;\r\n        }\r\n    }\r\n\r\n    public canUpdateDOMNode(node: Node): boolean {\r\n        return node.nodeType === Node.TEXT_NODE;\r\n    }\r\n}\r\n\r\n// exported for unit tests, should otherwise only be used through PartCreator\r\nexport class PlainPart extends PlainBasePart implements IBasePart {\r\n    public get type(): IBasePart[\"type\"] {\r\n        return Type.Plain;\r\n    }\r\n}\r\n\r\nexport abstract class PillPart extends BasePart implements IPillPart {\r\n    public constructor(public resourceId: string, label: string) {\r\n        super(label);\r\n    }\r\n\r\n    protected acceptsInsertion(chr: string): boolean {\r\n        return chr !== \" \";\r\n    }\r\n\r\n    protected acceptsRemoval(position: number, chr: string): boolean {\r\n        return position !== 0; //if you remove initial # or @, pill should become plain\r\n    }\r\n\r\n    public toDOMNode(): Node {\r\n        const container = document.createElement(\"span\");\r\n        container.setAttribute(\"spellcheck\", \"false\");\r\n        container.setAttribute(\"contentEditable\", \"false\");\r\n        if (this.onClick) container.onclick = this.onClick;\r\n        container.className = this.className;\r\n        container.appendChild(document.createTextNode(this.text));\r\n        this.setAvatar(container);\r\n        return container;\r\n    }\r\n\r\n    public updateDOMNode(node: HTMLElement): void {\r\n        const textNode = node.childNodes[0];\r\n        if (textNode.textContent !== this.text) {\r\n            textNode.textContent = this.text;\r\n        }\r\n        if (node.className !== this.className) {\r\n            node.className = this.className;\r\n        }\r\n        if (this.onClick && node.onclick !== this.onClick) {\r\n            node.onclick = this.onClick;\r\n        }\r\n        this.setAvatar(node);\r\n    }\r\n\r\n    public canUpdateDOMNode(node: HTMLElement): boolean {\r\n        return (\r\n            node.nodeType === Node.ELEMENT_NODE &&\r\n            node.nodeName === \"SPAN\" &&\r\n            node.childNodes.length === 1 &&\r\n            node.childNodes[0].nodeType === Node.TEXT_NODE\r\n        );\r\n    }\r\n\r\n    // helper method for subclasses\r\n    protected setAvatarVars(node: HTMLElement, avatarUrl: string, initialLetter: string): void {\r\n        const avatarBackground = `url('${avatarUrl}')`;\r\n        const avatarLetter = `'${initialLetter}'`;\r\n        // check if the value is changing,\r\n        // otherwise the avatars flicker on every keystroke while updating.\r\n        if (node.style.getPropertyValue(\"--avatar-background\") !== avatarBackground) {\r\n            node.style.setProperty(\"--avatar-background\", avatarBackground);\r\n        }\r\n        if (node.style.getPropertyValue(\"--avatar-letter\") !== avatarLetter) {\r\n            node.style.setProperty(\"--avatar-letter\", avatarLetter);\r\n        }\r\n    }\r\n\r\n    public serialize(): ISerializedPillPart {\r\n        return {\r\n            type: this.type,\r\n            text: this.text,\r\n            resourceId: this.resourceId,\r\n        };\r\n    }\r\n\r\n    public get canEdit(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public abstract get type(): IPillPart[\"type\"];\r\n\r\n    protected abstract get className(): string;\r\n\r\n    protected onClick?: () => void;\r\n\r\n    protected abstract setAvatar(node: HTMLElement): void;\r\n}\r\n\r\nclass NewlinePart extends BasePart implements IBasePart {\r\n    protected acceptsInsertion(chr: string, offset: number): boolean {\r\n        return offset === 0 && chr === \"\\n\";\r\n    }\r\n\r\n    protected acceptsRemoval(position: number, chr: string): boolean {\r\n        return true;\r\n    }\r\n\r\n    public toDOMNode(): Node {\r\n        return document.createElement(\"br\");\r\n    }\r\n\r\n    public merge(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public updateDOMNode(): void {}\r\n\r\n    public canUpdateDOMNode(node: HTMLElement): boolean {\r\n        return node.tagName === \"BR\";\r\n    }\r\n\r\n    public get type(): IBasePart[\"type\"] {\r\n        return Type.Newline;\r\n    }\r\n\r\n    // this makes the cursor skip this part when it is inserted\r\n    // rather than trying to append to it, which is what we want.\r\n    // As a newline can also be only one character, it makes sense\r\n    // as it can only be one character long. This caused #9741.\r\n    public get canEdit(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class EmojiPart extends BasePart implements IBasePart {\r\n    protected acceptsInsertion(chr: string, offset: number): boolean {\r\n        return EMOJIBASE_REGEX.test(chr);\r\n    }\r\n\r\n    protected acceptsRemoval(position: number, chr: string): boolean {\r\n        return false;\r\n    }\r\n\r\n    public toDOMNode(): Node {\r\n        const span = document.createElement(\"span\");\r\n        span.className = \"mx_Emoji\";\r\n        span.setAttribute(\"title\", unicodeToShortcode(this.text));\r\n        span.appendChild(document.createTextNode(this.text));\r\n        return span;\r\n    }\r\n\r\n    public updateDOMNode(node: HTMLElement): void {\r\n        const textNode = node.childNodes[0];\r\n        if (textNode.textContent !== this.text) {\r\n            node.setAttribute(\"title\", unicodeToShortcode(this.text));\r\n            textNode.textContent = this.text;\r\n        }\r\n    }\r\n\r\n    public canUpdateDOMNode(node: HTMLElement): boolean {\r\n        return node.className === \"mx_Emoji\";\r\n    }\r\n\r\n    public get type(): IBasePart[\"type\"] {\r\n        return Type.Emoji;\r\n    }\r\n\r\n    public get canEdit(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public get acceptsCaret(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nclass RoomPillPart extends PillPart {\r\n    public constructor(resourceId: string, label: string, private room?: Room) {\r\n        super(resourceId, label);\r\n    }\r\n\r\n    protected setAvatar(node: HTMLElement): void {\r\n        let initialLetter = \"\";\r\n        let avatarUrl = Avatar.avatarUrlForRoom(this.room ?? null, 16, 16, \"crop\");\r\n        if (!avatarUrl) {\r\n            initialLetter = Avatar.getInitialLetter(this.room?.name || this.resourceId) ?? \"\";\r\n            avatarUrl = Avatar.defaultAvatarUrlForString(this.room?.roomId ?? this.resourceId);\r\n        }\r\n        this.setAvatarVars(node, avatarUrl, initialLetter);\r\n    }\r\n\r\n    public get type(): IPillPart[\"type\"] {\r\n        return Type.RoomPill;\r\n    }\r\n\r\n    protected get className(): string {\r\n        return \"mx_Pill \" + (this.room?.isSpaceRoom() ? \"mx_SpacePill\" : \"mx_RoomPill\");\r\n    }\r\n}\r\n\r\nclass AtRoomPillPart extends RoomPillPart {\r\n    public constructor(text: string, room: Room) {\r\n        super(text, text, room);\r\n    }\r\n\r\n    public get type(): IPillPart[\"type\"] {\r\n        return Type.AtRoomPill;\r\n    }\r\n\r\n    public serialize(): ISerializedPillPart {\r\n        return {\r\n            type: this.type,\r\n            text: this.text,\r\n        };\r\n    }\r\n}\r\n\r\nclass UserPillPart extends PillPart {\r\n    public constructor(userId: string, displayName: string, private member?: RoomMember) {\r\n        super(userId, displayName);\r\n    }\r\n\r\n    public get type(): IPillPart[\"type\"] {\r\n        return Type.UserPill;\r\n    }\r\n\r\n    protected get className(): string {\r\n        return \"mx_UserPill mx_Pill\";\r\n    }\r\n\r\n    protected setAvatar(node: HTMLElement): void {\r\n        if (!this.member) {\r\n            return;\r\n        }\r\n        const name = this.member.name || this.member.userId;\r\n        const defaultAvatarUrl = Avatar.defaultAvatarUrlForString(this.member.userId);\r\n        const avatarUrl = Avatar.avatarUrlForMember(this.member, 16, 16, \"crop\");\r\n        let initialLetter = \"\";\r\n        if (avatarUrl === defaultAvatarUrl) {\r\n            initialLetter = Avatar.getInitialLetter(name) ?? \"\";\r\n        }\r\n        this.setAvatarVars(node, avatarUrl, initialLetter);\r\n    }\r\n\r\n    protected onClick = (): void => {\r\n        defaultDispatcher.dispatch({\r\n            action: Action.ViewUser,\r\n            member: this.member,\r\n        });\r\n    };\r\n}\r\n\r\nclass PillCandidatePart extends PlainBasePart implements IPillCandidatePart {\r\n    public constructor(text: string, private autoCompleteCreator: IAutocompleteCreator) {\r\n        super(text);\r\n    }\r\n\r\n    public createAutoComplete(updateCallback: UpdateCallback): AutocompleteWrapperModel | undefined {\r\n        return this.autoCompleteCreator.create?.(updateCallback);\r\n    }\r\n\r\n    protected acceptsInsertion(chr: string, offset: number, inputType: string): boolean {\r\n        if (offset === 0) {\r\n            return true;\r\n        } else {\r\n            return super.acceptsInsertion(chr, offset, inputType);\r\n        }\r\n    }\r\n\r\n    public merge(): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected acceptsRemoval(position: number, chr: string): boolean {\r\n        return true;\r\n    }\r\n\r\n    public get type(): IPillCandidatePart[\"type\"] {\r\n        return Type.PillCandidate;\r\n    }\r\n}\r\n\r\nexport function getAutoCompleteCreator(getAutocompleterComponent: GetAutocompleterComponent, updateQuery: UpdateQuery) {\r\n    return (partCreator: PartCreator) => {\r\n        return (updateCallback: UpdateCallback) => {\r\n            return new AutocompleteWrapperModel(updateCallback, getAutocompleterComponent, updateQuery, partCreator);\r\n        };\r\n    };\r\n}\r\n\r\ntype AutoCompleteCreator = ReturnType<typeof getAutoCompleteCreator>;\r\n\r\ninterface IAutocompleteCreator {\r\n    create: ((updateCallback: UpdateCallback) => AutocompleteWrapperModel) | undefined;\r\n}\r\n\r\nexport class PartCreator {\r\n    protected readonly autoCompleteCreator: IAutocompleteCreator;\r\n\r\n    public constructor(\r\n        private readonly room: Room,\r\n        private readonly client: MatrixClient,\r\n        autoCompleteCreator: AutoCompleteCreator | null = null,\r\n    ) {\r\n        // pre-create the creator as an object even without callback so it can already be passed\r\n        // to PillCandidatePart (e.g. while deserializing) and set later on\r\n        this.autoCompleteCreator = { create: autoCompleteCreator?.(this) };\r\n    }\r\n\r\n    public setAutoCompleteCreator(autoCompleteCreator: AutoCompleteCreator): void {\r\n        this.autoCompleteCreator.create = autoCompleteCreator(this);\r\n    }\r\n\r\n    public createPartForInput(input: string, partIndex: number, inputType?: string): Part {\r\n        switch (input[0]) {\r\n            case \"#\":\r\n            case \"@\":\r\n            case \":\":\r\n            case \"+\":\r\n                return this.pillCandidate(\"\");\r\n            case \"\\n\":\r\n                return new NewlinePart();\r\n            default:\r\n                if (EMOJIBASE_REGEX.test(getFirstGrapheme(input))) {\r\n                    return new EmojiPart();\r\n                }\r\n                return new PlainPart();\r\n        }\r\n    }\r\n\r\n    public createDefaultPart(text: string): Part {\r\n        return this.plain(text);\r\n    }\r\n\r\n    public deserializePart(part: SerializedPart): Part | undefined {\r\n        switch (part.type) {\r\n            case Type.Plain:\r\n                return this.plain(part.text);\r\n            case Type.Newline:\r\n                return this.newline();\r\n            case Type.Emoji:\r\n                return this.emoji(part.text);\r\n            case Type.AtRoomPill:\r\n                return this.atRoomPill(part.text);\r\n            case Type.PillCandidate:\r\n                return this.pillCandidate(part.text);\r\n            case Type.RoomPill:\r\n                return part.resourceId ? this.roomPill(part.resourceId) : undefined;\r\n            case Type.UserPill:\r\n                return part.resourceId ? this.userPill(part.text, part.resourceId) : undefined;\r\n        }\r\n    }\r\n\r\n    public plain(text: string): PlainPart {\r\n        return new PlainPart(text);\r\n    }\r\n\r\n    public newline(): NewlinePart {\r\n        return new NewlinePart(\"\\n\");\r\n    }\r\n\r\n    public emoji(text: string): EmojiPart {\r\n        return new EmojiPart(text);\r\n    }\r\n\r\n    public pillCandidate(text: string): PillCandidatePart {\r\n        return new PillCandidatePart(text, this.autoCompleteCreator);\r\n    }\r\n\r\n    public roomPill(alias: string, roomId?: string): RoomPillPart {\r\n        let room: Room | undefined;\r\n        if (roomId || alias[0] !== \"#\") {\r\n            room = this.client.getRoom(roomId || alias) ?? undefined;\r\n        } else {\r\n            room = this.client.getRooms().find((r) => {\r\n                return r.getCanonicalAlias() === alias || r.getAltAliases().includes(alias);\r\n            });\r\n        }\r\n        return new RoomPillPart(alias, room ? room.name : alias, room);\r\n    }\r\n\r\n    public atRoomPill(text: string): AtRoomPillPart {\r\n        return new AtRoomPillPart(text, this.room);\r\n    }\r\n\r\n    public userPill(displayName: string, userId: string): UserPillPart {\r\n        const member = this.room.getMember(userId);\r\n        return new UserPillPart(userId, displayName, member || undefined);\r\n    }\r\n\r\n    private static isRegionalIndicator(c: string): boolean {\r\n        const codePoint = c.codePointAt(0) ?? 0;\r\n        return codePoint != 0 && c.length == 2 && 0x1f1e6 <= codePoint && codePoint <= 0x1f1ff;\r\n    }\r\n\r\n    public plainWithEmoji(text: string): (PlainPart | EmojiPart)[] {\r\n        const parts: (PlainPart | EmojiPart)[] = [];\r\n        let plainText = \"\";\r\n\r\n        const splitter = new GraphemeSplitter();\r\n        for (const char of splitter.iterateGraphemes(text)) {\r\n            if (EMOJIBASE_REGEX.test(char)) {\r\n                if (plainText) {\r\n                    parts.push(this.plain(plainText));\r\n                    plainText = \"\";\r\n                }\r\n                parts.push(this.emoji(char));\r\n                if (PartCreator.isRegionalIndicator(text)) {\r\n                    parts.push(this.plain(REGIONAL_EMOJI_SEPARATOR));\r\n                }\r\n            } else {\r\n                plainText += char;\r\n            }\r\n        }\r\n        if (plainText) {\r\n            parts.push(this.plain(plainText));\r\n        }\r\n        return parts;\r\n    }\r\n\r\n    public createMentionParts(\r\n        insertTrailingCharacter: boolean,\r\n        displayName: string,\r\n        userId: string,\r\n    ): [UserPillPart, PlainPart] {\r\n        const pill = this.userPill(displayName, userId);\r\n        if (!SettingsStore.getValue(\"MessageComposerInput.insertTrailingColon\")) {\r\n            insertTrailingCharacter = false;\r\n        }\r\n        const postfix = this.plain(insertTrailingCharacter ? \": \" : \" \");\r\n        return [pill, postfix];\r\n    }\r\n}\r\n\r\n// part creator that support auto complete for /commands,\r\n// used in SendMessageComposer\r\nexport class CommandPartCreator extends PartCreator {\r\n    public createPartForInput(text: string, partIndex: number): Part {\r\n        // at beginning and starts with /? create\r\n        if (partIndex === 0 && text[0] === \"/\") {\r\n            // text will be inserted by model, so pass empty string\r\n            return this.command(\"\");\r\n        } else {\r\n            return super.createPartForInput(text, partIndex);\r\n        }\r\n    }\r\n\r\n    public command(text: string): CommandPart {\r\n        return new CommandPart(text, this.autoCompleteCreator);\r\n    }\r\n\r\n    public deserializePart(part: SerializedPart): Part | undefined {\r\n        if (part.type === Type.Command) {\r\n            return this.command(part.text);\r\n        } else {\r\n            return super.deserializePart(part);\r\n        }\r\n    }\r\n}\r\n\r\nclass CommandPart extends PillCandidatePart {\r\n    public get type(): IPillCandidatePart[\"type\"] {\r\n        return Type.Command;\r\n    }\r\n}\r\n"],"mappings":"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"}