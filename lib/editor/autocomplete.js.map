{"version":3,"file":"autocomplete.js","names":["AutocompleteWrapperModel","constructor","updateCallback","getAutocompleterComponent","updateQuery","partCreator","_defineProperty2","default","onEscape","e","close","hasSelection","hasCompletions","ac","countCompletions","confirmCompletion","onConfirmCompletion","startSelection","acComponent","forceComplete","selectPreviousSelection","moveSelection","selectNextSelection","onPartUpdate","part","pos","partIndex","index","text","onComponentConfirm","completion","replaceParts","partForCompletion","completionId","type","roomPill","plain","suffix","atRoomPill","createMentionParts","command","plainWithEmoji","exports"],"sources":["../../src/editor/autocomplete.ts"],"sourcesContent":["/*\r\nCopyright 2019 New Vector Ltd\r\nCopyright 2019 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { KeyboardEvent } from \"react\";\r\n\r\nimport { Part, CommandPartCreator, PartCreator } from \"./parts\";\r\nimport DocumentPosition from \"./position\";\r\nimport { ICompletion } from \"../autocomplete/Autocompleter\";\r\nimport Autocomplete from \"../components/views/rooms/Autocomplete\";\r\n\r\nexport interface ICallback {\r\n    replaceParts?: Part[];\r\n    close?: boolean;\r\n}\r\n\r\nexport type UpdateCallback = (data: ICallback) => void;\r\nexport type GetAutocompleterComponent = () => Autocomplete | null;\r\nexport type UpdateQuery = (test: string) => Promise<void>;\r\n\r\nexport default class AutocompleteWrapperModel {\r\n    private partIndex?: number;\r\n\r\n    public constructor(\r\n        private updateCallback: UpdateCallback,\r\n        private getAutocompleterComponent: GetAutocompleterComponent,\r\n        private updateQuery: UpdateQuery,\r\n        private partCreator: PartCreator | CommandPartCreator,\r\n    ) {}\r\n\r\n    public onEscape(e: KeyboardEvent): void {\r\n        this.getAutocompleterComponent()?.onEscape(e);\r\n    }\r\n\r\n    public close(): void {\r\n        this.updateCallback({ close: true });\r\n    }\r\n\r\n    public hasSelection(): boolean {\r\n        return !!this.getAutocompleterComponent()?.hasSelection();\r\n    }\r\n\r\n    public hasCompletions(): boolean {\r\n        const ac = this.getAutocompleterComponent();\r\n        return !!ac && ac.countCompletions() > 0;\r\n    }\r\n\r\n    public confirmCompletion(): void {\r\n        this.getAutocompleterComponent()?.onConfirmCompletion();\r\n        this.updateCallback({ close: true });\r\n    }\r\n\r\n    /**\r\n     * If there is no current autocompletion, start one and move to the first selection.\r\n     */\r\n    public async startSelection(): Promise<void> {\r\n        const acComponent = this.getAutocompleterComponent();\r\n        if (acComponent && acComponent.countCompletions() === 0) {\r\n            // Force completions to show for the text currently entered\r\n            await acComponent.forceComplete();\r\n        }\r\n    }\r\n\r\n    public selectPreviousSelection(): void {\r\n        this.getAutocompleterComponent()?.moveSelection(-1);\r\n    }\r\n\r\n    public selectNextSelection(): void {\r\n        this.getAutocompleterComponent()?.moveSelection(+1);\r\n    }\r\n\r\n    public onPartUpdate(part: Part, pos: DocumentPosition): Promise<void> {\r\n        this.partIndex = pos.index;\r\n        return this.updateQuery(part.text);\r\n    }\r\n\r\n    public onComponentConfirm(completion: ICompletion): void {\r\n        this.updateCallback({\r\n            replaceParts: this.partForCompletion(completion),\r\n            close: true,\r\n        });\r\n    }\r\n\r\n    private partForCompletion(completion: ICompletion): Part[] {\r\n        const { completionId } = completion;\r\n        const text = completion.completion;\r\n        switch (completion.type) {\r\n            case \"room\":\r\n                return [this.partCreator.roomPill(text, completionId), this.partCreator.plain(completion.suffix || \"\")];\r\n            case \"at-room\":\r\n                return [\r\n                    this.partCreator.atRoomPill(completionId || \"\"),\r\n                    this.partCreator.plain(completion.suffix || \"\"),\r\n                ];\r\n            case \"user\":\r\n                // Insert suffix only if the pill is the part with index 0 - we are at the start of the composer\r\n                return this.partCreator.createMentionParts(this.partIndex === 0, text, completionId || \"\");\r\n            case \"command\":\r\n                // command needs special handling for auto complete, but also renders as plain texts\r\n                return [(this.partCreator as CommandPartCreator).command(text)];\r\n            default:\r\n                // used for emoji and other plain text completion replacement\r\n                return this.partCreator.plainWithEmoji(text);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"}