{"version":3,"file":"model.js","names":["_diff","require","_position","_interopRequireDefault","_range","EditorModel","constructor","parts","partCreator","updateCallback","arguments","length","undefined","_defineProperty2","default","_ref","replaceParts","close","pos","autoCompletePartIdx","_parts","splice","autoCompletePartCount","lastPart","lastPartIndex","DocumentPosition","text","_autoComplete","_partCreator","transformCallback","setTransformCallback","setUpdateCallback","isEmpty","reduce","len","part","clone","clonedParts","map","p","deserializePart","serialize","filter","Boolean","insertPart","index","activePartIdx","removePart","replacePart","autoComplete","getPositionAtEnd","serializeParts","diff","newValue","inputType","caret","previousValue","diffDeletion","diffAtCaret","offset","reset","serializedParts","insert","position","insertIndex","splitAt","newTextLength","i","update","positionForOffset","at","atNodeEnd","removedOffsetDecrease","removed","removeText","addedLen","added","addText","mergeAdjacentParts","caretOffset","newPosition","canOpenAutoComplete","acPromise","setActivePart","transformAddedLen","getTransformAddedLen","result","Number","isFinite","ac","createAutoComplete","onAutoComplete","onPartUpdate","Promise","resolve","prevPart","isMerged","merge","amount","Math","min","canEdit","replaceWith","remove","createDefaultPart","secondPart","split","str","addLen","it","validateAndInsert","splitPart","newPart","createPartForInput","oldStr","appendUntilRejected","console","error","totalOffset","atPartEnd","currentOffset","findIndex","partLen","startRange","positionA","positionB","Range","replaceRange","startPosition","endPosition","endOffset","asOffset","newStartPartIndex","asPosition","newEndPartIndex","insertIdx","transform","callback","exports"],"sources":["../../src/editor/model.ts"],"sourcesContent":["/*\r\nCopyright 2019 New Vector Ltd\r\nCopyright 2019 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { diffAtCaret, diffDeletion, IDiff } from \"./diff\";\r\nimport DocumentPosition, { IPosition } from \"./position\";\r\nimport Range from \"./range\";\r\nimport { SerializedPart, Part, PartCreator } from \"./parts\";\r\nimport AutocompleteWrapperModel, { ICallback } from \"./autocomplete\";\r\nimport DocumentOffset from \"./offset\";\r\nimport { Caret } from \"./caret\";\r\n\r\n/**\r\n * @callback ModelCallback\r\n * @param {DocumentPosition?} caretPosition the position where the caret should be position\r\n * @param {string?} inputType the inputType of the DOM input event\r\n * @param {object?} diff an object with `removed` and `added` strings\r\n */\r\n\r\n/**\r\n * @callback TransformCallback\r\n * @param {DocumentPosition?} caretPosition the position where the caret should be position\r\n * @param {string?} inputType the inputType of the DOM input event\r\n * @param {object?} diff an object with `removed` and `added` strings\r\n * @return {Number?} addedLen how many characters were added/removed (-) before the caret during the transformation step.\r\n *    This is used to adjust the caret position.\r\n */\r\n\r\n/**\r\n * @callback ManualTransformCallback\r\n * @return the caret position\r\n */\r\n\r\ntype TransformCallback = (caretPosition: DocumentPosition, inputType: string | undefined, diff: IDiff) => number | void;\r\ntype UpdateCallback = (caret?: Caret, inputType?: string, diff?: IDiff) => void;\r\ntype ManualTransformCallback = () => Caret;\r\n\r\nexport default class EditorModel {\r\n    private _parts: Part[];\r\n    private readonly _partCreator: PartCreator;\r\n    private activePartIdx: number | null = null;\r\n    private _autoComplete: AutocompleteWrapperModel | null = null;\r\n    private autoCompletePartIdx: number | null = null;\r\n    private autoCompletePartCount = 0;\r\n    private transformCallback: TransformCallback | null = null;\r\n\r\n    public constructor(parts: Part[], partCreator: PartCreator, private updateCallback: UpdateCallback | null = null) {\r\n        this._parts = parts;\r\n        this._partCreator = partCreator;\r\n        this.transformCallback = null;\r\n    }\r\n\r\n    /**\r\n     * Set a callback for the transformation step.\r\n     * While processing an update, right before calling the update callback,\r\n     * a transform callback can be called, which serves to do modifications\r\n     * on the model that can span multiple parts. Also see `startRange()`.\r\n     * @param {TransformCallback} transformCallback\r\n     */\r\n    public setTransformCallback(transformCallback: TransformCallback): void {\r\n        this.transformCallback = transformCallback;\r\n    }\r\n\r\n    /**\r\n     * Set a callback for rerendering the model after it has been updated.\r\n     * @param {ModelCallback} updateCallback\r\n     */\r\n    public setUpdateCallback(updateCallback: UpdateCallback): void {\r\n        this.updateCallback = updateCallback;\r\n    }\r\n\r\n    public get partCreator(): PartCreator {\r\n        return this._partCreator;\r\n    }\r\n\r\n    public get isEmpty(): boolean {\r\n        return this._parts.reduce((len, part) => len + part.text.length, 0) === 0;\r\n    }\r\n\r\n    public clone(): EditorModel {\r\n        const clonedParts = this.parts\r\n            .map((p) => this.partCreator.deserializePart(p.serialize()))\r\n            .filter((p): p is Part => Boolean(p));\r\n        return new EditorModel(clonedParts, this._partCreator, this.updateCallback);\r\n    }\r\n\r\n    private insertPart(index: number, part: Part): void {\r\n        this._parts.splice(index, 0, part);\r\n        if (this.activePartIdx !== null && this.activePartIdx >= index) {\r\n            ++this.activePartIdx;\r\n        }\r\n        if (this.autoCompletePartIdx !== null && this.autoCompletePartIdx >= index) {\r\n            ++this.autoCompletePartIdx;\r\n        }\r\n    }\r\n\r\n    private removePart(index: number): void {\r\n        this._parts.splice(index, 1);\r\n        if (index === this.activePartIdx) {\r\n            this.activePartIdx = null;\r\n        } else if (this.activePartIdx !== null && this.activePartIdx > index) {\r\n            --this.activePartIdx;\r\n        }\r\n        if (index === this.autoCompletePartIdx) {\r\n            this.autoCompletePartIdx = null;\r\n        } else if (this.autoCompletePartIdx !== null && this.autoCompletePartIdx > index) {\r\n            --this.autoCompletePartIdx;\r\n        }\r\n    }\r\n\r\n    private replacePart(index: number, part: Part): void {\r\n        this._parts.splice(index, 1, part);\r\n    }\r\n\r\n    public get parts(): Part[] {\r\n        return this._parts;\r\n    }\r\n\r\n    public get autoComplete(): AutocompleteWrapperModel | null {\r\n        if (this.activePartIdx === this.autoCompletePartIdx) {\r\n            return this._autoComplete;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getPositionAtEnd(): DocumentPosition {\r\n        if (this._parts.length) {\r\n            const index = this._parts.length - 1;\r\n            const part = this._parts[index];\r\n            return new DocumentPosition(index, part.text.length);\r\n        } else {\r\n            // part index -1, as there are no parts to point at\r\n            return new DocumentPosition(-1, 0);\r\n        }\r\n    }\r\n\r\n    public serializeParts(): SerializedPart[] {\r\n        return this._parts.map((p) => p.serialize());\r\n    }\r\n\r\n    private diff(newValue: string, inputType: string | undefined, caret: DocumentOffset): IDiff {\r\n        const previousValue = this.parts.reduce((text, p) => text + p.text, \"\");\r\n        // can't use caret position with drag and drop\r\n        if (inputType === \"deleteByDrag\") {\r\n            return diffDeletion(previousValue, newValue);\r\n        } else {\r\n            return diffAtCaret(previousValue, newValue, caret.offset);\r\n        }\r\n    }\r\n\r\n    public reset(serializedParts: SerializedPart[], caret?: Caret, inputType?: string): void {\r\n        this._parts = serializedParts\r\n            .map((p) => this._partCreator.deserializePart(p))\r\n            .filter((p): p is Part => Boolean(p));\r\n        if (!caret) {\r\n            caret = this.getPositionAtEnd();\r\n        }\r\n        // close auto complete if open\r\n        // this would happen when clearing the composer after sending\r\n        // a message with the autocomplete still open\r\n        if (this._autoComplete) {\r\n            this._autoComplete = null;\r\n            this.autoCompletePartIdx = null;\r\n        }\r\n        this.updateCallback?.(caret, inputType);\r\n    }\r\n\r\n    /**\r\n     * Inserts the given parts at the given position.\r\n     * Should be run inside a `model.transform()` callback.\r\n     * @param {Part[]} parts the parts to replace the range with\r\n     * @param {DocumentPosition} position the position to start inserting at\r\n     * @return {Number} the amount of characters added\r\n     */\r\n    public insert(parts: Part[], position: IPosition): number {\r\n        const insertIndex = this.splitAt(position);\r\n        let newTextLength = 0;\r\n        for (let i = 0; i < parts.length; ++i) {\r\n            const part = parts[i];\r\n            newTextLength += part.text.length;\r\n            this.insertPart(insertIndex + i, part);\r\n        }\r\n        return newTextLength;\r\n    }\r\n\r\n    public update(newValue: string, inputType: string | undefined, caret: DocumentOffset): Promise<void> {\r\n        const diff = this.diff(newValue, inputType, caret);\r\n        const position = this.positionForOffset(diff.at || 0, caret.atNodeEnd);\r\n        let removedOffsetDecrease = 0;\r\n        if (diff.removed) {\r\n            removedOffsetDecrease = this.removeText(position, diff.removed.length);\r\n        }\r\n        let addedLen = 0;\r\n        if (diff.added) {\r\n            addedLen = this.addText(position, diff.added, inputType);\r\n        }\r\n        this.mergeAdjacentParts();\r\n        const caretOffset = (diff.at || 0) - removedOffsetDecrease + addedLen;\r\n        let newPosition = this.positionForOffset(caretOffset, true);\r\n        const canOpenAutoComplete = inputType !== \"insertFromPaste\" && inputType !== \"insertFromDrop\";\r\n        const acPromise = this.setActivePart(newPosition, canOpenAutoComplete);\r\n        if (this.transformCallback) {\r\n            const transformAddedLen = this.getTransformAddedLen(newPosition, inputType, diff);\r\n            newPosition = this.positionForOffset(caretOffset + transformAddedLen, true);\r\n        }\r\n        this.updateCallback?.(newPosition, inputType, diff);\r\n        return acPromise;\r\n    }\r\n\r\n    private getTransformAddedLen(newPosition: DocumentPosition, inputType: string | undefined, diff: IDiff): number {\r\n        const result = this.transformCallback?.(newPosition, inputType, diff);\r\n        return Number.isFinite(result) ? (result as number) : 0;\r\n    }\r\n\r\n    private setActivePart(pos: DocumentPosition, canOpenAutoComplete: boolean): Promise<void> {\r\n        const { index } = pos;\r\n        const part = this._parts[index];\r\n        if (part) {\r\n            if (index !== this.activePartIdx) {\r\n                this.activePartIdx = index;\r\n                if (canOpenAutoComplete && this.activePartIdx !== this.autoCompletePartIdx) {\r\n                    // else try to create one\r\n                    const ac = part.createAutoComplete(this.onAutoComplete);\r\n                    if (ac) {\r\n                        // make sure that react picks up the difference between both acs\r\n                        this._autoComplete = ac;\r\n                        this.autoCompletePartIdx = index;\r\n                        this.autoCompletePartCount = 1;\r\n                    }\r\n                }\r\n            }\r\n            // not autoComplete, only there if active part is autocomplete part\r\n            if (this.autoComplete) {\r\n                return this.autoComplete.onPartUpdate(part, pos);\r\n            }\r\n        } else {\r\n            this.activePartIdx = null;\r\n            this._autoComplete = null;\r\n            this.autoCompletePartIdx = null;\r\n            this.autoCompletePartCount = 0;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private onAutoComplete = ({ replaceParts, close }: ICallback): void => {\r\n        let pos: DocumentPosition | undefined;\r\n        if (replaceParts) {\r\n            const autoCompletePartIdx = this.autoCompletePartIdx || 0;\r\n            this._parts.splice(autoCompletePartIdx, this.autoCompletePartCount, ...replaceParts);\r\n            this.autoCompletePartCount = replaceParts.length;\r\n            const lastPart = replaceParts[replaceParts.length - 1];\r\n            const lastPartIndex = autoCompletePartIdx + replaceParts.length - 1;\r\n            pos = new DocumentPosition(lastPartIndex, lastPart.text.length);\r\n        }\r\n        if (close) {\r\n            this._autoComplete = null;\r\n            this.autoCompletePartIdx = null;\r\n            this.autoCompletePartCount = 0;\r\n        }\r\n        // rerender even if editor contents didn't change\r\n        // to make sure the MessageEditor checks\r\n        // model.autoComplete being empty and closes it\r\n        this.updateCallback?.(pos);\r\n    };\r\n\r\n    private mergeAdjacentParts(): void {\r\n        let prevPart: Part | undefined;\r\n        for (let i = 0; i < this._parts.length; ++i) {\r\n            let part: Part | undefined = this._parts[i];\r\n            const isEmpty = !part.text.length;\r\n            const isMerged = !isEmpty && prevPart && prevPart.merge?.(part);\r\n            if (isEmpty || isMerged) {\r\n                // remove empty or merged part\r\n                part = prevPart;\r\n                this.removePart(i);\r\n                //repeat this index, as it's removed now\r\n                --i;\r\n            }\r\n            prevPart = part;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * removes `len` amount of characters at `pos`.\r\n     * @param {Object} pos\r\n     * @param {Number} len\r\n     * @return {Number} how many characters before pos were also removed,\r\n     * usually because of non-editable parts that can only be removed in their entirety.\r\n     */\r\n    public removeText(pos: IPosition, len: number): number {\r\n        let { index, offset } = pos;\r\n        let removedOffsetDecrease = 0;\r\n        while (len > 0) {\r\n            // part might be undefined here\r\n            let part = this._parts[index];\r\n            const amount = Math.min(len, part.text.length - offset);\r\n            // don't allow 0 amount deletions\r\n            if (amount) {\r\n                if (part.canEdit) {\r\n                    const replaceWith = part.remove(offset, amount);\r\n                    if (typeof replaceWith === \"string\") {\r\n                        this.replacePart(index, this._partCreator.createDefaultPart(replaceWith));\r\n                    }\r\n                    part = this._parts[index];\r\n                    // remove empty part\r\n                    if (!part.text.length) {\r\n                        this.removePart(index);\r\n                    } else {\r\n                        index += 1;\r\n                    }\r\n                } else {\r\n                    removedOffsetDecrease += offset;\r\n                    this.removePart(index);\r\n                }\r\n            } else {\r\n                index += 1;\r\n            }\r\n            len -= amount;\r\n            offset = 0;\r\n        }\r\n        return removedOffsetDecrease;\r\n    }\r\n\r\n    // return part index where insertion will insert between at offset\r\n    private splitAt(pos: IPosition): number {\r\n        if (pos.index === -1) {\r\n            return 0;\r\n        }\r\n        if (pos.offset === 0) {\r\n            return pos.index;\r\n        }\r\n        const part = this._parts[pos.index];\r\n        if (pos.offset >= part.text.length) {\r\n            return pos.index + 1;\r\n        }\r\n\r\n        const secondPart = part.split(pos.offset);\r\n        this.insertPart(pos.index + 1, secondPart);\r\n        return pos.index + 1;\r\n    }\r\n\r\n    /**\r\n     * inserts `str` into the model at `pos`.\r\n     * @param {Object} pos\r\n     * @param {string} str\r\n     * @param {string} inputType the source of the input, see html InputEvent.inputType\r\n     * @return {Number} how far from position (in characters) the insertion ended.\r\n     * This can be more than the length of `str` when crossing non-editable parts, which are skipped.\r\n     */\r\n    private addText(pos: IPosition, str: string, inputType: string | undefined): number {\r\n        let { index } = pos;\r\n        const { offset } = pos;\r\n        let addLen = str.length;\r\n        const part = this._parts[index];\r\n\r\n        let it: string | undefined = str;\r\n\r\n        if (part) {\r\n            if (part.canEdit) {\r\n                if (part.validateAndInsert(offset, str, inputType)) {\r\n                    it = undefined;\r\n                } else {\r\n                    const splitPart = part.split(offset);\r\n                    index += 1;\r\n                    this.insertPart(index, splitPart);\r\n                }\r\n            } else if (offset !== 0) {\r\n                // not-editable part, caret is not at start,\r\n                // so insert str after this part\r\n                addLen += part.text.length - offset;\r\n                index += 1;\r\n            }\r\n        } else if (index < 0) {\r\n            // if position was not found (index: -1, as happens for empty editor)\r\n            // reset it to insert as first part\r\n            index = 0;\r\n        }\r\n\r\n        while (it) {\r\n            const newPart = this._partCreator.createPartForInput(it, index, inputType);\r\n            const oldStr = it;\r\n            it = newPart.appendUntilRejected(it, inputType);\r\n            if (it === oldStr) {\r\n                // nothing changed, break out of this infinite loop and log an error\r\n                console.error(`Failed to update model for input (str ${it}) (type ${inputType})`);\r\n                break;\r\n            }\r\n            this.insertPart(index, newPart);\r\n            index += 1;\r\n        }\r\n        return addLen;\r\n    }\r\n\r\n    public positionForOffset(totalOffset: number, atPartEnd = false): DocumentPosition {\r\n        let currentOffset = 0;\r\n        const index = this._parts.findIndex((part) => {\r\n            const partLen = part.text.length;\r\n            if (\r\n                (atPartEnd && currentOffset + partLen >= totalOffset) ||\r\n                (!atPartEnd && currentOffset + partLen > totalOffset)\r\n            ) {\r\n                return true;\r\n            }\r\n            currentOffset += partLen;\r\n            return false;\r\n        });\r\n        if (index === -1) {\r\n            return this.getPositionAtEnd();\r\n        } else {\r\n            return new DocumentPosition(index, totalOffset - currentOffset);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a range, which can span across multiple parts, to find and replace text.\r\n     * @param {DocumentPosition} positionA a boundary of the range\r\n     * @param {DocumentPosition?} positionB the other boundary of the range, optional\r\n     * @return {Range}\r\n     */\r\n    public startRange(positionA: DocumentPosition, positionB = positionA): Range {\r\n        return new Range(this, positionA, positionB);\r\n    }\r\n\r\n    public replaceRange(startPosition: DocumentPosition, endPosition: DocumentPosition, parts: Part[]): void {\r\n        // convert end position to offset, so it is independent of how the document is split into parts\r\n        // which we'll change when splitting up at the start position\r\n        const endOffset = endPosition.asOffset(this);\r\n        const newStartPartIndex = this.splitAt(startPosition);\r\n        // convert it back to position once split at start\r\n        endPosition = endOffset.asPosition(this);\r\n        const newEndPartIndex = this.splitAt(endPosition);\r\n        for (let i = newEndPartIndex - 1; i >= newStartPartIndex; --i) {\r\n            this.removePart(i);\r\n        }\r\n        let insertIdx = newStartPartIndex;\r\n        for (const part of parts) {\r\n            this.insertPart(insertIdx, part);\r\n            insertIdx += 1;\r\n        }\r\n        this.mergeAdjacentParts();\r\n    }\r\n\r\n    /**\r\n     * Performs a transformation not part of an update cycle.\r\n     * Modifying the model should only happen inside a transform call if not part of an update call.\r\n     * @param {ManualTransformCallback} callback to run the transformations in\r\n     * @return {Promise} a promise when auto-complete (if applicable) is done updating\r\n     */\r\n    public transform(callback: ManualTransformCallback): Promise<void> {\r\n        const pos = callback();\r\n        let acPromise: Promise<void> | null = null;\r\n        if (!(pos instanceof Range)) {\r\n            acPromise = this.setActivePart(pos, true);\r\n        } else {\r\n            acPromise = Promise.resolve();\r\n        }\r\n        this.updateCallback?.(pos);\r\n        return acPromise;\r\n    }\r\n}\r\n"],"mappings":"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"}