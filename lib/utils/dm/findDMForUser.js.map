{"version":3,"file":"findDMForUser.js","names":["_DMRoomMap","_interopRequireDefault","require","_isLocalRoom","_membership","_getFunctionalMembers","extractSuitableRoom","rooms","userId","findRoomWithThirdpartyInvites","suitableRooms","filter","r","getMyMembership","isLocalRoom","functionalUsers","getFunctionalMembers","members","currentState","getMembers","joinedMembers","m","includes","membership","isJoinedOrNearlyJoined","otherMember","find","length","thirdPartyInvites","getStateEvents","sort","r1","r2","getLastActiveTimestamp","undefined","findDMForUser","client","roomIdsForUserId","DMRoomMap","shared","getDMRoomsForUserId","roomsForUserId","map","id","getRoom","suitableRoomForUserId","allRoomIds","getRoomIds","allRooms","Array","from"],"sources":["../../../src/utils/dm/findDMForUser.ts"],"sourcesContent":["/*\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { MatrixClient, Room } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport DMRoomMap from \"../DMRoomMap\";\r\nimport { isLocalRoom } from \"../localRoom/isLocalRoom\";\r\nimport { isJoinedOrNearlyJoined } from \"../membership\";\r\nimport { getFunctionalMembers } from \"../room/getFunctionalMembers\";\r\n\r\n/**\r\n * Iterates the rooms and tries to find a DM room with the user identified by UserId.\r\n * A DM room is assumed if one of the following matches:\r\n * - Has two members and contains a membership for the user identified by userId\r\n * - findRoomWithThirdpartyInvites is true and has one member and a third pending third party invite\r\n *\r\n * If multiple rooms match it will return the one with the most recent event.\r\n *\r\n * @param rooms - Rooms to iterate\r\n * @param userId - User Id of the other user\r\n * @param [findRoomWithThirdpartyInvites] - Whether to find a DM for a pending thirdparty invite\r\n * @returns DM room if found or undefined if not\r\n */\r\nfunction extractSuitableRoom(rooms: Room[], userId: string, findRoomWithThirdpartyInvites: boolean): Room | undefined {\r\n    const suitableRooms = rooms\r\n        .filter((r) => {\r\n            // Validate that we are joined and the other person is also joined. We'll also make sure\r\n            // that the room also looks like a DM (until we have canonical DMs to tell us). For now,\r\n            // a DM is a room of two people that contains those two people exactly. This does mean\r\n            // that bots, assistants, etc will ruin a room's DM-ness, though this is a problem for\r\n            // canonical DMs to solve.\r\n            if (r && r.getMyMembership() === \"join\") {\r\n                if (isLocalRoom(r)) return false;\r\n\r\n                const functionalUsers = getFunctionalMembers(r);\r\n                const members = r.currentState.getMembers();\r\n                const joinedMembers = members.filter(\r\n                    (m) => !functionalUsers.includes(m.userId) && m.membership && isJoinedOrNearlyJoined(m.membership),\r\n                );\r\n                const otherMember = joinedMembers.find((m) => m.userId === userId);\r\n\r\n                if (otherMember && joinedMembers.length === 2) {\r\n                    return true;\r\n                }\r\n\r\n                const thirdPartyInvites = r.currentState.getStateEvents(\"m.room.third_party_invite\") || [];\r\n\r\n                // match room with pending third-party invite\r\n                return findRoomWithThirdpartyInvites && joinedMembers.length === 1 && thirdPartyInvites.length === 1;\r\n            }\r\n            return false;\r\n        })\r\n        .sort((r1, r2) => {\r\n            return r2.getLastActiveTimestamp() - r1.getLastActiveTimestamp();\r\n        });\r\n\r\n    if (suitableRooms.length) {\r\n        return suitableRooms[0];\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Tries to find a DM room with a specific user.\r\n *\r\n * @param {MatrixClient} client\r\n * @param {string} userId ID of the user to find the DM for\r\n * @returns {Room | undefined} Room if found\r\n */\r\nexport function findDMForUser(client: MatrixClient, userId: string): Room | undefined {\r\n    const roomIdsForUserId = DMRoomMap.shared().getDMRoomsForUserId(userId);\r\n    const roomsForUserId = roomIdsForUserId.map((id) => client.getRoom(id)).filter((r): r is Room => r !== null);\r\n    // Call with findRoomWithThirdpartyInvites = true to also include rooms with pending thirdparty invites.\r\n    // roomsForUserId can only contain rooms with the other user here,\r\n    // because they have been queried by getDMRoomsForUserId().\r\n    const suitableRoomForUserId = extractSuitableRoom(roomsForUserId, userId, true);\r\n\r\n    if (suitableRoomForUserId) {\r\n        return suitableRoomForUserId;\r\n    }\r\n\r\n    // Try to find in all rooms as a fallback\r\n    const allRoomIds = DMRoomMap.shared().getRoomIds();\r\n    const allRooms = Array.from(allRoomIds)\r\n        .map((id) => client.getRoom(id))\r\n        .filter((r): r is Room => r !== null);\r\n    return extractSuitableRoom(allRooms, userId, false);\r\n}\r\n"],"mappings":"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"}