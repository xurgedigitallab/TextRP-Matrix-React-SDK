{"version":3,"file":"filterValidMDirect.js","names":["filterValidMDirect","content","valid","filteredContent","Map","userId","roomIds","Object","entries","Array","isArray","filteredRoomIds","set","roomId","push","fromEntries","exports"],"sources":["../../../src/utils/dm/filterValidMDirect.ts"],"sourcesContent":["/*\r\nCopyright 2023 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\ninterface FilterValidMDirectResult {\r\n    /** Whether the entire content is valid */\r\n    valid: boolean;\r\n    /** Filtered content with only the valid parts */\r\n    filteredContent: Record<string, string[]>;\r\n}\r\n\r\n/**\r\n * Filter m.direct content to be compliant to https://spec.matrix.org/v1.6/client-server-api/#mdirect.\r\n *\r\n * @param content - Raw event content to be filerted\r\n * @returns value as a flag whether to content was valid.\r\n *          filteredContent with only values from the content that are spec compliant.\r\n */\r\nexport const filterValidMDirect = (content: unknown): FilterValidMDirectResult => {\r\n    if (content === null || typeof content !== \"object\") {\r\n        return {\r\n            valid: false,\r\n            filteredContent: {},\r\n        };\r\n    }\r\n\r\n    const filteredContent = new Map();\r\n    let valid = true;\r\n\r\n    for (const [userId, roomIds] of Object.entries(content)) {\r\n        if (typeof userId !== \"string\") {\r\n            valid = false;\r\n            continue;\r\n        }\r\n\r\n        if (!Array.isArray(roomIds)) {\r\n            valid = false;\r\n            continue;\r\n        }\r\n\r\n        const filteredRoomIds: string[] = [];\r\n        filteredContent.set(userId, filteredRoomIds);\r\n\r\n        for (const roomId of roomIds) {\r\n            if (typeof roomId === \"string\") {\r\n                filteredRoomIds.push(roomId);\r\n            } else {\r\n                valid = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        valid,\r\n        filteredContent: Object.fromEntries(filteredContent.entries()),\r\n    };\r\n};\r\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,kBAAkB,GAAIC,OAAgB,IAA+B;EAC9E,IAAIA,OAAO,KAAK,IAAI,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IACjD,OAAO;MACHC,KAAK,EAAE,KAAK;MACZC,eAAe,EAAE,CAAC;IACtB,CAAC;EACL;EAEA,MAAMA,eAAe,GAAG,IAAIC,GAAG,CAAC,CAAC;EACjC,IAAIF,KAAK,GAAG,IAAI;EAEhB,KAAK,MAAM,CAACG,MAAM,EAAEC,OAAO,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACP,OAAO,CAAC,EAAE;IACrD,IAAI,OAAOI,MAAM,KAAK,QAAQ,EAAE;MAC5BH,KAAK,GAAG,KAAK;MACb;IACJ;IAEA,IAAI,CAACO,KAAK,CAACC,OAAO,CAACJ,OAAO,CAAC,EAAE;MACzBJ,KAAK,GAAG,KAAK;MACb;IACJ;IAEA,MAAMS,eAAyB,GAAG,EAAE;IACpCR,eAAe,CAACS,GAAG,CAACP,MAAM,EAAEM,eAAe,CAAC;IAE5C,KAAK,MAAME,MAAM,IAAIP,OAAO,EAAE;MAC1B,IAAI,OAAOO,MAAM,KAAK,QAAQ,EAAE;QAC5BF,eAAe,CAACG,IAAI,CAACD,MAAM,CAAC;MAChC,CAAC,MAAM;QACHX,KAAK,GAAG,KAAK;MACjB;IACJ;EACJ;EAEA,OAAO;IACHA,KAAK;IACLC,eAAe,EAAEI,MAAM,CAACQ,WAAW,CAACZ,eAAe,CAACK,OAAO,CAAC,CAAC;EACjE,CAAC;AACL,CAAC;AAACQ,OAAA,CAAAhB,kBAAA,GAAAA,kBAAA"}