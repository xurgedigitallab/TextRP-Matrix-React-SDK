{"version":3,"file":"notifications.js","names":["_event","require","_read_receipts","_room","_SettingsStore","_interopRequireDefault","deviceNotificationSettingsKeys","exports","getLocalNotificationAccountDataEventType","deviceId","LOCAL_NOTIFICATION_SETTINGS_PREFIX","name","createLocalNotificationSettingsIfNeeded","cli","isGuest","eventType","event","getAccountData","isSilenced","some","key","SettingsStore","getValue","setAccountData","is_silenced","localNotificationsAreSilenced","getContent","clearRoomNotification","room","client","lastEvent","getLastLiveEvent","receiptType","roomId","ReceiptType","Read","ReadPrivate","sendReadReceipt","setUnreadNotificationCount","NotificationCountType","Highlight","Total","thread","getThreads","setThreadUnreadNotificationCount","id","clearAllNotifications","receiptPromises","getRooms","reduce","promises","getUnreadNotificationCount","promise","push","Promise","all"],"sources":["../../src/utils/notifications.ts"],"sourcesContent":["/*\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { MatrixClient } from \"matrix-js-sdk/src/client\";\r\nimport { LOCAL_NOTIFICATION_SETTINGS_PREFIX } from \"matrix-js-sdk/src/@types/event\";\r\nimport { LocalNotificationSettings } from \"matrix-js-sdk/src/@types/local_notifications\";\r\nimport { ReceiptType } from \"matrix-js-sdk/src/@types/read_receipts\";\r\nimport { NotificationCountType, Room } from \"matrix-js-sdk/src/models/room\";\r\n\r\nimport SettingsStore from \"../settings/SettingsStore\";\r\n\r\nexport const deviceNotificationSettingsKeys = [\r\n    \"notificationsEnabled\",\r\n    \"notificationBodyEnabled\",\r\n    \"audioNotificationsEnabled\",\r\n];\r\n\r\nexport function getLocalNotificationAccountDataEventType(deviceId: string | null): string {\r\n    return `${LOCAL_NOTIFICATION_SETTINGS_PREFIX.name}.${deviceId}`;\r\n}\r\n\r\nexport async function createLocalNotificationSettingsIfNeeded(cli: MatrixClient): Promise<void> {\r\n    if (cli.isGuest()) {\r\n        return;\r\n    }\r\n    const eventType = getLocalNotificationAccountDataEventType(cli.deviceId!);\r\n    const event = cli.getAccountData(eventType);\r\n    // New sessions will create an account data event to signify they support\r\n    // remote toggling of push notifications on this device. Default `is_silenced=true`\r\n    // For backwards compat purposes, older sessions will need to check settings value\r\n    // to determine what the state of `is_silenced`\r\n    if (!event) {\r\n        // If any of the above is true, we fall in the \"backwards compat\" case,\r\n        // and `is_silenced` will be set to `false`\r\n        const isSilenced = !deviceNotificationSettingsKeys.some((key) => SettingsStore.getValue(key));\r\n\r\n        await cli.setAccountData(eventType, {\r\n            is_silenced: isSilenced,\r\n        });\r\n    }\r\n}\r\n\r\nexport function localNotificationsAreSilenced(cli: MatrixClient): boolean {\r\n    const eventType = getLocalNotificationAccountDataEventType(cli.deviceId!);\r\n    const event = cli.getAccountData(eventType);\r\n    return event?.getContent<LocalNotificationSettings>()?.is_silenced ?? false;\r\n}\r\n\r\n/**\r\n * Mark a room as read\r\n * @param room\r\n * @param client\r\n * @returns a promise that resolves when the room has been marked as read\r\n */\r\nexport async function clearRoomNotification(room: Room, client: MatrixClient): Promise<{} | undefined> {\r\n    const lastEvent = room.getLastLiveEvent();\r\n\r\n    try {\r\n        if (lastEvent) {\r\n            const receiptType = SettingsStore.getValue(\"sendReadReceipts\", room.roomId)\r\n                ? ReceiptType.Read\r\n                : ReceiptType.ReadPrivate;\r\n            return await client.sendReadReceipt(lastEvent, receiptType, true);\r\n        } else {\r\n            return {};\r\n        }\r\n    } finally {\r\n        // We've had a lot of stuck unread notifications that in e2ee rooms\r\n        // They occur on event decryption when clients try to replicate the logic\r\n        //\r\n        // This resets the notification on a room, even though no read receipt\r\n        // has been sent, particularly useful when the clients has incorrectly\r\n        // notified a user.\r\n        room.setUnreadNotificationCount(NotificationCountType.Highlight, 0);\r\n        room.setUnreadNotificationCount(NotificationCountType.Total, 0);\r\n        for (const thread of room.getThreads()) {\r\n            room.setThreadUnreadNotificationCount(thread.id, NotificationCountType.Highlight, 0);\r\n            room.setThreadUnreadNotificationCount(thread.id, NotificationCountType.Total, 0);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Marks all rooms with an unread counter as read\r\n * @param client The matrix client\r\n * @returns a promise that resolves when all rooms have been marked as read\r\n */\r\nexport function clearAllNotifications(client: MatrixClient): Promise<Array<{} | undefined>> {\r\n    const receiptPromises = client.getRooms().reduce((promises: Array<Promise<{} | undefined>>, room: Room) => {\r\n        if (room.getUnreadNotificationCount() > 0) {\r\n            const promise = clearRoomNotification(room, client);\r\n            promises.push(promise);\r\n        }\r\n\r\n        return promises;\r\n    }, []);\r\n\r\n    return Promise.all(receiptPromises);\r\n}\r\n"],"mappings":"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"}