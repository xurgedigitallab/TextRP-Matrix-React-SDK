{"version":3,"file":"strings.js","names":["_logger","require","_graphemer","_interopRequireDefault","copyPlaintext","text","navigator","clipboard","writeText","textArea","document","createElement","value","style","top","left","position","body","appendChild","selection","getSelection","range","createRange","selectNode","removeAllRanges","addRange","successful","execCommand","removeChild","e","logger","error","selectText","target","selectNodeContents","window","copyNode","ref","getSelectedText","toString","getFirstGrapheme","str","splitter","GraphemeSplitter","result","iterateGraphemes","next","done"],"sources":["../../src/utils/strings.ts"],"sourcesContent":["/*\r\nCopyright 2020 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n/**\r\n * Copy plaintext to user's clipboard\r\n * It will overwrite user's selection range\r\n * In certain browsers it may only work if triggered by a user action or may ask user for permissions\r\n * Tries to use new async clipboard API if available\r\n * @param text the plaintext to put in the user's clipboard\r\n */\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\nimport GraphemeSplitter from \"graphemer\";\r\n\r\nexport async function copyPlaintext(text: string): Promise<boolean> {\r\n    try {\r\n        if (navigator?.clipboard?.writeText) {\r\n            await navigator.clipboard.writeText(text);\r\n            return true;\r\n        } else {\r\n            const textArea = document.createElement(\"textarea\");\r\n            textArea.value = text;\r\n\r\n            // Avoid scrolling to bottom\r\n            textArea.style.top = \"0\";\r\n            textArea.style.left = \"0\";\r\n            textArea.style.position = \"fixed\";\r\n\r\n            document.body.appendChild(textArea);\r\n            const selection = document.getSelection()!;\r\n            const range = document.createRange();\r\n            // range.selectNodeContents(textArea);\r\n            range.selectNode(textArea);\r\n            selection.removeAllRanges();\r\n            selection.addRange(range);\r\n\r\n            const successful = document.execCommand(\"copy\");\r\n            selection.removeAllRanges();\r\n            document.body.removeChild(textArea);\r\n            return successful;\r\n        }\r\n    } catch (e) {\r\n        logger.error(\"copyPlaintext failed\", e);\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function selectText(target: Element): void {\r\n    const range = document.createRange();\r\n    range.selectNodeContents(target);\r\n\r\n    const selection = window.getSelection()!;\r\n    selection.removeAllRanges();\r\n    selection.addRange(range);\r\n}\r\n\r\n/**\r\n * Copy rich text to user's clipboard\r\n * It will overwrite user's selection range\r\n * In certain browsers it may only work if triggered by a user action or may ask user for permissions\r\n * @param ref pointer to the node to copy\r\n */\r\nexport function copyNode(ref?: Element | null): boolean {\r\n    if (!ref) return false;\r\n    selectText(ref);\r\n    return document.execCommand(\"copy\");\r\n}\r\n\r\n/**\r\n * Returns text which has been selected by the user\r\n * @returns the selected text\r\n */\r\nexport function getSelectedText(): string {\r\n    return window.getSelection()!.toString();\r\n}\r\n\r\n/**\r\n * Returns the first grapheme in the given string,\r\n * especially useful for strings containing emoji, will not break compound emoji up.\r\n * @param str string to parse\r\n * @returns the first grapheme or an empty string if given an empty string\r\n */\r\nexport function getFirstGrapheme(str: string): string {\r\n    const splitter = new GraphemeSplitter();\r\n    const result = splitter.iterateGraphemes(str).next();\r\n    return result.done ? \"\" : result.value;\r\n}\r\n"],"mappings":";;;;;;;;;;;AAsBA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,UAAA,GAAAC,sBAAA,CAAAF,OAAA;AAvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIO,eAAeG,aAAaA,CAACC,IAAY,EAAoB;EAChE,IAAI;IACA,IAAIC,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAAE;MACjC,MAAMF,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,IAAI,CAAC;MACzC,OAAO,IAAI;IACf,CAAC,MAAM;MACH,MAAMI,QAAQ,GAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC;MACnDF,QAAQ,CAACG,KAAK,GAAGP,IAAI;;MAErB;MACAI,QAAQ,CAACI,KAAK,CAACC,GAAG,GAAG,GAAG;MACxBL,QAAQ,CAACI,KAAK,CAACE,IAAI,GAAG,GAAG;MACzBN,QAAQ,CAACI,KAAK,CAACG,QAAQ,GAAG,OAAO;MAEjCN,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,QAAQ,CAAC;MACnC,MAAMU,SAAS,GAAGT,QAAQ,CAACU,YAAY,CAAC,CAAE;MAC1C,MAAMC,KAAK,GAAGX,QAAQ,CAACY,WAAW,CAAC,CAAC;MACpC;MACAD,KAAK,CAACE,UAAU,CAACd,QAAQ,CAAC;MAC1BU,SAAS,CAACK,eAAe,CAAC,CAAC;MAC3BL,SAAS,CAACM,QAAQ,CAACJ,KAAK,CAAC;MAEzB,MAAMK,UAAU,GAAGhB,QAAQ,CAACiB,WAAW,CAAC,MAAM,CAAC;MAC/CR,SAAS,CAACK,eAAe,CAAC,CAAC;MAC3Bd,QAAQ,CAACO,IAAI,CAACW,WAAW,CAACnB,QAAQ,CAAC;MACnC,OAAOiB,UAAU;IACrB;EACJ,CAAC,CAAC,OAAOG,CAAC,EAAE;IACRC,cAAM,CAACC,KAAK,CAAC,sBAAsB,EAAEF,CAAC,CAAC;EAC3C;EACA,OAAO,KAAK;AAChB;AAEO,SAASG,UAAUA,CAACC,MAAe,EAAQ;EAC9C,MAAMZ,KAAK,GAAGX,QAAQ,CAACY,WAAW,CAAC,CAAC;EACpCD,KAAK,CAACa,kBAAkB,CAACD,MAAM,CAAC;EAEhC,MAAMd,SAAS,GAAGgB,MAAM,CAACf,YAAY,CAAC,CAAE;EACxCD,SAAS,CAACK,eAAe,CAAC,CAAC;EAC3BL,SAAS,CAACM,QAAQ,CAACJ,KAAK,CAAC;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASe,QAAQA,CAACC,GAAoB,EAAW;EACpD,IAAI,CAACA,GAAG,EAAE,OAAO,KAAK;EACtBL,UAAU,CAACK,GAAG,CAAC;EACf,OAAO3B,QAAQ,CAACiB,WAAW,CAAC,MAAM,CAAC;AACvC;;AAEA;AACA;AACA;AACA;AACO,SAASW,eAAeA,CAAA,EAAW;EACtC,OAAOH,MAAM,CAACf,YAAY,CAAC,CAAC,CAAEmB,QAAQ,CAAC,CAAC;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,gBAAgBA,CAACC,GAAW,EAAU;EAClD,MAAMC,QAAQ,GAAG,IAAIC,kBAAgB,CAAC,CAAC;EACvC,MAAMC,MAAM,GAAGF,QAAQ,CAACG,gBAAgB,CAACJ,GAAG,CAAC,CAACK,IAAI,CAAC,CAAC;EACpD,OAAOF,MAAM,CAACG,IAAI,GAAG,EAAE,GAAGH,MAAM,CAAChC,KAAK;AAC1C"}