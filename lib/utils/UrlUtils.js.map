{"version":3,"file":"UrlUtils.js","names":["abbreviateUrl","u","parsedUrl","parseUrl","e","console","error","pathname","host","unabbreviateUrl","longUrl","startsWith","parsed","hostname","includes","window","location","protocol","URL"],"sources":["../../src/utils/UrlUtils.ts"],"sourcesContent":["/*\r\nCopyright 2019, 2021 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\n/**\r\n * If a url has no path component, etc. abbreviate it to just the hostname\r\n *\r\n * @param {string} u The url to be abbreviated\r\n * @returns {string} The abbreviated url\r\n */\r\nexport function abbreviateUrl(u?: string): string {\r\n    if (!u) return \"\";\r\n\r\n    let parsedUrl: URL;\r\n    try {\r\n        parsedUrl = parseUrl(u);\r\n    } catch (e) {\r\n        console.error(e);\r\n        // if it's something we can't parse as a url then just return it\r\n        return u;\r\n    }\r\n\r\n    if (parsedUrl.pathname === \"/\") {\r\n        // we ignore query / hash parts: these aren't relevant for IS server URLs\r\n        return parsedUrl.host || \"\";\r\n    }\r\n\r\n    return u;\r\n}\r\n\r\nexport function unabbreviateUrl(u?: string): string {\r\n    if (!u) return \"\";\r\n\r\n    let longUrl = u;\r\n    if (!u.startsWith(\"https://\")) longUrl = \"https://\" + u;\r\n    const parsed = parseUrl(longUrl);\r\n    if (!parsed.hostname) return u;\r\n\r\n    return longUrl;\r\n}\r\n\r\nexport function parseUrl(u: string): URL {\r\n    if (!u.includes(\":\")) {\r\n        u = window.location.protocol + u;\r\n    }\r\n    return new URL(u);\r\n}\r\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,aAAaA,CAACC,CAAU,EAAU;EAC9C,IAAI,CAACA,CAAC,EAAE,OAAO,EAAE;EAEjB,IAAIC,SAAc;EAClB,IAAI;IACAA,SAAS,GAAGC,QAAQ,CAACF,CAAC,CAAC;EAC3B,CAAC,CAAC,OAAOG,CAAC,EAAE;IACRC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB;IACA,OAAOH,CAAC;EACZ;EAEA,IAAIC,SAAS,CAACK,QAAQ,KAAK,GAAG,EAAE;IAC5B;IACA,OAAOL,SAAS,CAACM,IAAI,IAAI,EAAE;EAC/B;EAEA,OAAOP,CAAC;AACZ;AAEO,SAASQ,eAAeA,CAACR,CAAU,EAAU;EAChD,IAAI,CAACA,CAAC,EAAE,OAAO,EAAE;EAEjB,IAAIS,OAAO,GAAGT,CAAC;EACf,IAAI,CAACA,CAAC,CAACU,UAAU,CAAC,UAAU,CAAC,EAAED,OAAO,GAAG,UAAU,GAAGT,CAAC;EACvD,MAAMW,MAAM,GAAGT,QAAQ,CAACO,OAAO,CAAC;EAChC,IAAI,CAACE,MAAM,CAACC,QAAQ,EAAE,OAAOZ,CAAC;EAE9B,OAAOS,OAAO;AAClB;AAEO,SAASP,QAAQA,CAACF,CAAS,EAAO;EACrC,IAAI,CAACA,CAAC,CAACa,QAAQ,CAAC,GAAG,CAAC,EAAE;IAClBb,CAAC,GAAGc,MAAM,CAACC,QAAQ,CAACC,QAAQ,GAAGhB,CAAC;EACpC;EACA,OAAO,IAAIiB,GAAG,CAACjB,CAAC,CAAC;AACrB"}