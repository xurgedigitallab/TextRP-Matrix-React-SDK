{"version":3,"file":"EventUtils.js","names":["_event","require","_event2","_logger","_polls","_location","_beacon","_thread","_shouldHideEvent","_interopRequireDefault","_SettingsStore","_dispatcher","_MPollBody","_actions","_types","isContentActionable","mxEvent","status","eventStatus","isSent","EventStatus","SENT","isRedacted","getType","content","getContent","msgtype","hasOwnProperty","M_POLL_START","matches","M_POLL_END","M_BEACON_INFO","VoiceBroadcastInfoEventType","state","VoiceBroadcastInfoState","Started","canEditContent","matrixClient","isCancellable","EventType","RoomMessage","CANCELLED","isRelation","RelationType","Replace","getSender","getUserId","body","getOriginalContent","MsgType","Text","Emote","canEditOwnEvent","MAX_JUMP_DISTANCE","findEditableEvent","_ref","events","isForward","fromEventId","length","maxIdx","inc","beginIdx","endIdx","Math","min","max","foundFromEventId","i","e","getId","shouldHideEvent","MessageModerationState","exports","msc3531Enabled","getMsc3531Enabled","SettingsStore","getValue","getMessageModerationState","client","VISIBLE_FOR_ALL","visibility","messageVisibility","visible","sender","userId","SEE_THROUGH_FOR_CURRENT_USER","room","getRoom","getRoomId","EVENT_VISIBILITY_CHANGE_TYPE","name","currentState","maySendStateEvent","altName","HIDDEN_TO_CURRENT_USER","isVoiceMessage","fetchInitialEvent","roomId","eventId","initialEvent","eventData","fetchRoomEvent","MatrixEvent","logger","warn","supportsThreads","THREAD_RELATION_TYPE","getThread","threadId","threadRootId","mapper","getEventMapper","rootEvent","findEventById","createThread","editEvent","timelineRenderingType","getRelationsForEvent","launchPollEditor","defaultDispatcher","dispatch","action","Action","EditEvent","event","canCancel","QUEUED","NOT_SENT","ENCRYPTING","isLocationEvent","eventType","M_LOCATION","hasThreadSummary","isThreadRoot","replyToEvent","canPinEvent","highlightEvent","ViewRoom","event_id","highlighted","room_id","metricsTrigger","undefined"],"sources":["../../src/utils/EventUtils.ts"],"sourcesContent":["/*\r\nCopyright 2019 - 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { EventStatus, MatrixEvent } from \"matrix-js-sdk/src/models/event\";\r\nimport { EventType, EVENT_VISIBILITY_CHANGE_TYPE, MsgType, RelationType } from \"matrix-js-sdk/src/@types/event\";\r\nimport { MatrixClient } from \"matrix-js-sdk/src/client\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\nimport { M_POLL_END, M_POLL_START } from \"matrix-js-sdk/src/@types/polls\";\r\nimport { M_LOCATION } from \"matrix-js-sdk/src/@types/location\";\r\nimport { M_BEACON_INFO } from \"matrix-js-sdk/src/@types/beacon\";\r\nimport { THREAD_RELATION_TYPE } from \"matrix-js-sdk/src/models/thread\";\r\n\r\nimport shouldHideEvent from \"../shouldHideEvent\";\r\nimport { GetRelationsForEvent } from \"../components/views/rooms/EventTile\";\r\nimport SettingsStore from \"../settings/SettingsStore\";\r\nimport defaultDispatcher from \"../dispatcher/dispatcher\";\r\nimport { TimelineRenderingType } from \"../contexts/RoomContext\";\r\nimport { launchPollEditor } from \"../components/views/messages/MPollBody\";\r\nimport { Action } from \"../dispatcher/actions\";\r\nimport { ViewRoomPayload } from \"../dispatcher/payloads/ViewRoomPayload\";\r\nimport { VoiceBroadcastInfoEventType, VoiceBroadcastInfoState } from \"../voice-broadcast/types\";\r\n\r\n/**\r\n * Returns whether an event should allow actions like reply, reactions, edit, etc.\r\n * which effectively checks whether it's a regular message that has been sent and that we\r\n * can display.\r\n *\r\n * @param {MatrixEvent} mxEvent The event to check\r\n * @returns {boolean} true if actionable\r\n */\r\nexport function isContentActionable(mxEvent: MatrixEvent): boolean {\r\n    const { status: eventStatus } = mxEvent;\r\n\r\n    // status is SENT before remote-echo, null after\r\n    const isSent = !eventStatus || eventStatus === EventStatus.SENT;\r\n\r\n    if (isSent && !mxEvent.isRedacted()) {\r\n        if (mxEvent.getType() === \"m.room.message\") {\r\n            const content = mxEvent.getContent();\r\n            if (content.msgtype && content.msgtype !== \"m.bad.encrypted\" && content.hasOwnProperty(\"body\")) {\r\n                return true;\r\n            }\r\n        } else if (\r\n            mxEvent.getType() === \"m.sticker\" ||\r\n            M_POLL_START.matches(mxEvent.getType()) ||\r\n            M_POLL_END.matches(mxEvent.getType()) ||\r\n            M_BEACON_INFO.matches(mxEvent.getType()) ||\r\n            (mxEvent.getType() === VoiceBroadcastInfoEventType &&\r\n                mxEvent.getContent()?.state === VoiceBroadcastInfoState.Started)\r\n        ) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function canEditContent(matrixClient: MatrixClient, mxEvent: MatrixEvent): boolean {\r\n    const isCancellable = mxEvent.getType() === EventType.RoomMessage || M_POLL_START.matches(mxEvent.getType());\r\n\r\n    if (\r\n        !isCancellable ||\r\n        mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.isRedacted() ||\r\n        mxEvent.isRelation(RelationType.Replace) ||\r\n        mxEvent.getSender() !== matrixClient.getUserId()\r\n    ) {\r\n        return false;\r\n    }\r\n\r\n    const { msgtype, body } = mxEvent.getOriginalContent();\r\n    return (\r\n        M_POLL_START.matches(mxEvent.getType()) ||\r\n        ((msgtype === MsgType.Text || msgtype === MsgType.Emote) && !!body && typeof body === \"string\")\r\n    );\r\n}\r\n\r\nexport function canEditOwnEvent(matrixClient: MatrixClient, mxEvent: MatrixEvent): boolean {\r\n    // for now we only allow editing\r\n    // your own events. So this just call through\r\n    // In the future though, moderators will be able to\r\n    // edit other people's messages as well but we don't\r\n    // want findEditableEvent to return other people's events\r\n    // hence this method.\r\n    return canEditContent(matrixClient, mxEvent);\r\n}\r\n\r\nconst MAX_JUMP_DISTANCE = 100;\r\nexport function findEditableEvent({\r\n    matrixClient,\r\n    events,\r\n    isForward,\r\n    fromEventId,\r\n}: {\r\n    matrixClient: MatrixClient;\r\n    events: MatrixEvent[];\r\n    isForward: boolean;\r\n    fromEventId?: string;\r\n}): MatrixEvent | undefined {\r\n    if (!events.length) return;\r\n    const maxIdx = events.length - 1;\r\n    const inc = isForward ? 1 : -1;\r\n    const beginIdx = isForward ? 0 : maxIdx;\r\n    let endIdx = isForward ? maxIdx : 0;\r\n    if (!fromEventId) {\r\n        endIdx = Math.min(Math.max(0, beginIdx + inc * MAX_JUMP_DISTANCE), maxIdx);\r\n    }\r\n    let foundFromEventId = !fromEventId;\r\n    for (let i = beginIdx; i !== endIdx + inc; i += inc) {\r\n        const e = events[i];\r\n        // find start event first\r\n        if (!foundFromEventId && e.getId() === fromEventId) {\r\n            foundFromEventId = true;\r\n            // don't look further than MAX_JUMP_DISTANCE events from `fromEventId`\r\n            // to not iterate potentially 1000nds of events on key up/down\r\n            endIdx = Math.min(Math.max(0, i + inc * MAX_JUMP_DISTANCE), maxIdx);\r\n        } else if (foundFromEventId && !shouldHideEvent(e) && canEditOwnEvent(matrixClient, e)) {\r\n            // otherwise look for editable event\r\n            return e;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * How we should render a message depending on its moderation state.\r\n */\r\nexport enum MessageModerationState {\r\n    /**\r\n     * The message is visible to all.\r\n     */\r\n    VISIBLE_FOR_ALL = \"VISIBLE_FOR_ALL\",\r\n    /**\r\n     * The message is hidden pending moderation and we're not a user who should\r\n     * see it nevertheless.\r\n     */\r\n    HIDDEN_TO_CURRENT_USER = \"HIDDEN_TO_CURRENT_USER\",\r\n    /**\r\n     * The message is hidden pending moderation and we're either the author of\r\n     * the message or a moderator. In either case, we need to see the message\r\n     * with a marker.\r\n     */\r\n    SEE_THROUGH_FOR_CURRENT_USER = \"SEE_THROUGH_FOR_CURRENT_USER\",\r\n}\r\n\r\n// This is lazily initialized and cached since getMessageModerationState needs it,\r\n// and is called on timeline rendering hot-paths\r\nlet msc3531Enabled: boolean | null = null;\r\nconst getMsc3531Enabled = (): boolean => {\r\n    if (msc3531Enabled === null) {\r\n        msc3531Enabled = SettingsStore.getValue(\"feature_msc3531_hide_messages_pending_moderation\");\r\n    }\r\n    return msc3531Enabled!;\r\n};\r\n\r\n/**\r\n * Determine whether a message should be displayed as hidden pending moderation.\r\n *\r\n * If MSC3531 is deactivated in settings, all messages are considered visible\r\n * to all.\r\n */\r\nexport function getMessageModerationState(mxEvent: MatrixEvent, client: MatrixClient): MessageModerationState {\r\n    if (!getMsc3531Enabled()) {\r\n        return MessageModerationState.VISIBLE_FOR_ALL;\r\n    }\r\n    const visibility = mxEvent.messageVisibility();\r\n    if (visibility.visible) {\r\n        return MessageModerationState.VISIBLE_FOR_ALL;\r\n    }\r\n\r\n    // At this point, we know that the message is marked as hidden\r\n    // pending moderation. However, if we're the author or a moderator,\r\n    // we still need to display it.\r\n\r\n    if (mxEvent.sender?.userId === client.getUserId()) {\r\n        // We're the author, show the message.\r\n        return MessageModerationState.SEE_THROUGH_FOR_CURRENT_USER;\r\n    }\r\n\r\n    const room = client.getRoom(mxEvent.getRoomId());\r\n    if (\r\n        EVENT_VISIBILITY_CHANGE_TYPE.name &&\r\n        room?.currentState.maySendStateEvent(EVENT_VISIBILITY_CHANGE_TYPE.name, client.getUserId()!)\r\n    ) {\r\n        // We're a moderator (as indicated by prefixed event name), show the message.\r\n        return MessageModerationState.SEE_THROUGH_FOR_CURRENT_USER;\r\n    }\r\n    if (\r\n        EVENT_VISIBILITY_CHANGE_TYPE.altName &&\r\n        room?.currentState.maySendStateEvent(EVENT_VISIBILITY_CHANGE_TYPE.altName, client.getUserId()!)\r\n    ) {\r\n        // We're a moderator (as indicated by unprefixed event name), show the message.\r\n        return MessageModerationState.SEE_THROUGH_FOR_CURRENT_USER;\r\n    }\r\n    // For everybody else, hide the message.\r\n    return MessageModerationState.HIDDEN_TO_CURRENT_USER;\r\n}\r\n\r\nexport function isVoiceMessage(mxEvent: MatrixEvent): boolean {\r\n    const content = mxEvent.getContent();\r\n    // MSC2516 is a legacy identifier. See https://github.com/matrix-org/matrix-doc/pull/3245\r\n    return !!content[\"org.matrix.msc2516.voice\"] || !!content[\"org.matrix.msc3245.voice\"];\r\n}\r\n\r\nexport async function fetchInitialEvent(\r\n    client: MatrixClient,\r\n    roomId: string,\r\n    eventId: string,\r\n): Promise<MatrixEvent | null> {\r\n    let initialEvent: MatrixEvent | null;\r\n\r\n    try {\r\n        const eventData = await client.fetchRoomEvent(roomId, eventId);\r\n        initialEvent = new MatrixEvent(eventData);\r\n    } catch (e) {\r\n        logger.warn(\"Could not find initial event: \" + eventId);\r\n        initialEvent = null;\r\n    }\r\n\r\n    if (client.supportsThreads() && initialEvent?.isRelation(THREAD_RELATION_TYPE.name) && !initialEvent.getThread()) {\r\n        const threadId = initialEvent.threadRootId!;\r\n        const room = client.getRoom(roomId);\r\n        const mapper = client.getEventMapper();\r\n        const rootEvent = room?.findEventById(threadId) ?? mapper(await client.fetchRoomEvent(roomId, threadId));\r\n        try {\r\n            room?.createThread(threadId, rootEvent, [initialEvent], true);\r\n        } catch (e) {\r\n            logger.warn(\"Could not find root event: \" + threadId);\r\n        }\r\n    }\r\n\r\n    return initialEvent;\r\n}\r\n\r\nexport function editEvent(\r\n    matrixClient: MatrixClient,\r\n    mxEvent: MatrixEvent,\r\n    timelineRenderingType: TimelineRenderingType,\r\n    getRelationsForEvent?: GetRelationsForEvent,\r\n): void {\r\n    if (!canEditContent(matrixClient, mxEvent)) return;\r\n\r\n    if (M_POLL_START.matches(mxEvent.getType())) {\r\n        launchPollEditor(mxEvent, getRelationsForEvent);\r\n    } else {\r\n        defaultDispatcher.dispatch({\r\n            action: Action.EditEvent,\r\n            event: mxEvent,\r\n            timelineRenderingType: timelineRenderingType,\r\n        });\r\n    }\r\n}\r\n\r\nexport function canCancel(status?: EventStatus | null): boolean {\r\n    return status === EventStatus.QUEUED || status === EventStatus.NOT_SENT || status === EventStatus.ENCRYPTING;\r\n}\r\n\r\nexport const isLocationEvent = (event: MatrixEvent): boolean => {\r\n    const eventType = event.getType();\r\n    return (\r\n        M_LOCATION.matches(eventType) ||\r\n        (eventType === EventType.RoomMessage && M_LOCATION.matches(event.getContent().msgtype!))\r\n    );\r\n};\r\n\r\nexport function hasThreadSummary(event: MatrixEvent): boolean {\r\n    return event.isThreadRoot && !!event.getThread()?.length && !!event.getThread()!.replyToEvent;\r\n}\r\n\r\nexport function canPinEvent(event: MatrixEvent): boolean {\r\n    return !M_BEACON_INFO.matches(event.getType());\r\n}\r\n\r\nexport const highlightEvent = (roomId: string, eventId: string): void => {\r\n    defaultDispatcher.dispatch<ViewRoomPayload>({\r\n        action: Action.ViewRoom,\r\n        event_id: eventId,\r\n        highlighted: true,\r\n        room_id: roomId,\r\n        metricsTrigger: undefined, // room doesn't change\r\n    });\r\n};\r\n"],"mappings":"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"}