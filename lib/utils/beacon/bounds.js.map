{"version":3,"file":"bounds.js","names":["_arrays","require","_location","getBeaconBounds","beacons","coords","filterBoolean","map","beacon","latestLocationState","uri","parseGeoUri","undefined","length","sortedByLat","sort","left","right","latitude","sortedByLong","longitude","north","south","east","west","exports"],"sources":["../../../src/utils/beacon/bounds.ts"],"sourcesContent":["/*\r\nCopyright 2022 The Matrix.org Foundation C.I.C\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { Beacon } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport { filterBoolean } from \"../arrays\";\r\nimport { parseGeoUri } from \"../location\";\r\n\r\nexport type Bounds = {\r\n    north: number;\r\n    east: number;\r\n    west: number;\r\n    south: number;\r\n};\r\n\r\n/**\r\n * Get the geo bounds of given list of beacons\r\n *\r\n * Latitude:\r\n * equator: 0, North pole: 90, South pole -90\r\n * Longitude:\r\n * Prime Meridian (Greenwich): 0\r\n * east of Greenwich has a positive longitude, max 180\r\n * west of Greenwich has a negative longitude, min -180\r\n */\r\nexport const getBeaconBounds = (beacons: Beacon[]): Bounds | undefined => {\r\n    const coords = filterBoolean<GeolocationCoordinates>(\r\n        beacons.map((beacon) =>\r\n            !!beacon.latestLocationState?.uri ? parseGeoUri(beacon.latestLocationState.uri) : undefined,\r\n        ),\r\n    );\r\n\r\n    if (!coords.length) {\r\n        return;\r\n    }\r\n\r\n    // sort descending\r\n    const sortedByLat = [...coords].sort((left, right) => right.latitude - left.latitude);\r\n    const sortedByLong = [...coords].sort((left, right) => right.longitude - left.longitude);\r\n\r\n    if (sortedByLat.length < 1 || sortedByLong.length < 1) return;\r\n\r\n    return {\r\n        north: sortedByLat[0]!.latitude,\r\n        south: sortedByLat[sortedByLat.length - 1]!.latitude,\r\n        east: sortedByLong[0]!.longitude,\r\n        west: sortedByLong[sortedByLong.length - 1]!.longitude,\r\n    };\r\n};\r\n"],"mappings":";;;;;;AAkBA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,SAAA,GAAAD,OAAA;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAME,eAAe,GAAIC,OAAiB,IAAyB;EACtE,MAAMC,MAAM,GAAG,IAAAC,qBAAa,EACxBF,OAAO,CAACG,GAAG,CAAEC,MAAM,IACf,CAAC,CAACA,MAAM,CAACC,mBAAmB,EAAEC,GAAG,GAAG,IAAAC,qBAAW,EAACH,MAAM,CAACC,mBAAmB,CAACC,GAAG,CAAC,GAAGE,SACtF,CACJ,CAAC;EAED,IAAI,CAACP,MAAM,CAACQ,MAAM,EAAE;IAChB;EACJ;;EAEA;EACA,MAAMC,WAAW,GAAG,CAAC,GAAGT,MAAM,CAAC,CAACU,IAAI,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAKA,KAAK,CAACC,QAAQ,GAAGF,IAAI,CAACE,QAAQ,CAAC;EACrF,MAAMC,YAAY,GAAG,CAAC,GAAGd,MAAM,CAAC,CAACU,IAAI,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAKA,KAAK,CAACG,SAAS,GAAGJ,IAAI,CAACI,SAAS,CAAC;EAExF,IAAIN,WAAW,CAACD,MAAM,GAAG,CAAC,IAAIM,YAAY,CAACN,MAAM,GAAG,CAAC,EAAE;EAEvD,OAAO;IACHQ,KAAK,EAAEP,WAAW,CAAC,CAAC,CAAC,CAAEI,QAAQ;IAC/BI,KAAK,EAAER,WAAW,CAACA,WAAW,CAACD,MAAM,GAAG,CAAC,CAAC,CAAEK,QAAQ;IACpDK,IAAI,EAAEJ,YAAY,CAAC,CAAC,CAAC,CAAEC,SAAS;IAChCI,IAAI,EAAEL,YAAY,CAACA,YAAY,CAACN,MAAM,GAAG,CAAC,CAAC,CAAEO;EACjD,CAAC;AACL,CAAC;AAACK,OAAA,CAAAtB,eAAA,GAAAA,eAAA"}