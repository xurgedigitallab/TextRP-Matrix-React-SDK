{"version":3,"file":"dispatcher.js","names":["_payloads","require","invariant","cond","error","Error","MatrixDispatcher","constructor","_defineProperty2","default","Map","payload","isDispatching","startDispatching","id","callbacks","isPending","get","invokeCallback","stopDispatching","register","callback","lastId","set","isHandled","unregister","has","delete","waitFor","ids","pendingPayload","undefined","dispatch","sync","arguments","length","AsyncActionPayload","fn","action","_dispatch","window","setTimeout","fire","exports","defaultDispatcher","mxDispatcher","_default"],"sources":["../../src/dispatcher/dispatcher.ts"],"sourcesContent":["/*\r\nCopyright 2015, 2016 OpenMarket Ltd\r\nCopyright 2017 New Vector Ltd\r\nCopyright 2020 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { Action } from \"./actions\";\r\nimport { ActionPayload, AsyncActionPayload } from \"./payloads\";\r\n\r\ntype DispatchToken = string;\r\n\r\nfunction invariant(cond: any, error: string): void {\r\n    if (!cond) throw new Error(error);\r\n}\r\n\r\n/**\r\n * A dispatcher for ActionPayloads (the default within the SDK).\r\n * Based on the old Flux dispatcher https://github.com/facebook/flux/blob/main/src/Dispatcher.js\r\n */\r\nexport class MatrixDispatcher {\r\n    private readonly callbacks = new Map<DispatchToken, (payload: ActionPayload) => void>();\r\n    private readonly isHandled = new Map<DispatchToken, boolean>();\r\n    private readonly isPending = new Map<DispatchToken, boolean>();\r\n    private pendingPayload?: ActionPayload;\r\n    private lastId = 1;\r\n\r\n    /**\r\n     * Registers a callback to be invoked with every dispatched payload. Returns\r\n     * a token that can be used with `waitFor()`.\r\n     */\r\n    public register(callback: (payload: ActionPayload) => void): DispatchToken {\r\n        const id = \"ID_\" + this.lastId++;\r\n        this.callbacks.set(id, callback);\r\n        if (this.isDispatching()) {\r\n            // If there is a dispatch happening right now then the newly registered callback should be skipped\r\n            this.isPending.set(id, true);\r\n            this.isHandled.set(id, true);\r\n        }\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Removes a callback based on its token.\r\n     */\r\n    public unregister(id: DispatchToken): void {\r\n        invariant(this.callbacks.has(id), `Dispatcher.unregister(...): '${id}' does not map to a registered callback.`);\r\n        this.callbacks.delete(id);\r\n    }\r\n\r\n    /**\r\n     * Waits for the callbacks specified to be invoked before continuing execution\r\n     * of the current callback. This method should only be used by a callback in\r\n     * response to a dispatched payload.\r\n     */\r\n    public waitFor(ids: DispatchToken[]): void {\r\n        invariant(this.isDispatching(), \"Dispatcher.waitFor(...): Must be invoked while dispatching.\");\r\n        for (const id of ids) {\r\n            if (this.isPending.get(id)) {\r\n                invariant(\r\n                    this.isHandled.get(id),\r\n                    `Dispatcher.waitFor(...): Circular dependency detected while waiting for '${id}'.`,\r\n                );\r\n                continue;\r\n            }\r\n            invariant(\r\n                this.callbacks.get(id),\r\n                `Dispatcher.waitFor(...): '${id}' does not map to a registered callback.`,\r\n            );\r\n            this.invokeCallback(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispatches a payload to all registered callbacks.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private _dispatch = (payload: ActionPayload): void => {\r\n        invariant(!this.isDispatching(), \"Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.\");\r\n        this.startDispatching(payload);\r\n        try {\r\n            for (const [id] of this.callbacks) {\r\n                if (this.isPending.get(id)) {\r\n                    continue;\r\n                }\r\n                this.invokeCallback(id);\r\n            }\r\n        } finally {\r\n            this.stopDispatching();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Is this Dispatcher currently dispatching.\r\n     */\r\n    public isDispatching(): boolean {\r\n        return !!this.pendingPayload;\r\n    }\r\n\r\n    /**\r\n     * Call the callback stored with the given id. Also do some internal\r\n     * bookkeeping.\r\n     *\r\n     * Must only be called with an id which has a callback and pendingPayload set\r\n     * @internal\r\n     */\r\n    private invokeCallback(id: DispatchToken): void {\r\n        this.isPending.set(id, true);\r\n        this.callbacks.get(id)!(this.pendingPayload!);\r\n        this.isHandled.set(id, true);\r\n    }\r\n\r\n    /**\r\n     * Set up bookkeeping needed when dispatching.\r\n     *\r\n     * @internal\r\n     */\r\n    private startDispatching(payload: ActionPayload): void {\r\n        for (const [id] of this.callbacks) {\r\n            this.isPending.set(id, false);\r\n            this.isHandled.set(id, false);\r\n        }\r\n        this.pendingPayload = payload;\r\n    }\r\n\r\n    /**\r\n     * Clear bookkeeping used for dispatching.\r\n     *\r\n     * @internal\r\n     */\r\n    private stopDispatching(): void {\r\n        this.pendingPayload = undefined;\r\n    }\r\n\r\n    /**\r\n     * Dispatches an event on the dispatcher's event bus.\r\n     * @param {ActionPayload} payload Required. The payload to dispatch.\r\n     * @param {boolean=false} sync Optional. Pass true to dispatch\r\n     *        synchronously. This is useful for anything triggering\r\n     *        an operation that the browser requires user interaction\r\n     *        for. Default false (async).\r\n     */\r\n    public dispatch<T extends ActionPayload>(payload: T, sync = false): void {\r\n        if (payload instanceof AsyncActionPayload) {\r\n            payload.fn((action: ActionPayload) => {\r\n                this.dispatch(action, sync);\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (sync) {\r\n            this._dispatch(payload);\r\n        } else {\r\n            // Unless the caller explicitly asked for us to dispatch synchronously,\r\n            // we always set a timeout to do this: The flux dispatcher complains\r\n            // if you dispatch from within a dispatch, so rather than action\r\n            // handlers having to worry about not calling anything that might\r\n            // then dispatch, we just do dispatches asynchronously.\r\n            window.setTimeout(this._dispatch, 0, payload);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shorthand for dispatch({action: Action.WHATEVER}, sync). No additional\r\n     * properties can be included with this version.\r\n     * @param {Action} action The action to dispatch.\r\n     * @param {boolean=false} sync Whether the dispatch should be sync or not.\r\n     * @see dispatch(action: ActionPayload, sync: boolean)\r\n     */\r\n    public fire(action: Action, sync = false): void {\r\n        this.dispatch({ action }, sync);\r\n    }\r\n}\r\n\r\nexport const defaultDispatcher = new MatrixDispatcher();\r\n\r\nif (!window.mxDispatcher) {\r\n    window.mxDispatcher = defaultDispatcher;\r\n}\r\n\r\nexport default defaultDispatcher;\r\n"],"mappings":";;;;;;;;AAmBA,IAAAA,SAAA,GAAAC,OAAA;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA,SAASC,SAASA,CAACC,IAAS,EAAEC,KAAa,EAAQ;EAC/C,IAAI,CAACD,IAAI,EAAE,MAAM,IAAIE,KAAK,CAACD,KAAK,CAAC;AACrC;;AAEA;AACA;AACA;AACA;AACO,MAAME,gBAAgB,CAAC;EAAAC,YAAA;IAAA,IAAAC,gBAAA,CAAAC,OAAA,qBACG,IAAIC,GAAG,CAAkD,CAAC;IAAA,IAAAF,gBAAA,CAAAC,OAAA,qBAC1D,IAAIC,GAAG,CAAyB,CAAC;IAAA,IAAAF,gBAAA,CAAAC,OAAA,qBACjC,IAAIC,GAAG,CAAyB,CAAC;IAAA,IAAAF,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA,kBAE7C,CAAC;IAgDlB;AACJ;AACA;IACI;IAAA,IAAAD,gBAAA,CAAAC,OAAA,qBACqBE,OAAsB,IAAW;MAClDT,SAAS,CAAC,CAAC,IAAI,CAACU,aAAa,CAAC,CAAC,EAAE,sEAAsE,CAAC;MACxG,IAAI,CAACC,gBAAgB,CAACF,OAAO,CAAC;MAC9B,IAAI;QACA,KAAK,MAAM,CAACG,EAAE,CAAC,IAAI,IAAI,CAACC,SAAS,EAAE;UAC/B,IAAI,IAAI,CAACC,SAAS,CAACC,GAAG,CAACH,EAAE,CAAC,EAAE;YACxB;UACJ;UACA,IAAI,CAACI,cAAc,CAACJ,EAAE,CAAC;QAC3B;MACJ,CAAC,SAAS;QACN,IAAI,CAACK,eAAe,CAAC,CAAC;MAC1B;IACJ,CAAC;EAAA;EA/DD;AACJ;AACA;AACA;EACWC,QAAQA,CAACC,QAA0C,EAAiB;IACvE,MAAMP,EAAE,GAAG,KAAK,GAAG,IAAI,CAACQ,MAAM,EAAE;IAChC,IAAI,CAACP,SAAS,CAACQ,GAAG,CAACT,EAAE,EAAEO,QAAQ,CAAC;IAChC,IAAI,IAAI,CAACT,aAAa,CAAC,CAAC,EAAE;MACtB;MACA,IAAI,CAACI,SAAS,CAACO,GAAG,CAACT,EAAE,EAAE,IAAI,CAAC;MAC5B,IAAI,CAACU,SAAS,CAACD,GAAG,CAACT,EAAE,EAAE,IAAI,CAAC;IAChC;IACA,OAAOA,EAAE;EACb;;EAEA;AACJ;AACA;EACWW,UAAUA,CAACX,EAAiB,EAAQ;IACvCZ,SAAS,CAAC,IAAI,CAACa,SAAS,CAACW,GAAG,CAACZ,EAAE,CAAC,EAAG,gCAA+BA,EAAG,0CAAyC,CAAC;IAC/G,IAAI,CAACC,SAAS,CAACY,MAAM,CAACb,EAAE,CAAC;EAC7B;;EAEA;AACJ;AACA;AACA;AACA;EACWc,OAAOA,CAACC,GAAoB,EAAQ;IACvC3B,SAAS,CAAC,IAAI,CAACU,aAAa,CAAC,CAAC,EAAE,6DAA6D,CAAC;IAC9F,KAAK,MAAME,EAAE,IAAIe,GAAG,EAAE;MAClB,IAAI,IAAI,CAACb,SAAS,CAACC,GAAG,CAACH,EAAE,CAAC,EAAE;QACxBZ,SAAS,CACL,IAAI,CAACsB,SAAS,CAACP,GAAG,CAACH,EAAE,CAAC,EACrB,4EAA2EA,EAAG,IACnF,CAAC;QACD;MACJ;MACAZ,SAAS,CACL,IAAI,CAACa,SAAS,CAACE,GAAG,CAACH,EAAE,CAAC,EACrB,6BAA4BA,EAAG,0CACpC,CAAC;MACD,IAAI,CAACI,cAAc,CAACJ,EAAE,CAAC;IAC3B;EACJ;EAqBA;AACJ;AACA;EACWF,aAAaA,CAAA,EAAY;IAC5B,OAAO,CAAC,CAAC,IAAI,CAACkB,cAAc;EAChC;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACYZ,cAAcA,CAACJ,EAAiB,EAAQ;IAC5C,IAAI,CAACE,SAAS,CAACO,GAAG,CAACT,EAAE,EAAE,IAAI,CAAC;IAC5B,IAAI,CAACC,SAAS,CAACE,GAAG,CAACH,EAAE,CAAC,CAAE,IAAI,CAACgB,cAAe,CAAC;IAC7C,IAAI,CAACN,SAAS,CAACD,GAAG,CAACT,EAAE,EAAE,IAAI,CAAC;EAChC;;EAEA;AACJ;AACA;AACA;AACA;EACYD,gBAAgBA,CAACF,OAAsB,EAAQ;IACnD,KAAK,MAAM,CAACG,EAAE,CAAC,IAAI,IAAI,CAACC,SAAS,EAAE;MAC/B,IAAI,CAACC,SAAS,CAACO,GAAG,CAACT,EAAE,EAAE,KAAK,CAAC;MAC7B,IAAI,CAACU,SAAS,CAACD,GAAG,CAACT,EAAE,EAAE,KAAK,CAAC;IACjC;IACA,IAAI,CAACgB,cAAc,GAAGnB,OAAO;EACjC;;EAEA;AACJ;AACA;AACA;AACA;EACYQ,eAAeA,CAAA,EAAS;IAC5B,IAAI,CAACW,cAAc,GAAGC,SAAS;EACnC;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACWC,QAAQA,CAA0BrB,OAAU,EAAsB;IAAA,IAApBsB,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAG,KAAK;IAC7D,IAAIvB,OAAO,YAAYyB,4BAAkB,EAAE;MACvCzB,OAAO,CAAC0B,EAAE,CAAEC,MAAqB,IAAK;QAClC,IAAI,CAACN,QAAQ,CAACM,MAAM,EAAEL,IAAI,CAAC;MAC/B,CAAC,CAAC;MACF;IACJ;IAEA,IAAIA,IAAI,EAAE;MACN,IAAI,CAACM,SAAS,CAAC5B,OAAO,CAAC;IAC3B,CAAC,MAAM;MACH;MACA;MACA;MACA;MACA;MACA6B,MAAM,CAACC,UAAU,CAAC,IAAI,CAACF,SAAS,EAAE,CAAC,EAAE5B,OAAO,CAAC;IACjD;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACW+B,IAAIA,CAACJ,MAAc,EAAsB;IAAA,IAApBL,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAG,KAAK;IACpC,IAAI,CAACF,QAAQ,CAAC;MAAEM;IAAO,CAAC,EAAEL,IAAI,CAAC;EACnC;AACJ;AAACU,OAAA,CAAArC,gBAAA,GAAAA,gBAAA;AAEM,MAAMsC,iBAAiB,GAAG,IAAItC,gBAAgB,CAAC,CAAC;AAACqC,OAAA,CAAAC,iBAAA,GAAAA,iBAAA;AAExD,IAAI,CAACJ,MAAM,CAACK,YAAY,EAAE;EACtBL,MAAM,CAACK,YAAY,GAAGD,iBAAiB;AAC3C;AAAC,IAAAE,QAAA,GAEcF,iBAAiB;AAAAD,OAAA,CAAAlC,OAAA,GAAAqC,QAAA"}