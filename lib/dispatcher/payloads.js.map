{"version":3,"file":"payloads.js","names":["AsyncActionPayload","action","constructor","readyFn","_defineProperty2","default","fn","exports"],"sources":["../../src/dispatcher/payloads.ts"],"sourcesContent":["/*\r\nCopyright 2020 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { DispatcherAction } from \"./actions\";\r\n\r\n/**\r\n * The base dispatch type exposed by our dispatcher.\r\n */\r\nexport interface ActionPayload {\r\n    [property: string]: any; // effectively makes this 'extends Object'\r\n    action: DispatcherAction;\r\n}\r\n\r\n/**\r\n * The function the dispatcher calls when ready for an AsyncActionPayload. The\r\n * single argument is used to start a dispatch. First the dispatcher calls the\r\n * outer function, then when the called function is ready it calls the cb\r\n * function to issue the dispatch. It may call the callback repeatedly if needed.\r\n */\r\nexport type AsyncActionFn = (cb: (action: ActionPayload) => void) => void;\r\n\r\n/**\r\n * An async version of ActionPayload\r\n */\r\nexport class AsyncActionPayload implements ActionPayload {\r\n    /**\r\n     * The function the dispatcher should call.\r\n     */\r\n    public readonly fn: AsyncActionFn;\r\n\r\n    /**\r\n     * @deprecated Not used on AsyncActionPayload.\r\n     */\r\n    public get action(): DispatcherAction {\r\n        return \"NOT_USED\";\r\n    }\r\n\r\n    /**\r\n     * Create a new AsyncActionPayload with the given ready function.\r\n     * @param {AsyncActionFn} readyFn The function to be called when the\r\n     * dispatcher is ready.\r\n     */\r\n    public constructor(readyFn: AsyncActionFn) {\r\n        this.fn = readyFn;\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACO,MAAMA,kBAAkB,CAA0B;EAMrD;AACJ;AACA;EACI,IAAWC,MAAMA,CAAA,EAAqB;IAClC,OAAO,UAAU;EACrB;;EAEA;AACJ;AACA;AACA;AACA;EACWC,WAAWA,CAACC,OAAsB,EAAE;IAjB3C;AACJ;AACA;IAFI,IAAAC,gBAAA,CAAAC,OAAA;IAkBI,IAAI,CAACC,EAAE,GAAGH,OAAO;EACrB;AACJ;AAACI,OAAA,CAAAP,kBAAA,GAAAA,kBAAA"}