{"version":3,"file":"Autocompleter.js","names":["_CommandProvider","_interopRequireDefault","require","_RoomProvider","_UserProvider","_EmojiProvider","_NotifProvider","_promise","_SpaceProvider","_RoomContext","_arrays","PROVIDERS","UserProvider","RoomProvider","EmojiProvider","NotifProvider","CommandProvider","SpaceProvider","PROVIDER_COMPLETION_TIMEOUT","Autocompleter","constructor","room","renderingType","arguments","length","undefined","TimelineRenderingType","Room","_defineProperty2","default","providers","map","Prov","destroy","forEach","p","getCompletions","query","selection","force","limit","completionsList","Promise","all","provider","timeout","filterBoolean","completions","i","command","getCurrentCommand","exports"],"sources":["../../src/autocomplete/Autocompleter.ts"],"sourcesContent":["/*\r\nCopyright 2016 Aviral Dasgupta\r\nCopyright 2017, 2018 New Vector Ltd\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { ReactElement } from \"react\";\r\nimport { Room } from \"matrix-js-sdk/src/models/room\";\r\n\r\nimport CommandProvider from \"./CommandProvider\";\r\nimport RoomProvider from \"./RoomProvider\";\r\nimport UserProvider from \"./UserProvider\";\r\nimport EmojiProvider from \"./EmojiProvider\";\r\nimport NotifProvider from \"./NotifProvider\";\r\nimport { timeout } from \"../utils/promise\";\r\nimport AutocompleteProvider, { ICommand } from \"./AutocompleteProvider\";\r\nimport SpaceProvider from \"./SpaceProvider\";\r\nimport { TimelineRenderingType } from \"../contexts/RoomContext\";\r\nimport { filterBoolean } from \"../utils/arrays\";\r\n\r\nexport interface ISelectionRange {\r\n    beginning?: boolean; // whether the selection is in the first block of the editor or not\r\n    start: number; // byte offset relative to the start anchor of the current editor selection.\r\n    end: number; // byte offset relative to the end anchor of the current editor selection.\r\n}\r\n\r\nexport interface ICompletion {\r\n    type?: \"at-room\" | \"command\" | \"community\" | \"room\" | \"user\";\r\n    completion: string;\r\n    completionId?: string;\r\n    component: ReactElement;\r\n    range: ISelectionRange;\r\n    command?: string;\r\n    suffix?: string;\r\n    // If provided, apply a LINK entity to the completion with the\r\n    // data = { url: href }.\r\n    href?: string;\r\n}\r\n\r\nconst PROVIDERS = [UserProvider, RoomProvider, EmojiProvider, NotifProvider, CommandProvider, SpaceProvider];\r\n\r\n// Providers will get rejected if they take longer than this.\r\nconst PROVIDER_COMPLETION_TIMEOUT = 3000;\r\n\r\nexport interface IProviderCompletions {\r\n    completions: ICompletion[];\r\n    provider: AutocompleteProvider;\r\n    command: Partial<ICommand>;\r\n}\r\n\r\nexport default class Autocompleter {\r\n    public room: Room;\r\n    public providers: AutocompleteProvider[];\r\n\r\n    public constructor(room: Room, renderingType: TimelineRenderingType = TimelineRenderingType.Room) {\r\n        this.room = room;\r\n        this.providers = PROVIDERS.map((Prov) => {\r\n            return new Prov(room, renderingType);\r\n        });\r\n    }\r\n\r\n    public destroy(): void {\r\n        this.providers.forEach((p) => {\r\n            p.destroy();\r\n        });\r\n    }\r\n\r\n    public async getCompletions(\r\n        query: string,\r\n        selection: ISelectionRange,\r\n        force = false,\r\n        limit = -1,\r\n    ): Promise<IProviderCompletions[]> {\r\n        /* Note: This intentionally waits for all providers to return,\r\n         otherwise, we run into a condition where new completions are displayed\r\n         while the user is interacting with the list, which makes it difficult\r\n         to predict whether an action will actually do what is intended\r\n        */\r\n        // list of results from each provider, each being a list of completions or null if it times out\r\n        const completionsList: Array<ICompletion[] | null> = await Promise.all(\r\n            this.providers.map(async (provider): Promise<ICompletion[] | null> => {\r\n                return timeout(\r\n                    provider.getCompletions(query, selection, force, limit),\r\n                    null,\r\n                    PROVIDER_COMPLETION_TIMEOUT,\r\n                );\r\n            }),\r\n        );\r\n\r\n        // map then filter to maintain the index for the map-operation, for this.providers to line up\r\n        return filterBoolean(\r\n            completionsList.map((completions, i) => {\r\n                if (!completions || !completions.length) return;\r\n\r\n                return {\r\n                    completions,\r\n                    provider: this.providers[i],\r\n\r\n                    /* the currently matched \"command\" the completer tried to complete\r\n                     * we pass this through so that Autocomplete can figure out when to\r\n                     * re-show itself once hidden.\r\n                     */\r\n                    command: this.providers[i].getCurrentCommand(query, selection, force),\r\n                };\r\n            }),\r\n        );\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;AAoBA,IAAAA,gBAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,aAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,aAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,cAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,cAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,QAAA,GAAAL,OAAA;AAEA,IAAAM,cAAA,GAAAP,sBAAA,CAAAC,OAAA;AACA,IAAAO,YAAA,GAAAP,OAAA;AACA,IAAAQ,OAAA,GAAAR,OAAA;AA7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAmCA,MAAMS,SAAS,GAAG,CAACC,qBAAY,EAAEC,qBAAY,EAAEC,sBAAa,EAAEC,sBAAa,EAAEC,wBAAe,EAAEC,sBAAa,CAAC;;AAE5G;AACA,MAAMC,2BAA2B,GAAG,IAAI;AAQzB,MAAMC,aAAa,CAAC;EAIxBC,WAAWA,CAACC,IAAU,EAAqE;IAAA,IAAnEC,aAAoC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGG,kCAAqB,CAACC,IAAI;IAAA,IAAAC,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;IAC5F,IAAI,CAACR,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACS,SAAS,GAAGnB,SAAS,CAACoB,GAAG,CAAEC,IAAI,IAAK;MACrC,OAAO,IAAIA,IAAI,CAACX,IAAI,EAAEC,aAAa,CAAC;IACxC,CAAC,CAAC;EACN;EAEOW,OAAOA,CAAA,EAAS;IACnB,IAAI,CAACH,SAAS,CAACI,OAAO,CAAEC,CAAC,IAAK;MAC1BA,CAAC,CAACF,OAAO,CAAC,CAAC;IACf,CAAC,CAAC;EACN;EAEA,MAAaG,cAAcA,CACvBC,KAAa,EACbC,SAA0B,EAGK;IAAA,IAF/BC,KAAK,GAAAhB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAAA,IACbiB,KAAK,GAAAjB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAEV;AACR;AACA;AACA;AACA;IACQ;IACA,MAAMkB,eAA4C,GAAG,MAAMC,OAAO,CAACC,GAAG,CAClE,IAAI,CAACb,SAAS,CAACC,GAAG,CAAC,MAAOa,QAAQ,IAAoC;MAClE,OAAO,IAAAC,gBAAO,EACVD,QAAQ,CAACR,cAAc,CAACC,KAAK,EAAEC,SAAS,EAAEC,KAAK,EAAEC,KAAK,CAAC,EACvD,IAAI,EACJtB,2BACJ,CAAC;IACL,CAAC,CACL,CAAC;;IAED;IACA,OAAO,IAAA4B,qBAAa,EAChBL,eAAe,CAACV,GAAG,CAAC,CAACgB,WAAW,EAAEC,CAAC,KAAK;MACpC,IAAI,CAACD,WAAW,IAAI,CAACA,WAAW,CAACvB,MAAM,EAAE;MAEzC,OAAO;QACHuB,WAAW;QACXH,QAAQ,EAAE,IAAI,CAACd,SAAS,CAACkB,CAAC,CAAC;QAE3B;AACpB;AACA;AACA;QACoBC,OAAO,EAAE,IAAI,CAACnB,SAAS,CAACkB,CAAC,CAAC,CAACE,iBAAiB,CAACb,KAAK,EAAEC,SAAS,EAAEC,KAAK;MACxE,CAAC;IACL,CAAC,CACL,CAAC;EACL;AACJ;AAACY,OAAA,CAAAtB,OAAA,GAAAV,aAAA"}