{"version":3,"file":"DateUtils.js","names":["_languageHandler","require","getDaysArray","_t","getMonthsArray","pad","n","twelveHourTime","date","showSeconds","arguments","length","undefined","hours","getHours","minutes","getMinutes","ampm","seconds","getSeconds","formatDate","showTwelveHour","now","Date","days","months","toDateString","formatTime","getTime","weekDayName","getDay","time","getFullYear","monthName","getMonth","day","getDate","formatFullDate","formatFullDateNoTime","fullYear","formatFullTime","formatDateForInput","year","padStart","month","dateInputValue","formatSeconds","inSeconds","isNegative","Math","abs","floor","toFixed","output","formatTimeLeft","MILLIS_IN_DAY","withinPast24Hours","prevDate","nextDate","withinCurrentDay","withinCurrentYear","wantsDateSeparator","prevEventDate","nextEventDate","formatFullDateNoDay","toLocaleDateString","replace","toLocaleTimeString","formatFullDateNoDayISO","toISOString","formatFullDateNoDayNoTime","formatRelativeTime","relativeDate","MINUTE_MS","HOUR_MS","DAY_MS","formatDuration","durationMs","value","round","formatPreciseDuration","formatLocalDateShort","timestamp","Intl","DateTimeFormat","format","exports"],"sources":["../src/DateUtils.ts"],"sourcesContent":["/*\r\nCopyright 2015, 2016 OpenMarket Ltd\r\nCopyright 2017 Vector Creations Ltd\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { Optional } from \"matrix-events-sdk\";\r\n\r\nimport { _t } from \"./languageHandler\";\r\n\r\nfunction getDaysArray(): string[] {\r\n    return [_t(\"Sun\"), _t(\"Mon\"), _t(\"Tue\"), _t(\"Wed\"), _t(\"Thu\"), _t(\"Fri\"), _t(\"Sat\")];\r\n}\r\n\r\nfunction getMonthsArray(): string[] {\r\n    return [\r\n        _t(\"Jan\"),\r\n        _t(\"Feb\"),\r\n        _t(\"Mar\"),\r\n        _t(\"Apr\"),\r\n        _t(\"May\"),\r\n        _t(\"Jun\"),\r\n        _t(\"Jul\"),\r\n        _t(\"Aug\"),\r\n        _t(\"Sep\"),\r\n        _t(\"Oct\"),\r\n        _t(\"Nov\"),\r\n        _t(\"Dec\"),\r\n    ];\r\n}\r\n\r\nfunction pad(n: number): string {\r\n    return (n < 10 ? \"0\" : \"\") + n;\r\n}\r\n\r\nfunction twelveHourTime(date: Date, showSeconds = false): string {\r\n    let hours = date.getHours() % 12;\r\n    const minutes = pad(date.getMinutes());\r\n    const ampm = date.getHours() >= 12 ? _t(\"PM\") : _t(\"AM\");\r\n    hours = hours ? hours : 12; // convert 0 -> 12\r\n    if (showSeconds) {\r\n        const seconds = pad(date.getSeconds());\r\n        return `${hours}:${minutes}:${seconds}${ampm}`;\r\n    }\r\n    return `${hours}:${minutes}${ampm}`;\r\n}\r\n\r\nexport function formatDate(date: Date, showTwelveHour = false): string {\r\n    const now = new Date();\r\n    const days = getDaysArray();\r\n    const months = getMonthsArray();\r\n    if (date.toDateString() === now.toDateString()) {\r\n        return formatTime(date, showTwelveHour);\r\n    } else if (now.getTime() - date.getTime() < 6 * 24 * 60 * 60 * 1000) {\r\n        // TODO: use standard date localize function provided in counterpart\r\n        return _t(\"%(weekDayName)s %(time)s\", {\r\n            weekDayName: days[date.getDay()],\r\n            time: formatTime(date, showTwelveHour),\r\n        });\r\n    } else if (now.getFullYear() === date.getFullYear()) {\r\n        // TODO: use standard date localize function provided in counterpart\r\n        return _t(\"%(weekDayName)s, %(monthName)s %(day)s %(time)s\", {\r\n            weekDayName: days[date.getDay()],\r\n            monthName: months[date.getMonth()],\r\n            day: date.getDate(),\r\n            time: formatTime(date, showTwelveHour),\r\n        });\r\n    }\r\n    return formatFullDate(date, showTwelveHour);\r\n}\r\n\r\nexport function formatFullDateNoTime(date: Date): string {\r\n    const days = getDaysArray();\r\n    const months = getMonthsArray();\r\n    return _t(\"%(weekDayName)s, %(monthName)s %(day)s %(fullYear)s\", {\r\n        weekDayName: days[date.getDay()],\r\n        monthName: months[date.getMonth()],\r\n        day: date.getDate(),\r\n        fullYear: date.getFullYear(),\r\n    });\r\n}\r\n\r\nexport function formatFullDate(date: Date, showTwelveHour = false, showSeconds = true): string {\r\n    const days = getDaysArray();\r\n    const months = getMonthsArray();\r\n    return _t(\"%(weekDayName)s, %(monthName)s %(day)s %(fullYear)s %(time)s\", {\r\n        weekDayName: days[date.getDay()],\r\n        monthName: months[date.getMonth()],\r\n        day: date.getDate(),\r\n        fullYear: date.getFullYear(),\r\n        time: showSeconds ? formatFullTime(date, showTwelveHour) : formatTime(date, showTwelveHour),\r\n    });\r\n}\r\n\r\n/**\r\n * Formats dates to be compatible with attributes of a `<input type=\"date\">`. Dates\r\n * should be formatted like \"2020-06-23\" (formatted according to ISO8601)\r\n *\r\n * @param date The date to format.\r\n * @returns The date string in ISO8601 format ready to be used with an `<input>`\r\n */\r\nexport function formatDateForInput(date: Date): string {\r\n    const year = `${date.getFullYear()}`.padStart(4, \"0\");\r\n    const month = `${date.getMonth() + 1}`.padStart(2, \"0\");\r\n    const day = `${date.getDate()}`.padStart(2, \"0\");\r\n    const dateInputValue = `${year}-${month}-${day}`;\r\n    return dateInputValue;\r\n}\r\n\r\nexport function formatFullTime(date: Date, showTwelveHour = false): string {\r\n    if (showTwelveHour) {\r\n        return twelveHourTime(date, true);\r\n    }\r\n    return pad(date.getHours()) + \":\" + pad(date.getMinutes()) + \":\" + pad(date.getSeconds());\r\n}\r\n\r\nexport function formatTime(date: Date, showTwelveHour = false): string {\r\n    if (showTwelveHour) {\r\n        return twelveHourTime(date);\r\n    }\r\n    return pad(date.getHours()) + \":\" + pad(date.getMinutes());\r\n}\r\n\r\nexport function formatSeconds(inSeconds: number): string {\r\n    const isNegative = inSeconds < 0;\r\n    inSeconds = Math.abs(inSeconds);\r\n\r\n    const hours = Math.floor(inSeconds / (60 * 60))\r\n        .toFixed(0)\r\n        .padStart(2, \"0\");\r\n    const minutes = Math.floor((inSeconds % (60 * 60)) / 60)\r\n        .toFixed(0)\r\n        .padStart(2, \"0\");\r\n    const seconds = Math.floor((inSeconds % (60 * 60)) % 60)\r\n        .toFixed(0)\r\n        .padStart(2, \"0\");\r\n\r\n    let output = \"\";\r\n    if (hours !== \"00\") output += `${hours}:`;\r\n    output += `${minutes}:${seconds}`;\r\n\r\n    if (isNegative) {\r\n        output = \"-\" + output;\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nexport function formatTimeLeft(inSeconds: number): string {\r\n    const hours = Math.floor(inSeconds / (60 * 60)).toFixed(0);\r\n    const minutes = Math.floor((inSeconds % (60 * 60)) / 60).toFixed(0);\r\n    const seconds = Math.floor((inSeconds % (60 * 60)) % 60).toFixed(0);\r\n\r\n    if (hours !== \"0\") {\r\n        return _t(\"%(hours)sh %(minutes)sm %(seconds)ss left\", {\r\n            hours,\r\n            minutes,\r\n            seconds,\r\n        });\r\n    }\r\n\r\n    if (minutes !== \"0\") {\r\n        return _t(\"%(minutes)sm %(seconds)ss left\", {\r\n            minutes,\r\n            seconds,\r\n        });\r\n    }\r\n\r\n    return _t(\"%(seconds)ss left\", {\r\n        seconds,\r\n    });\r\n}\r\n\r\nconst MILLIS_IN_DAY = 86400000;\r\nfunction withinPast24Hours(prevDate: Date, nextDate: Date): boolean {\r\n    return Math.abs(prevDate.getTime() - nextDate.getTime()) <= MILLIS_IN_DAY;\r\n}\r\n\r\nfunction withinCurrentDay(prevDate: Date, nextDate: Date): boolean {\r\n    return withinPast24Hours(prevDate, nextDate) && prevDate.getDay() === nextDate.getDay();\r\n}\r\n\r\nfunction withinCurrentYear(prevDate: Date, nextDate: Date): boolean {\r\n    return prevDate.getFullYear() === nextDate.getFullYear();\r\n}\r\n\r\nexport function wantsDateSeparator(prevEventDate: Optional<Date>, nextEventDate: Optional<Date>): boolean {\r\n    if (!nextEventDate || !prevEventDate) {\r\n        return false;\r\n    }\r\n    // Return early for events that are > 24h apart\r\n    if (!withinPast24Hours(prevEventDate, nextEventDate)) {\r\n        return true;\r\n    }\r\n\r\n    // Compare weekdays\r\n    return prevEventDate.getDay() !== nextEventDate.getDay();\r\n}\r\n\r\nexport function formatFullDateNoDay(date: Date): string {\r\n    return _t(\"%(date)s at %(time)s\", {\r\n        date: date.toLocaleDateString().replace(/\\//g, \"-\"),\r\n        time: date.toLocaleTimeString().replace(/:/g, \"-\"),\r\n    });\r\n}\r\n\r\n/**\r\n * Returns an ISO date string without textual description of the date (ie: no \"Wednesday\" or\r\n * similar)\r\n * @param date The date to format.\r\n * @returns The date string in ISO format.\r\n */\r\nexport function formatFullDateNoDayISO(date: Date): string {\r\n    return date.toISOString();\r\n}\r\n\r\nexport function formatFullDateNoDayNoTime(date: Date): string {\r\n    return date.getFullYear() + \"/\" + pad(date.getMonth() + 1) + \"/\" + pad(date.getDate());\r\n}\r\n\r\nexport function formatRelativeTime(date: Date, showTwelveHour = false): string {\r\n    const now = new Date(Date.now());\r\n    if (withinCurrentDay(date, now)) {\r\n        return formatTime(date, showTwelveHour);\r\n    } else {\r\n        const months = getMonthsArray();\r\n        let relativeDate = `${months[date.getMonth()]} ${date.getDate()}`;\r\n\r\n        if (!withinCurrentYear(date, now)) {\r\n            relativeDate += `, ${date.getFullYear()}`;\r\n        }\r\n        return relativeDate;\r\n    }\r\n}\r\n\r\nconst MINUTE_MS = 60000;\r\nconst HOUR_MS = MINUTE_MS * 60;\r\nconst DAY_MS = HOUR_MS * 24;\r\n\r\n/**\r\n * Formats duration in ms to human readable string\r\n * Returns value in biggest possible unit (day, hour, min, second)\r\n * Rounds values up until unit threshold\r\n * ie. 23:13:57 -> 23h, 24:13:57 -> 1d, 44:56:56 -> 2d\r\n */\r\nexport function formatDuration(durationMs: number): string {\r\n    if (durationMs >= DAY_MS) {\r\n        return _t(\"%(value)sd\", { value: Math.round(durationMs / DAY_MS) });\r\n    }\r\n    if (durationMs >= HOUR_MS) {\r\n        return _t(\"%(value)sh\", { value: Math.round(durationMs / HOUR_MS) });\r\n    }\r\n    if (durationMs >= MINUTE_MS) {\r\n        return _t(\"%(value)sm\", { value: Math.round(durationMs / MINUTE_MS) });\r\n    }\r\n    return _t(\"%(value)ss\", { value: Math.round(durationMs / 1000) });\r\n}\r\n\r\n/**\r\n * Formats duration in ms to human readable string\r\n * Returns precise value down to the nearest second\r\n * ie. 23:13:57 -> 23h 13m 57s, 44:56:56 -> 1d 20h 56m 56s\r\n */\r\nexport function formatPreciseDuration(durationMs: number): string {\r\n    const days = Math.floor(durationMs / DAY_MS);\r\n    const hours = Math.floor((durationMs % DAY_MS) / HOUR_MS);\r\n    const minutes = Math.floor((durationMs % HOUR_MS) / MINUTE_MS);\r\n    const seconds = Math.floor((durationMs % MINUTE_MS) / 1000);\r\n\r\n    if (days > 0) {\r\n        return _t(\"%(days)sd %(hours)sh %(minutes)sm %(seconds)ss\", { days, hours, minutes, seconds });\r\n    }\r\n    if (hours > 0) {\r\n        return _t(\"%(hours)sh %(minutes)sm %(seconds)ss\", { hours, minutes, seconds });\r\n    }\r\n    if (minutes > 0) {\r\n        return _t(\"%(minutes)sm %(seconds)ss\", { minutes, seconds });\r\n    }\r\n    return _t(\"%(value)ss\", { value: seconds });\r\n}\r\n\r\n/**\r\n * Formats a timestamp to a short date\r\n * (eg 25/12/22 in uk locale)\r\n * localised by system locale\r\n * @param timestamp - epoch timestamp\r\n * @returns {string} formattedDate\r\n */\r\nexport const formatLocalDateShort = (timestamp: number): string =>\r\n    new Intl.DateTimeFormat(\r\n        undefined, // locales\r\n        { day: \"2-digit\", month: \"2-digit\", year: \"2-digit\" },\r\n    ).format(timestamp);\r\n"],"mappings":"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"}