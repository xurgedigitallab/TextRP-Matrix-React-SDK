{"version":3,"file":"Media.js","names":["_MatrixClientPeg","require","_IMediaEventContent","_languageHandler","Media","constructor","prepared","client","_defineProperty2","default","MatrixClientPeg","get","Error","isEncrypted","file","srcMxc","mxc","thumbnailMxc","thumbnail","hasThumbnail","srcHttp","mxcUrlToHttp","thumbnailHttp","getThumbnailHttp","width","height","mode","arguments","length","undefined","Math","floor","window","devicePixelRatio","getThumbnailOfSourceHttp","getSquareThumbnailHttp","dim","downloadSource","src","UserFriendlyError","fetch","exports","mediaFromContent","content","prepEventContentAsMedia","mediaFromMxc","url"],"sources":["../../src/customisations/Media.ts"],"sourcesContent":["/*\r\n * Copyright 2021 The Matrix.org Foundation C.I.C.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *         http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { MatrixClient } from \"matrix-js-sdk/src/client\";\r\nimport { ResizeMethod } from \"matrix-js-sdk/src/@types/partials\";\r\nimport { Optional } from \"matrix-events-sdk\";\r\n\r\nimport { MatrixClientPeg } from \"../MatrixClientPeg\";\r\nimport { IMediaEventContent, IPreparedMedia, prepEventContentAsMedia } from \"./models/IMediaEventContent\";\r\nimport { UserFriendlyError } from \"../languageHandler\";\r\n\r\n// Populate this class with the details of your customisations when copying it.\r\n\r\n// Implementation note: The Media class must complete the contract as shown here, though\r\n// the constructor can be whatever is relevant to your implementation. The mediaForX\r\n// functions below create an instance of the Media class and are used throughout the\r\n// project.\r\n\r\n/**\r\n * A media object is a representation of a \"source media\" and an optional\r\n * \"thumbnail media\", derived from event contents or external sources.\r\n */\r\nexport class Media {\r\n    private client: MatrixClient;\r\n\r\n    // Per above, this constructor signature can be whatever is helpful for you.\r\n    public constructor(private prepared: IPreparedMedia, client?: MatrixClient) {\r\n        this.client = client ?? MatrixClientPeg.get();\r\n        if (!this.client) {\r\n            throw new Error(\"No possible MatrixClient for media resolution. Please provide one or log in.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * True if the media appears to be encrypted. Actual file contents may vary.\r\n     */\r\n    public get isEncrypted(): boolean {\r\n        return !!this.prepared.file;\r\n    }\r\n\r\n    /**\r\n     * The MXC URI of the source media.\r\n     */\r\n    public get srcMxc(): string {\r\n        return this.prepared.mxc;\r\n    }\r\n\r\n    /**\r\n     * The MXC URI of the thumbnail media, if a thumbnail is recorded. Null/undefined\r\n     * otherwise.\r\n     */\r\n    public get thumbnailMxc(): Optional<string> {\r\n        return this.prepared.thumbnail?.mxc;\r\n    }\r\n\r\n    /**\r\n     * Whether or not a thumbnail is recorded for this media.\r\n     */\r\n    public get hasThumbnail(): boolean {\r\n        return !!this.thumbnailMxc;\r\n    }\r\n\r\n    /**\r\n     * The HTTP URL for the source media.\r\n     */\r\n    public get srcHttp(): string | null {\r\n        // eslint-disable-next-line no-restricted-properties\r\n        return this.client.mxcUrlToHttp(this.srcMxc) || null;\r\n    }\r\n\r\n    /**\r\n     * The HTTP URL for the thumbnail media (without any specified width, height, etc). Null/undefined\r\n     * if no thumbnail media recorded.\r\n     */\r\n    public get thumbnailHttp(): string | null {\r\n        if (!this.hasThumbnail) return null;\r\n        // eslint-disable-next-line no-restricted-properties\r\n        return this.client.mxcUrlToHttp(this.thumbnailMxc!);\r\n    }\r\n\r\n    /**\r\n     * Gets the HTTP URL for the thumbnail media with the requested characteristics, if a thumbnail\r\n     * is recorded for this media. Returns null/undefined otherwise.\r\n     * @param {number} width The desired width of the thumbnail.\r\n     * @param {number} height The desired height of the thumbnail.\r\n     * @param {\"scale\"|\"crop\"} mode The desired thumbnailing mode. Defaults to scale.\r\n     * @returns {string} The HTTP URL which points to the thumbnail.\r\n     */\r\n    public getThumbnailHttp(width: number, height: number, mode: ResizeMethod = \"scale\"): string | null {\r\n        if (!this.hasThumbnail) return null;\r\n        // scale using the device pixel ratio to keep images clear\r\n        width = Math.floor(width * window.devicePixelRatio);\r\n        height = Math.floor(height * window.devicePixelRatio);\r\n        // eslint-disable-next-line no-restricted-properties\r\n        return this.client.mxcUrlToHttp(this.thumbnailMxc!, width, height, mode);\r\n    }\r\n\r\n    /**\r\n     * Gets the HTTP URL for a thumbnail of the source media with the requested characteristics.\r\n     * @param {number} width The desired width of the thumbnail.\r\n     * @param {number} height The desired height of the thumbnail.\r\n     * @param {\"scale\"|\"crop\"} mode The desired thumbnailing mode. Defaults to scale.\r\n     * @returns {string} The HTTP URL which points to the thumbnail.\r\n     */\r\n    public getThumbnailOfSourceHttp(width: number, height: number, mode: ResizeMethod = \"scale\"): string | null {\r\n        // scale using the device pixel ratio to keep images clear\r\n        width = Math.floor(width * window.devicePixelRatio);\r\n        height = Math.floor(height * window.devicePixelRatio);\r\n        // eslint-disable-next-line no-restricted-properties\r\n        return this.client.mxcUrlToHttp(this.srcMxc, width, height, mode);\r\n    }\r\n\r\n    /**\r\n     * Creates a square thumbnail of the media. If the media has a thumbnail recorded, that MXC will\r\n     * be used, otherwise the source media will be used.\r\n     * @param {number} dim The desired width and height.\r\n     * @returns {string} An HTTP URL for the thumbnail.\r\n     */\r\n    public getSquareThumbnailHttp(dim: number): string | null {\r\n        dim = Math.floor(dim * window.devicePixelRatio); // scale using the device pixel ratio to keep images clear\r\n        if (this.hasThumbnail) {\r\n            return this.getThumbnailHttp(dim, dim, \"crop\");\r\n        }\r\n        return this.getThumbnailOfSourceHttp(dim, dim, \"crop\");\r\n    }\r\n\r\n    /**\r\n     * Downloads the source media.\r\n     * @returns {Promise<Response>} Resolves to the server's response for chaining.\r\n     */\r\n    public downloadSource(): Promise<Response> {\r\n        const src = this.srcHttp;\r\n        if (!src) {\r\n            throw new UserFriendlyError(\"Failed to download source media, no source url was found\");\r\n        }\r\n        return fetch(src);\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a media object from event content.\r\n * @param {IMediaEventContent} content The event content.\r\n * @param {MatrixClient} client? Optional client to use.\r\n * @returns {Media} The media object.\r\n */\r\nexport function mediaFromContent(content: Partial<IMediaEventContent>, client?: MatrixClient): Media {\r\n    return new Media(prepEventContentAsMedia(content), client);\r\n}\r\n\r\n/**\r\n * Creates a media object from an MXC URI.\r\n * @param {string} mxc The MXC URI.\r\n * @param {MatrixClient} client? Optional client to use.\r\n * @returns {Media} The media object.\r\n */\r\nexport function mediaFromMxc(mxc?: string, client?: MatrixClient): Media {\r\n    return mediaFromContent({ url: mxc }, client);\r\n}\r\n"],"mappings":"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"}