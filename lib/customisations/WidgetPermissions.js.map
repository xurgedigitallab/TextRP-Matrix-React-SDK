{"version":3,"file":"WidgetPermissions.js","names":["preapproveCapabilities","widget","requestedCapabilities","Set","WidgetPermissionCustomisations","exports"],"sources":["../../src/customisations/WidgetPermissions.ts"],"sourcesContent":["/*\r\n * Copyright 2020 The Matrix.org Foundation C.I.C.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *         http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// Populate this class with the details of your customisations when copying it.\r\nimport { Capability, Widget } from \"matrix-widget-api\";\r\n\r\n/**\r\n * Approves the widget for capabilities that it requested, if any can be\r\n * approved. Typically this will be used to give certain widgets capabilities\r\n * without having to prompt the user to approve them. This cannot reject\r\n * capabilities that Element will be automatically granting, such as the\r\n * ability for Jitsi widgets to stay on screen - those will be approved\r\n * regardless.\r\n * @param {Widget} widget The widget to approve capabilities for.\r\n * @param {Set<Capability>} requestedCapabilities The capabilities the widget requested.\r\n * @returns {Set<Capability>} Resolves to the capabilities that are approved for use\r\n * by the widget. If none are approved, this should return an empty Set.\r\n */\r\nasync function preapproveCapabilities(\r\n    widget: Widget,\r\n    requestedCapabilities: Set<Capability>,\r\n): Promise<Set<Capability>> {\r\n    return new Set(); // no additional capabilities approved\r\n}\r\n\r\n// This interface summarises all available customisation points and also marks\r\n// them all as optional. This allows customisers to only define and export the\r\n// customisations they need while still maintaining type safety.\r\nexport interface IWidgetPermissionCustomisations {\r\n    preapproveCapabilities?: typeof preapproveCapabilities;\r\n}\r\n\r\n// A real customisation module will define and export one or more of the\r\n// customisation points that make up the interface above.\r\nexport const WidgetPermissionCustomisations: IWidgetPermissionCustomisations = {};\r\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeA,sBAAsBA,CACjCC,MAAc,EACdC,qBAAsC,EACd;EACxB,OAAO,IAAIC,GAAG,CAAC,CAAC,CAAC,CAAC;AACtB;;AAEA;AACA;AACA;;AAKA;AACA;AACO,MAAMC,8BAA+D,GAAG,CAAC,CAAC;AAACC,OAAA,CAAAD,8BAAA,GAAAA,8BAAA"}