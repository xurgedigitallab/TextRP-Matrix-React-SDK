{"version":3,"file":"ScalarMessaging.js","names":["_event","require","_logger","_MatrixClientPeg","_dispatcher","_interopRequireDefault","_WidgetUtils","_languageHandler","_IntegrationManagers","_WidgetType","_objects","_membership","_SDKContext","Action","sendResponse","event","res","data","objectClone","response","source","postMessage","origin","sendError","msg","nestedError","logger","error","action","message","_error","inviteUser","roomId","userId","log","client","MatrixClientPeg","get","_t","room","getRoom","member","getMember","includes","membership","success","invite","then","err","kickUser","getEffectiveMembership","EffectiveMembership","Leave","reason","kick","catch","setWidget","widgetId","widget_id","widgetType","type","widgetUrl","url","widgetName","name","widgetData","widgetAvatarUrl","avatar_url","userWidget","undefined","Error","Object","WidgetType","fromString","WidgetUtils","setUserWidget","dis","dispatch","e","setRoomWidget","getWidgets","widgetStateEvents","getRoomWidgets","map","ev","userWidgets","getUserWidgetsArray","concat","getRoomEncState","roomIsEncrypted","isRoomEncrypted","setPlumbingState","status","sendStateEvent","setBotOptions","content","setBotPower","level","ignoreIfGreater","Number","isInteger","powerLevels","getStateEvent","currentPl","users","users_default","setPowerLevel","MatrixEvent","getMembershipState","returnStateEvent","getJoinRules","botOptions","getMembershipCount","count","getJoinedMemberCount","canSendEvent","evType","event_type","isState","Boolean","is_state","getMyMembership","me","credentials","canSend","currentState","maySendStateEvent","maySendEvent","eventType","stateKey","stateEvent","getStateEvents","getContent","getOpenIdToken","tokenObject","ex","warn","sendEvent","state_key","allowedEventTypes","room_id","event_id","readEvents","limit","effectiveLimit","Math","min","MAX_SAFE_INTEGER","effectiveStateKey","events","slice","getEffectiveEvent","onMessage","originalEvent","configUrl","openManagerUrl","IntegrationManagers","sharedInstance","getPrimaryManager","uiUrl","URL","eventOriginUrl","api","CloseScalar","user_id","GetWidgets","SetWidget","GetOpenIdToken","SdkContextClass","instance","roomViewStore","getRoomId","JoinRulesState","SetPlumbingState","GetMembershipCount","GetRoomEncryptionState","CanSendEvent","SendEvent","ReadEvents","MembershipState","Kick","BotOptions","SetBotOptions","SetBotPower","listenerCount","startListening","window","addEventListener","stopListening","removeEventListener"],"sources":["../src/ScalarMessaging.ts"],"sourcesContent":["/*\r\nCopyright 2016 OpenMarket Ltd\r\nCopyright 2017 Vector Creations Ltd\r\nCopyright 2018 New Vector Ltd\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\n// TODO: Generify the name of this and all components within - it's not just for scalar.\r\n\r\n/*\r\nListens for incoming postMessage requests from the integrations UI URL. The following API is exposed:\r\n{\r\n    action: \"invite\" | \"membership_state\" | \"bot_options\" | \"set_bot_options\" | etc... ,\r\n    room_id: $ROOM_ID,\r\n    user_id: $USER_ID\r\n    // additional request fields\r\n}\r\n\r\nThe complete request object is returned to the caller with an additional \"response\" key like so:\r\n{\r\n    action: \"invite\" | \"membership_state\" | \"bot_options\" | \"set_bot_options\",\r\n    room_id: $ROOM_ID,\r\n    user_id: $USER_ID,\r\n    // additional request fields\r\n    response: { ... }\r\n}\r\n\r\nThe \"action\" determines the format of the request and response. All actions can return an error response.\r\nAn error response is a \"response\" object which consists of a sole \"error\" key to indicate an error.\r\nThey look like:\r\n{\r\n    error: {\r\n        message: \"Unable to invite user into room.\",\r\n        _error: <Original Error Object>\r\n    }\r\n}\r\nThe \"message\" key should be a human-friendly string.\r\n\r\nACTIONS\r\n=======\r\nAll actions can return an error response instead of the response outlined below.\r\n\r\ninvite\r\n------\r\nInvites a user into a room. The request will no-op if the user is already joined OR invited to the room.\r\n\r\nRequest:\r\n - room_id is the room to invite the user into.\r\n - user_id is the user ID to invite.\r\n - No additional fields.\r\nResponse:\r\n{\r\n    success: true\r\n}\r\nExample:\r\n{\r\n    action: \"invite\",\r\n    room_id: \"!foo:bar\",\r\n    user_id: \"@invitee:bar\",\r\n    response: {\r\n        success: true\r\n    }\r\n}\r\n\r\nkick\r\n------\r\nKicks a user from a room. The request will no-op if the user is not in the room.\r\n\r\nRequest:\r\n - room_id is the room to kick the user from.\r\n - user_id is the user ID to kick.\r\n - reason is an optional string for the kick reason\r\nResponse:\r\n{\r\n    success: true\r\n}\r\nExample:\r\n{\r\n    action: \"kick\",\r\n    room_id: \"!foo:bar\",\r\n    user_id: \"@target:example.org\",\r\n    reason: \"Removed from room\",\r\n    response: {\r\n        success: true\r\n    }\r\n}\r\n\r\nset_bot_options\r\n---------------\r\nSet the m.room.bot.options state event for a bot user.\r\n\r\nRequest:\r\n - room_id is the room to send the state event into.\r\n - user_id is the user ID of the bot who you're setting options for.\r\n - \"content\" is an object consisting of the content you wish to set.\r\nResponse:\r\n{\r\n    success: true\r\n}\r\nExample:\r\n{\r\n    action: \"set_bot_options\",\r\n    room_id: \"!foo:bar\",\r\n    user_id: \"@bot:bar\",\r\n    content: {\r\n        default_option: \"alpha\"\r\n    },\r\n    response: {\r\n        success: true\r\n    }\r\n}\r\n\r\nget_membership_count\r\n--------------------\r\nGet the number of joined users in the room.\r\n\r\nRequest:\r\n - room_id is the room to get the count in.\r\nResponse:\r\n78\r\nExample:\r\n{\r\n    action: \"get_membership_count\",\r\n    room_id: \"!foo:bar\",\r\n    response: 78\r\n}\r\n\r\ncan_send_event\r\n--------------\r\nCheck if the client can send the given event into the given room. If the client\r\nis unable to do this, an error response is returned instead of 'response: false'.\r\n\r\nRequest:\r\n - room_id is the room to do the check in.\r\n - event_type is the event type which will be sent.\r\n - is_state is true if the event to be sent is a state event.\r\nResponse:\r\ntrue\r\nExample:\r\n{\r\n    action: \"can_send_event\",\r\n    is_state: false,\r\n    event_type: \"m.room.message\",\r\n    room_id: \"!foo:bar\",\r\n    response: true\r\n}\r\n\r\nset_widget\r\n----------\r\nSet a new widget in the room. Clobbers based on the ID.\r\n\r\nRequest:\r\n - `room_id` (String) is the room to set the widget in.\r\n - `widget_id` (String) is the ID of the widget to add (or replace if it already exists).\r\n   It can be an arbitrary UTF8 string and is purely for distinguishing between widgets.\r\n - `url` (String) is the URL that clients should load in an iframe to run the widget.\r\n   All widgets must have a valid URL. If the URL is `null` (not `undefined`), the\r\n   widget will be removed from the room.\r\n - `type` (String) is the type of widget, which is provided as a hint for matrix clients so they\r\n   can configure/lay out the widget in different ways. All widgets must have a type.\r\n - `name` (String) is an optional human-readable string about the widget.\r\n - `data` (Object) is some optional data about the widget, and can contain arbitrary key/value pairs.\r\n - `avatar_url` (String) is some optional mxc: URI pointing to the avatar of the widget.\r\nResponse:\r\n{\r\n    success: true\r\n}\r\nExample:\r\n{\r\n    action: \"set_widget\",\r\n    room_id: \"!foo:bar\",\r\n    widget_id: \"abc123\",\r\n    url: \"http://widget.url\",\r\n    type: \"example\",\r\n    response: {\r\n        success: true\r\n    }\r\n}\r\n\r\nget_widgets\r\n-----------\r\nGet a list of all widgets in the room. The response is an array\r\nof state events.\r\n\r\nRequest:\r\n - `room_id` (String) is the room to get the widgets in.\r\nResponse:\r\n[\r\n    {\r\n        // TODO: Enable support for m.widget event type (https://github.com/vector-im/element-web/issues/13111)\r\n        type: \"im.vector.modular.widgets\",\r\n        state_key: \"wid1\",\r\n        content: {\r\n            type: \"grafana\",\r\n            url: \"https://grafanaurl\",\r\n            name: \"dashboard\",\r\n            data: {key: \"val\"}\r\n        }\r\n        room_id: \"!foo:bar\",\r\n        sender: \"@alice:localhost\"\r\n    }\r\n]\r\nExample:\r\n{\r\n    action: \"get_widgets\",\r\n    room_id: \"!foo:bar\",\r\n    response: [\r\n        {\r\n            // TODO: Enable support for m.widget event type (https://github.com/vector-im/element-web/issues/13111)\r\n            type: \"im.vector.modular.widgets\",\r\n            state_key: \"wid1\",\r\n            content: {\r\n                type: \"grafana\",\r\n                url: \"https://grafanaurl\",\r\n                name: \"dashboard\",\r\n                data: {key: \"val\"}\r\n            }\r\n            room_id: \"!foo:bar\",\r\n            sender: \"@alice:localhost\"\r\n        }\r\n    ]\r\n}\r\n\r\nmembership_state AND bot_options\r\n--------------------------------\r\nGet the content of the \"m.room.member\" or \"m.room.bot.options\" state event respectively.\r\n\r\nNB: Whilst this API is basically equivalent to getStateEvent, we specifically do not\r\n    want external entities to be able to query any state event for any room, hence the\r\n    restrictive API outlined here.\r\n\r\nRequest:\r\n - room_id is the room which has the state event.\r\n - user_id is the state_key parameter which in both cases is a user ID (the member or the bot).\r\n - No additional fields.\r\nResponse:\r\n - The event content. If there is no state event, the \"response\" key should be null.\r\nExample:\r\n{\r\n    action: \"membership_state\",\r\n    room_id: \"!foo:bar\",\r\n    user_id: \"@somemember:bar\",\r\n    response: {\r\n        membership: \"join\",\r\n        displayname: \"Bob\",\r\n        avatar_url: null\r\n    }\r\n}\r\n\r\nget_open_id_token\r\n-----------------\r\nGet an openID token for the current user session.\r\nRequest: No parameters\r\nResponse:\r\n - The openId token object as described in https://spec.matrix.org/v1.2/client-server-api/#post_matrixclientv3useruseridopenidrequest_token\r\n\r\nsend_event\r\n----------\r\nSends an event in a room.\r\n\r\nRequest:\r\n - type is the event type to send.\r\n - state_key is the state key to send. Omitted if not a state event.\r\n - content is the event content to send.\r\n\r\nResponse:\r\n - room_id is the room ID where the event was sent.\r\n - event_id is the event ID of the event which was sent.\r\n\r\nread_events\r\n-----------\r\nRead events from a room.\r\n\r\nRequest:\r\n - type is the event type to read.\r\n - state_key is the state key to read, or `true` to read all events of the type. Omitted if not a state event.\r\n\r\nResponse:\r\n - events: Array of events. If none found, this will be an empty array.\r\n\r\n*/\r\n\r\nimport { IContent, MatrixEvent } from \"matrix-js-sdk/src/models/event\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\nimport { IEvent } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport { MatrixClientPeg } from \"./MatrixClientPeg\";\r\nimport dis from \"./dispatcher/dispatcher\";\r\nimport WidgetUtils from \"./utils/WidgetUtils\";\r\nimport { _t } from \"./languageHandler\";\r\nimport { IntegrationManagers } from \"./integrations/IntegrationManagers\";\r\nimport { WidgetType } from \"./widgets/WidgetType\";\r\nimport { objectClone } from \"./utils/objects\";\r\nimport { EffectiveMembership, getEffectiveMembership } from \"./utils/membership\";\r\nimport { SdkContextClass } from \"./contexts/SDKContext\";\r\n\r\nenum Action {\r\n    CloseScalar = \"close_scalar\",\r\n    GetWidgets = \"get_widgets\",\r\n    SetWidget = \"set_widget\",\r\n    JoinRulesState = \"join_rules_state\",\r\n    SetPlumbingState = \"set_plumbing_state\",\r\n    GetMembershipCount = \"get_membership_count\",\r\n    GetRoomEncryptionState = \"get_room_enc_state\",\r\n    CanSendEvent = \"can_send_event\",\r\n    MembershipState = \"membership_state\",\r\n    invite = \"invite\",\r\n    Kick = \"kick\",\r\n    BotOptions = \"bot_options\",\r\n    SetBotOptions = \"set_bot_options\",\r\n    SetBotPower = \"set_bot_power\",\r\n    GetOpenIdToken = \"get_open_id_token\",\r\n    SendEvent = \"send_event\",\r\n    ReadEvents = \"read_events\",\r\n}\r\n\r\nfunction sendResponse(event: MessageEvent<any>, res: any): void {\r\n    const data = objectClone(event.data);\r\n    data.response = res;\r\n    // @ts-ignore\r\n    event.source.postMessage(data, event.origin);\r\n}\r\n\r\nfunction sendError(event: MessageEvent<any>, msg: string, nestedError?: Error): void {\r\n    logger.error(\"Action:\" + event.data.action + \" failed with message: \" + msg);\r\n    const data = objectClone(event.data);\r\n    data.response = {\r\n        error: {\r\n            message: msg,\r\n        },\r\n    };\r\n    if (nestedError) {\r\n        data.response.error._error = nestedError;\r\n    }\r\n    // @ts-ignore\r\n    event.source.postMessage(data, event.origin);\r\n}\r\n\r\nfunction inviteUser(event: MessageEvent<any>, roomId: string, userId: string): void {\r\n    logger.log(`Received request to invite ${userId} into room ${roomId}`);\r\n    const client = MatrixClientPeg.get();\r\n    if (!client) {\r\n        sendError(event, _t(\"You need to be logged in.\"));\r\n        return;\r\n    }\r\n    const room = client.getRoom(roomId);\r\n    if (room) {\r\n        // if they are already invited or joined we can resolve immediately.\r\n        const member = room.getMember(userId);\r\n        if (member && [\"join\", \"invite\"].includes(member.membership!)) {\r\n            sendResponse(event, {\r\n                success: true,\r\n            });\r\n            return;\r\n        }\r\n    }\r\n\r\n    client.invite(roomId, userId).then(\r\n        function () {\r\n            sendResponse(event, {\r\n                success: true,\r\n            });\r\n        },\r\n        function (err) {\r\n            sendError(event, _t(\"You need to be able to invite users to do that.\"), err);\r\n        },\r\n    );\r\n}\r\n\r\nfunction kickUser(event: MessageEvent<any>, roomId: string, userId: string): void {\r\n    logger.log(`Received request to kick ${userId} from room ${roomId}`);\r\n    const client = MatrixClientPeg.get();\r\n    if (!client) {\r\n        sendError(event, _t(\"You need to be logged in.\"));\r\n        return;\r\n    }\r\n    const room = client.getRoom(roomId);\r\n    if (room) {\r\n        // if they are already not in the room we can resolve immediately.\r\n        const member = room.getMember(userId);\r\n        if (!member || getEffectiveMembership(member.membership!) === EffectiveMembership.Leave) {\r\n            sendResponse(event, {\r\n                success: true,\r\n            });\r\n            return;\r\n        }\r\n    }\r\n\r\n    const reason = event.data.reason;\r\n    client\r\n        .kick(roomId, userId, reason)\r\n        .then(() => {\r\n            sendResponse(event, {\r\n                success: true,\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            sendError(event, _t(\"You need to be able to kick users to do that.\"), err);\r\n        });\r\n}\r\n\r\nfunction setWidget(event: MessageEvent<any>, roomId: string | null): void {\r\n    const client = MatrixClientPeg.get();\r\n    const widgetId = event.data.widget_id;\r\n    let widgetType = event.data.type;\r\n    const widgetUrl = event.data.url;\r\n    const widgetName = event.data.name; // optional\r\n    const widgetData = event.data.data; // optional\r\n    const widgetAvatarUrl = event.data.avatar_url; // optional\r\n    const userWidget = event.data.userWidget;\r\n\r\n    // both adding/removing widgets need these checks\r\n    if (!widgetId || widgetUrl === undefined) {\r\n        sendError(event, _t(\"Unable to create widget.\"), new Error(\"Missing required widget fields.\"));\r\n        return;\r\n    }\r\n\r\n    if (widgetUrl !== null) {\r\n        // if url is null it is being deleted, don't need to check name/type/etc\r\n        // check types of fields\r\n        if (widgetName !== undefined && typeof widgetName !== \"string\") {\r\n            sendError(event, _t(\"Unable to create widget.\"), new Error(\"Optional field 'name' must be a string.\"));\r\n            return;\r\n        }\r\n        if (widgetData !== undefined && !(widgetData instanceof Object)) {\r\n            sendError(event, _t(\"Unable to create widget.\"), new Error(\"Optional field 'data' must be an Object.\"));\r\n            return;\r\n        }\r\n        if (widgetAvatarUrl !== undefined && typeof widgetAvatarUrl !== \"string\") {\r\n            sendError(\r\n                event,\r\n                _t(\"Unable to create widget.\"),\r\n                new Error(\"Optional field 'avatar_url' must be a string.\"),\r\n            );\r\n            return;\r\n        }\r\n        if (typeof widgetType !== \"string\") {\r\n            sendError(event, _t(\"Unable to create widget.\"), new Error(\"Field 'type' must be a string.\"));\r\n            return;\r\n        }\r\n        if (typeof widgetUrl !== \"string\") {\r\n            sendError(event, _t(\"Unable to create widget.\"), new Error(\"Field 'url' must be a string or null.\"));\r\n            return;\r\n        }\r\n    }\r\n\r\n    // convert the widget type to a known widget type\r\n    widgetType = WidgetType.fromString(widgetType);\r\n\r\n    if (userWidget) {\r\n        WidgetUtils.setUserWidget(client, widgetId, widgetType, widgetUrl, widgetName, widgetData)\r\n            .then(() => {\r\n                sendResponse(event, {\r\n                    success: true,\r\n                });\r\n\r\n                dis.dispatch({ action: \"user_widget_updated\" });\r\n            })\r\n            .catch((e) => {\r\n                sendError(event, _t(\"Unable to create widget.\"), e);\r\n            });\r\n    } else {\r\n        // Room widget\r\n        if (!roomId) {\r\n            sendError(event, _t(\"Missing roomId.\"));\r\n            return;\r\n        }\r\n        WidgetUtils.setRoomWidget(\r\n            client,\r\n            roomId,\r\n            widgetId,\r\n            widgetType,\r\n            widgetUrl,\r\n            widgetName,\r\n            widgetData,\r\n            widgetAvatarUrl,\r\n        ).then(\r\n            () => {\r\n                sendResponse(event, {\r\n                    success: true,\r\n                });\r\n            },\r\n            (err) => {\r\n                sendError(event, _t(\"Failed to send request.\"), err);\r\n            },\r\n        );\r\n    }\r\n}\r\n\r\nfunction getWidgets(event: MessageEvent<any>, roomId: string | null): void {\r\n    const client = MatrixClientPeg.get();\r\n    if (!client) {\r\n        sendError(event, _t(\"You need to be logged in.\"));\r\n        return;\r\n    }\r\n    let widgetStateEvents: Partial<IEvent>[] = [];\r\n\r\n    if (roomId) {\r\n        const room = client.getRoom(roomId);\r\n        if (!room) {\r\n            sendError(event, _t(\"This room is not recognised.\"));\r\n            return;\r\n        }\r\n        // XXX: This gets the raw event object (I think because we can't\r\n        // send the MatrixEvent over postMessage?)\r\n        widgetStateEvents = WidgetUtils.getRoomWidgets(room).map((ev) => ev.event);\r\n    }\r\n\r\n    // Add user widgets (not linked to a specific room)\r\n    const userWidgets = WidgetUtils.getUserWidgetsArray(client);\r\n    widgetStateEvents = widgetStateEvents.concat(userWidgets);\r\n\r\n    sendResponse(event, widgetStateEvents);\r\n}\r\n\r\nfunction getRoomEncState(event: MessageEvent<any>, roomId: string): void {\r\n    const client = MatrixClientPeg.get();\r\n    if (!client) {\r\n        sendError(event, _t(\"You need to be logged in.\"));\r\n        return;\r\n    }\r\n    const room = client.getRoom(roomId);\r\n    if (!room) {\r\n        sendError(event, _t(\"This room is not recognised.\"));\r\n        return;\r\n    }\r\n    const roomIsEncrypted = MatrixClientPeg.get().isRoomEncrypted(roomId);\r\n\r\n    sendResponse(event, roomIsEncrypted);\r\n}\r\n\r\nfunction setPlumbingState(event: MessageEvent<any>, roomId: string, status: string): void {\r\n    if (typeof status !== \"string\") {\r\n        throw new Error(\"Plumbing state status should be a string\");\r\n    }\r\n    logger.log(`Received request to set plumbing state to status \"${status}\" in room ${roomId}`);\r\n    const client = MatrixClientPeg.get();\r\n    if (!client) {\r\n        sendError(event, _t(\"You need to be logged in.\"));\r\n        return;\r\n    }\r\n    client.sendStateEvent(roomId, \"m.room.plumbing\", { status: status }).then(\r\n        () => {\r\n            sendResponse(event, {\r\n                success: true,\r\n            });\r\n        },\r\n        (err) => {\r\n            sendError(event, err.message ? err.message : _t(\"Failed to send request.\"), err);\r\n        },\r\n    );\r\n}\r\n\r\nfunction setBotOptions(event: MessageEvent<any>, roomId: string, userId: string): void {\r\n    logger.log(`Received request to set options for bot ${userId} in room ${roomId}`);\r\n    const client = MatrixClientPeg.get();\r\n    if (!client) {\r\n        sendError(event, _t(\"You need to be logged in.\"));\r\n        return;\r\n    }\r\n    client.sendStateEvent(roomId, \"m.room.bot.options\", event.data.content, \"_\" + userId).then(\r\n        () => {\r\n            sendResponse(event, {\r\n                success: true,\r\n            });\r\n        },\r\n        (err) => {\r\n            sendError(event, err.message ? err.message : _t(\"Failed to send request.\"), err);\r\n        },\r\n    );\r\n}\r\n\r\nasync function setBotPower(\r\n    event: MessageEvent<any>,\r\n    roomId: string,\r\n    userId: string,\r\n    level: number,\r\n    ignoreIfGreater?: boolean,\r\n): Promise<void> {\r\n    if (!(Number.isInteger(level) && level >= 0)) {\r\n        sendError(event, _t(\"Power level must be positive integer.\"));\r\n        return;\r\n    }\r\n\r\n    logger.log(`Received request to set power level to ${level} for bot ${userId} in room ${roomId}.`);\r\n    const client = MatrixClientPeg.get();\r\n    if (!client) {\r\n        sendError(event, _t(\"You need to be logged in.\"));\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const powerLevels = await client.getStateEvent(roomId, \"m.room.power_levels\", \"\");\r\n\r\n        // If the PL is equal to or greater than the requested PL, ignore.\r\n        if (ignoreIfGreater === true) {\r\n            // As per https://matrix.org/docs/spec/client_server/r0.6.0#m-room-power-levels\r\n            const currentPl = powerLevels.users?.[userId] ?? powerLevels.users_default ?? 0;\r\n            if (currentPl >= level) {\r\n                return sendResponse(event, {\r\n                    success: true,\r\n                });\r\n            }\r\n        }\r\n        await client.setPowerLevel(\r\n            roomId,\r\n            userId,\r\n            level,\r\n            new MatrixEvent({\r\n                type: \"m.room.power_levels\",\r\n                content: powerLevels,\r\n            }),\r\n        );\r\n        return sendResponse(event, {\r\n            success: true,\r\n        });\r\n    } catch (err) {\r\n        sendError(event, err.message ? err.message : _t(\"Failed to send request.\"), err);\r\n    }\r\n}\r\n\r\nfunction getMembershipState(event: MessageEvent<any>, roomId: string, userId: string): void {\r\n    logger.log(`membership_state of ${userId} in room ${roomId} requested.`);\r\n    returnStateEvent(event, roomId, \"m.room.member\", userId);\r\n}\r\n\r\nfunction getJoinRules(event: MessageEvent<any>, roomId: string): void {\r\n    logger.log(`join_rules of ${roomId} requested.`);\r\n    returnStateEvent(event, roomId, \"m.room.join_rules\", \"\");\r\n}\r\n\r\nfunction botOptions(event: MessageEvent<any>, roomId: string, userId: string): void {\r\n    logger.log(`bot_options of ${userId} in room ${roomId} requested.`);\r\n    returnStateEvent(event, roomId, \"m.room.bot.options\", \"_\" + userId);\r\n}\r\n\r\nfunction getMembershipCount(event: MessageEvent<any>, roomId: string): void {\r\n    const client = MatrixClientPeg.get();\r\n    if (!client) {\r\n        sendError(event, _t(\"You need to be logged in.\"));\r\n        return;\r\n    }\r\n    const room = client.getRoom(roomId);\r\n    if (!room) {\r\n        sendError(event, _t(\"This room is not recognised.\"));\r\n        return;\r\n    }\r\n    const count = room.getJoinedMemberCount();\r\n    sendResponse(event, count);\r\n}\r\n\r\nfunction canSendEvent(event: MessageEvent<any>, roomId: string): void {\r\n    const evType = \"\" + event.data.event_type; // force stringify\r\n    const isState = Boolean(event.data.is_state);\r\n    const client = MatrixClientPeg.get();\r\n    if (!client) {\r\n        sendError(event, _t(\"You need to be logged in.\"));\r\n        return;\r\n    }\r\n    const room = client.getRoom(roomId);\r\n    if (!room) {\r\n        sendError(event, _t(\"This room is not recognised.\"));\r\n        return;\r\n    }\r\n    if (room.getMyMembership() !== \"join\") {\r\n        sendError(event, _t(\"You are not in this room.\"));\r\n        return;\r\n    }\r\n    const me = client.credentials.userId!;\r\n\r\n    let canSend = false;\r\n    if (isState) {\r\n        canSend = room.currentState.maySendStateEvent(evType, me);\r\n    } else {\r\n        canSend = room.currentState.maySendEvent(evType, me);\r\n    }\r\n\r\n    if (!canSend) {\r\n        sendError(event, _t(\"You do not have permission to do that in this room.\"));\r\n        return;\r\n    }\r\n\r\n    sendResponse(event, true);\r\n}\r\n\r\nfunction returnStateEvent(event: MessageEvent<any>, roomId: string, eventType: string, stateKey: string): void {\r\n    const client = MatrixClientPeg.get();\r\n    if (!client) {\r\n        sendError(event, _t(\"You need to be logged in.\"));\r\n        return;\r\n    }\r\n    const room = client.getRoom(roomId);\r\n    if (!room) {\r\n        sendError(event, _t(\"This room is not recognised.\"));\r\n        return;\r\n    }\r\n    const stateEvent = room.currentState.getStateEvents(eventType, stateKey);\r\n    if (!stateEvent) {\r\n        sendResponse(event, null);\r\n        return;\r\n    }\r\n    sendResponse(event, stateEvent.getContent());\r\n}\r\n\r\nasync function getOpenIdToken(event: MessageEvent<any>): Promise<void> {\r\n    try {\r\n        const tokenObject = await MatrixClientPeg.get().getOpenIdToken();\r\n        sendResponse(event, tokenObject);\r\n    } catch (ex) {\r\n        logger.warn(\"Unable to fetch openId token.\", ex);\r\n        sendError(event, \"Unable to fetch openId token.\");\r\n    }\r\n}\r\n\r\nasync function sendEvent(\r\n    event: MessageEvent<{\r\n        type: string;\r\n        state_key?: string;\r\n        content?: IContent;\r\n    }>,\r\n    roomId: string,\r\n): Promise<void> {\r\n    const eventType = event.data.type;\r\n    const stateKey = event.data.state_key;\r\n    const content = event.data.content;\r\n\r\n    if (typeof eventType !== \"string\") {\r\n        sendError(event, _t(\"Failed to send event\"), new Error(\"Invalid 'type' in request\"));\r\n        return;\r\n    }\r\n    const allowedEventTypes = [\"m.widgets\", \"im.vector.modular.widgets\", \"io.element.integrations.installations\"];\r\n    if (!allowedEventTypes.includes(eventType)) {\r\n        sendError(event, _t(\"Failed to send event\"), new Error(\"Disallowed 'type' in request\"));\r\n        return;\r\n    }\r\n\r\n    if (!content || typeof content !== \"object\") {\r\n        sendError(event, _t(\"Failed to send event\"), new Error(\"Invalid 'content' in request\"));\r\n        return;\r\n    }\r\n\r\n    const client = MatrixClientPeg.get();\r\n    if (!client) {\r\n        sendError(event, _t(\"You need to be logged in.\"));\r\n        return;\r\n    }\r\n\r\n    const room = client.getRoom(roomId);\r\n    if (!room) {\r\n        sendError(event, _t(\"This room is not recognised.\"));\r\n        return;\r\n    }\r\n\r\n    if (stateKey !== undefined) {\r\n        // state event\r\n        try {\r\n            const res = await client.sendStateEvent(roomId, eventType, content, stateKey);\r\n            sendResponse(event, {\r\n                room_id: roomId,\r\n                event_id: res.event_id,\r\n            });\r\n        } catch (e) {\r\n            sendError(event, _t(\"Failed to send event\"), e as Error);\r\n            return;\r\n        }\r\n    } else {\r\n        // message event\r\n        sendError(event, _t(\"Failed to send event\"), new Error(\"Sending message events is not implemented\"));\r\n        return;\r\n    }\r\n}\r\n\r\nasync function readEvents(\r\n    event: MessageEvent<{\r\n        type: string;\r\n        state_key?: string | boolean;\r\n        limit?: number;\r\n    }>,\r\n    roomId: string,\r\n): Promise<void> {\r\n    const eventType = event.data.type;\r\n    const stateKey = event.data.state_key;\r\n    const limit = event.data.limit;\r\n\r\n    if (typeof eventType !== \"string\") {\r\n        sendError(event, _t(\"Failed to read events\"), new Error(\"Invalid 'type' in request\"));\r\n        return;\r\n    }\r\n    const allowedEventTypes = [\r\n        \"m.room.power_levels\",\r\n        \"m.room.encryption\",\r\n        \"m.room.member\",\r\n        \"m.room.name\",\r\n        \"m.widgets\",\r\n        \"im.vector.modular.widgets\",\r\n        \"io.element.integrations.installations\",\r\n    ];\r\n    if (!allowedEventTypes.includes(eventType)) {\r\n        sendError(event, _t(\"Failed to read events\"), new Error(\"Disallowed 'type' in request\"));\r\n        return;\r\n    }\r\n\r\n    let effectiveLimit: number;\r\n    if (limit !== undefined) {\r\n        if (typeof limit !== \"number\" || limit < 0) {\r\n            sendError(event, _t(\"Failed to read events\"), new Error(\"Invalid 'limit' in request\"));\r\n            return;\r\n        }\r\n        effectiveLimit = Math.min(limit, Number.MAX_SAFE_INTEGER);\r\n    } else {\r\n        effectiveLimit = Number.MAX_SAFE_INTEGER;\r\n    }\r\n\r\n    const client = MatrixClientPeg.get();\r\n    if (!client) {\r\n        sendError(event, _t(\"You need to be logged in.\"));\r\n        return;\r\n    }\r\n\r\n    const room = client.getRoom(roomId);\r\n    if (!room) {\r\n        sendError(event, _t(\"This room is not recognised.\"));\r\n        return;\r\n    }\r\n\r\n    if (stateKey !== undefined) {\r\n        // state events\r\n        if (typeof stateKey !== \"string\" && stateKey !== true) {\r\n            sendError(event, _t(\"Failed to read events\"), new Error(\"Invalid 'state_key' in request\"));\r\n            return;\r\n        }\r\n        // When `true` is passed for state key, get events with any state key.\r\n        const effectiveStateKey = stateKey === true ? undefined : stateKey;\r\n\r\n        let events: MatrixEvent[] = [];\r\n        events = events.concat(room.currentState.getStateEvents(eventType, effectiveStateKey as string) || []);\r\n        events = events.slice(0, effectiveLimit);\r\n\r\n        sendResponse(event, {\r\n            events: events.map((e) => e.getEffectiveEvent()),\r\n        });\r\n        return;\r\n    } else {\r\n        // message events\r\n        sendError(event, _t(\"Failed to read events\"), new Error(\"Reading message events is not implemented\"));\r\n        return;\r\n    }\r\n}\r\n\r\nconst onMessage = function (event: MessageEvent<any>): void {\r\n    if (!event.origin) {\r\n        // @ts-ignore - stupid chrome\r\n        event.origin = event.originalEvent.origin;\r\n    }\r\n\r\n    // Check that the integrations UI URL starts with the origin of the event\r\n    // This means the URL could contain a path (like /develop) and still be used\r\n    // to validate event origins, which do not specify paths.\r\n    // (See https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\r\n    let configUrl: URL | undefined;\r\n    try {\r\n        if (!openManagerUrl) openManagerUrl = IntegrationManagers.sharedInstance().getPrimaryManager()?.uiUrl;\r\n        configUrl = new URL(openManagerUrl!);\r\n    } catch (e) {\r\n        // No integrations UI URL, ignore silently.\r\n        return;\r\n    }\r\n    let eventOriginUrl: URL;\r\n    try {\r\n        eventOriginUrl = new URL(event.origin);\r\n    } catch (e) {\r\n        return;\r\n    }\r\n    // TODO -- Scalar postMessage API should be namespaced with event.data.api field\r\n    // Fix following \"if\" statement to respond only to specific API messages.\r\n    if (\r\n        configUrl.origin !== eventOriginUrl.origin ||\r\n        !event.data.action ||\r\n        event.data.api // Ignore messages with specific API set\r\n    ) {\r\n        // don't log this - debugging APIs and browser add-ons like to spam\r\n        // postMessage which floods the log otherwise\r\n        return;\r\n    }\r\n\r\n    if (event.data.action === Action.CloseScalar) {\r\n        dis.dispatch({ action: Action.CloseScalar });\r\n        sendResponse(event, null);\r\n        return;\r\n    }\r\n\r\n    const roomId = event.data.room_id;\r\n    const userId = event.data.user_id;\r\n\r\n    if (!roomId) {\r\n        // These APIs don't require roomId\r\n        if (event.data.action === Action.GetWidgets) {\r\n            getWidgets(event, null);\r\n            return;\r\n        } else if (event.data.action === Action.SetWidget) {\r\n            setWidget(event, null);\r\n            return;\r\n        } else if (event.data.action === Action.GetOpenIdToken) {\r\n            getOpenIdToken(event);\r\n            return;\r\n        } else {\r\n            sendError(event, _t(\"Missing room_id in request\"));\r\n            return;\r\n        }\r\n    }\r\n\r\n    if (roomId !== SdkContextClass.instance.roomViewStore.getRoomId()) {\r\n        sendError(event, _t(\"Room %(roomId)s not visible\", { roomId: roomId }));\r\n        return;\r\n    }\r\n\r\n    // Get and set room-based widgets\r\n    if (event.data.action === Action.GetWidgets) {\r\n        getWidgets(event, roomId);\r\n        return;\r\n    } else if (event.data.action === Action.SetWidget) {\r\n        setWidget(event, roomId);\r\n        return;\r\n    }\r\n\r\n    // These APIs don't require userId\r\n    if (event.data.action === Action.JoinRulesState) {\r\n        getJoinRules(event, roomId);\r\n        return;\r\n    } else if (event.data.action === Action.SetPlumbingState) {\r\n        setPlumbingState(event, roomId, event.data.status);\r\n        return;\r\n    } else if (event.data.action === Action.GetMembershipCount) {\r\n        getMembershipCount(event, roomId);\r\n        return;\r\n    } else if (event.data.action === Action.GetRoomEncryptionState) {\r\n        getRoomEncState(event, roomId);\r\n        return;\r\n    } else if (event.data.action === Action.CanSendEvent) {\r\n        canSendEvent(event, roomId);\r\n        return;\r\n    } else if (event.data.action === Action.SendEvent) {\r\n        sendEvent(event, roomId);\r\n        return;\r\n    } else if (event.data.action === Action.ReadEvents) {\r\n        readEvents(event, roomId);\r\n        return;\r\n    }\r\n\r\n    if (!userId) {\r\n        sendError(event, _t(\"Missing user_id in request\"));\r\n        return;\r\n    }\r\n    switch (event.data.action) {\r\n        case Action.MembershipState:\r\n            getMembershipState(event, roomId, userId);\r\n            break;\r\n        case Action.invite:\r\n            inviteUser(event, roomId, userId);\r\n            break;\r\n        case Action.Kick:\r\n            kickUser(event, roomId, userId);\r\n            break;\r\n        case Action.BotOptions:\r\n            botOptions(event, roomId, userId);\r\n            break;\r\n        case Action.SetBotOptions:\r\n            setBotOptions(event, roomId, userId);\r\n            break;\r\n        case Action.SetBotPower:\r\n            setBotPower(event, roomId, userId, event.data.level, event.data.ignoreIfGreater);\r\n            break;\r\n        default:\r\n            logger.warn(\"Unhandled postMessage event with action '\" + event.data.action + \"'\");\r\n            break;\r\n    }\r\n};\r\n\r\nlet listenerCount = 0;\r\nlet openManagerUrl: string | undefined;\r\n\r\nexport function startListening(): void {\r\n    if (listenerCount === 0) {\r\n        window.addEventListener(\"message\", onMessage, false);\r\n    }\r\n    listenerCount += 1;\r\n}\r\n\r\nexport function stopListening(): void {\r\n    listenerCount -= 1;\r\n    if (listenerCount === 0) {\r\n        window.removeEventListener(\"message\", onMessage);\r\n    }\r\n    if (listenerCount < 0) {\r\n        // Make an error so we get a stack trace\r\n        const e = new Error(\"ScalarMessaging: mismatched startListening / stopListening detected.\" + \" Negative count\");\r\n        logger.error(e);\r\n    }\r\n}\r\n"],"mappings":"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"}