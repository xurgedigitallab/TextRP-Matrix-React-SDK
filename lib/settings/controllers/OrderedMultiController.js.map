{"version":3,"file":"OrderedMultiController.js","names":["_SettingController","_interopRequireDefault","require","OrderedMultiController","SettingController","constructor","controllers","getValueOverride","level","roomId","calculatedValue","calculatedAtLevel","controller","override","undefined","onChange","newValue","settingDisabled","exports"],"sources":["../../../src/settings/controllers/OrderedMultiController.ts"],"sourcesContent":["/*\r\nCopyright 2020 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport SettingController from \"./SettingController\";\r\nimport { SettingLevel } from \"../SettingLevel\";\r\n\r\n/**\r\n * Allows for multiple controllers to affect a setting. The first controller\r\n * provided to this class which overrides the setting value will affect\r\n * the value - other controllers are not called. Change notification handlers\r\n * are proxied through to all controllers.\r\n *\r\n * Similarly, the first controller which indicates that a setting is disabled\r\n * will be used - other controllers will not be considered.\r\n */\r\nexport class OrderedMultiController extends SettingController {\r\n    public constructor(public readonly controllers: SettingController[]) {\r\n        super();\r\n    }\r\n\r\n    public getValueOverride(\r\n        level: SettingLevel,\r\n        roomId: string,\r\n        calculatedValue: any,\r\n        calculatedAtLevel: SettingLevel | null,\r\n    ): any {\r\n        for (const controller of this.controllers) {\r\n            const override = controller.getValueOverride(level, roomId, calculatedValue, calculatedAtLevel);\r\n            if (override !== undefined && override !== null) return override;\r\n        }\r\n        return null; // no override\r\n    }\r\n\r\n    public onChange(level: SettingLevel, roomId: string, newValue: any): void {\r\n        for (const controller of this.controllers) {\r\n            controller.onChange(level, roomId, newValue);\r\n        }\r\n    }\r\n\r\n    public get settingDisabled(): boolean {\r\n        for (const controller of this.controllers) {\r\n            if (controller.settingDisabled) return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"],"mappings":";;;;;;;AAgBA,IAAAA,kBAAA,GAAAC,sBAAA,CAAAC,OAAA;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,sBAAsB,SAASC,0BAAiB,CAAC;EACnDC,WAAWA,CAAiBC,WAAgC,EAAE;IACjE,KAAK,CAAC,CAAC;IAAC,KADuBA,WAAgC,GAAhCA,WAAgC;EAEnE;EAEOC,gBAAgBA,CACnBC,KAAmB,EACnBC,MAAc,EACdC,eAAoB,EACpBC,iBAAsC,EACnC;IACH,KAAK,MAAMC,UAAU,IAAI,IAAI,CAACN,WAAW,EAAE;MACvC,MAAMO,QAAQ,GAAGD,UAAU,CAACL,gBAAgB,CAACC,KAAK,EAAEC,MAAM,EAAEC,eAAe,EAAEC,iBAAiB,CAAC;MAC/F,IAAIE,QAAQ,KAAKC,SAAS,IAAID,QAAQ,KAAK,IAAI,EAAE,OAAOA,QAAQ;IACpE;IACA,OAAO,IAAI,CAAC,CAAC;EACjB;;EAEOE,QAAQA,CAACP,KAAmB,EAAEC,MAAc,EAAEO,QAAa,EAAQ;IACtE,KAAK,MAAMJ,UAAU,IAAI,IAAI,CAACN,WAAW,EAAE;MACvCM,UAAU,CAACG,QAAQ,CAACP,KAAK,EAAEC,MAAM,EAAEO,QAAQ,CAAC;IAChD;EACJ;EAEA,IAAWC,eAAeA,CAAA,EAAY;IAClC,KAAK,MAAML,UAAU,IAAI,IAAI,CAACN,WAAW,EAAE;MACvC,IAAIM,UAAU,CAACK,eAAe,EAAE,OAAO,IAAI;IAC/C;IACA,OAAO,KAAK;EAChB;AACJ;AAACC,OAAA,CAAAf,sBAAA,GAAAA,sBAAA"}