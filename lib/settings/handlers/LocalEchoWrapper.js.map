{"version":3,"file":"LocalEchoWrapper.js","names":["_SettingsHandler","_interopRequireDefault","require","LocalEchoWrapper","SettingsHandler","constructor","handler","level","_defineProperty2","default","getValue","settingName","roomId","cacheRoomId","bySetting","cache","hasOwnProperty","setValue","newValue","currentValue","handlerPromise","watchers","notifyUpdate","e","canSetValue","isSupported","exports"],"sources":["../../../src/settings/handlers/LocalEchoWrapper.ts"],"sourcesContent":["/*\r\nCopyright 2017 Travis Ralston\r\nCopyright 2019, 2020 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport SettingsHandler from \"./SettingsHandler\";\r\nimport { SettingLevel } from \"../SettingLevel\";\r\n\r\n/**\r\n * A wrapper for a SettingsHandler that performs local echo on\r\n * changes to settings. This wrapper will use the underlying\r\n * handler as much as possible to ensure values are not stale.\r\n */\r\nexport default class LocalEchoWrapper extends SettingsHandler {\r\n    private cache: {\r\n        [settingName: string]: {\r\n            [roomId: string]: any;\r\n        };\r\n    } = {};\r\n\r\n    /**\r\n     * Creates a new local echo wrapper\r\n     * @param {SettingsHandler} handler The handler to wrap\r\n     * @param {SettingLevel} level The level to notify updates at\r\n     */\r\n    public constructor(private readonly handler: SettingsHandler, private readonly level: SettingLevel) {\r\n        super();\r\n    }\r\n\r\n    public getValue(settingName: string, roomId: string): any {\r\n        const cacheRoomId = roomId ?? \"UNDEFINED\"; // avoid weird keys\r\n        const bySetting = this.cache[settingName];\r\n        if (bySetting?.hasOwnProperty(cacheRoomId)) {\r\n            return bySetting[cacheRoomId];\r\n        }\r\n\r\n        return this.handler.getValue(settingName, roomId);\r\n    }\r\n\r\n    public async setValue(settingName: string, roomId: string, newValue: any): Promise<void> {\r\n        if (!this.cache[settingName]) this.cache[settingName] = {};\r\n        const bySetting = this.cache[settingName];\r\n\r\n        const cacheRoomId = roomId ?? \"UNDEFINED\"; // avoid weird keys\r\n        bySetting[cacheRoomId] = newValue;\r\n\r\n        const currentValue = this.handler.getValue(settingName, roomId);\r\n        const handlerPromise = this.handler.setValue(settingName, roomId, newValue);\r\n        this.handler.watchers?.notifyUpdate(settingName, roomId, this.level, newValue);\r\n\r\n        try {\r\n            await handlerPromise;\r\n        } catch (e) {\r\n            // notify of a rollback\r\n            this.handler.watchers?.notifyUpdate(settingName, roomId, this.level, currentValue);\r\n        } finally {\r\n            // only expire the cache if our value hasn't been overwritten yet\r\n            if (bySetting[cacheRoomId] === newValue) {\r\n                delete bySetting[cacheRoomId];\r\n            }\r\n        }\r\n    }\r\n\r\n    public canSetValue(settingName: string, roomId: string): boolean {\r\n        return this.handler.canSetValue(settingName, roomId);\r\n    }\r\n\r\n    public isSupported(): boolean {\r\n        return this.handler.isSupported();\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;AAiBA,IAAAA,gBAAA,GAAAC,sBAAA,CAAAC,OAAA;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACe,MAAMC,gBAAgB,SAASC,wBAAe,CAAC;EAO1D;AACJ;AACA;AACA;AACA;EACWC,WAAWA,CAAkBC,OAAwB,EAAmBC,KAAmB,EAAE;IAChG,KAAK,CAAC,CAAC;IAAC,KADwBD,OAAwB,GAAxBA,OAAwB;IAAA,KAAmBC,KAAmB,GAAnBA,KAAmB;IAAA,IAAAC,gBAAA,CAAAC,OAAA,iBAP9F,CAAC,CAAC;EASN;EAEOC,QAAQA,CAACC,WAAmB,EAAEC,MAAc,EAAO;IACtD,MAAMC,WAAW,GAAGD,MAAM,IAAI,WAAW,CAAC,CAAC;IAC3C,MAAME,SAAS,GAAG,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC;IACzC,IAAIG,SAAS,EAAEE,cAAc,CAACH,WAAW,CAAC,EAAE;MACxC,OAAOC,SAAS,CAACD,WAAW,CAAC;IACjC;IAEA,OAAO,IAAI,CAACP,OAAO,CAACI,QAAQ,CAACC,WAAW,EAAEC,MAAM,CAAC;EACrD;EAEA,MAAaK,QAAQA,CAACN,WAAmB,EAAEC,MAAc,EAAEM,QAAa,EAAiB;IACrF,IAAI,CAAC,IAAI,CAACH,KAAK,CAACJ,WAAW,CAAC,EAAE,IAAI,CAACI,KAAK,CAACJ,WAAW,CAAC,GAAG,CAAC,CAAC;IAC1D,MAAMG,SAAS,GAAG,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC;IAEzC,MAAME,WAAW,GAAGD,MAAM,IAAI,WAAW,CAAC,CAAC;IAC3CE,SAAS,CAACD,WAAW,CAAC,GAAGK,QAAQ;IAEjC,MAAMC,YAAY,GAAG,IAAI,CAACb,OAAO,CAACI,QAAQ,CAACC,WAAW,EAAEC,MAAM,CAAC;IAC/D,MAAMQ,cAAc,GAAG,IAAI,CAACd,OAAO,CAACW,QAAQ,CAACN,WAAW,EAAEC,MAAM,EAAEM,QAAQ,CAAC;IAC3E,IAAI,CAACZ,OAAO,CAACe,QAAQ,EAAEC,YAAY,CAACX,WAAW,EAAEC,MAAM,EAAE,IAAI,CAACL,KAAK,EAAEW,QAAQ,CAAC;IAE9E,IAAI;MACA,MAAME,cAAc;IACxB,CAAC,CAAC,OAAOG,CAAC,EAAE;MACR;MACA,IAAI,CAACjB,OAAO,CAACe,QAAQ,EAAEC,YAAY,CAACX,WAAW,EAAEC,MAAM,EAAE,IAAI,CAACL,KAAK,EAAEY,YAAY,CAAC;IACtF,CAAC,SAAS;MACN;MACA,IAAIL,SAAS,CAACD,WAAW,CAAC,KAAKK,QAAQ,EAAE;QACrC,OAAOJ,SAAS,CAACD,WAAW,CAAC;MACjC;IACJ;EACJ;EAEOW,WAAWA,CAACb,WAAmB,EAAEC,MAAc,EAAW;IAC7D,OAAO,IAAI,CAACN,OAAO,CAACkB,WAAW,CAACb,WAAW,EAAEC,MAAM,CAAC;EACxD;EAEOa,WAAWA,CAAA,EAAY;IAC1B,OAAO,IAAI,CAACnB,OAAO,CAACmB,WAAW,CAAC,CAAC;EACrC;AACJ;AAACC,OAAA,CAAAjB,OAAA,GAAAN,gBAAA"}