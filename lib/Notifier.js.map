{"version":3,"file":"Notifier.js","names":["_event","require","_room","_client","_logger","_event2","_location","_sync","_MatrixClientPeg","_PosthogAnalytics","_SdkConfig","_interopRequireDefault","_PlatformPeg","TextForEvent","_interopRequireWildcard","Avatar","_dispatcher","_languageHandler","_Modal","_SettingsStore","_DesktopNotificationsToast","_SettingLevel","_NotificationControllers","_UserActivity","_Media","_ErrorDialog","_LegacyCallHandler","_VoipUserMapper","_SDKContext","_notifications","_IncomingCallToast","_ToastStore","_Call","_voiceBroadcast","_getSenderName","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","MAX_PENDING_ENCRYPTED","msgTypeHandlers","MsgType","KeyVerificationRequest","event","name","sender","_t","M_LOCATION","textForLocationEvent","altName","Audio","getContent","VoiceBroadcastChunkEventType","sequence","senderName","getSenderName","textForEvent","MatrixClientPeg","NotifierClass","constructor","_defineProperty2","state","prevState","data","SyncState","Syncing","isSyncing","Stopped","Error","includes","fromCache","createLocalNotificationSettingsIfNeeded","ev","room","toStartOfTimeline","removed","liveEvent","getSender","getUserId","decryptEventIfNeeded","isBeingDecrypted","isDecryptionFailure","pendingEncryptedEventIds","push","getId","length","shift","evaluateEvent","idx","indexOf","splice","getUnreadNotificationCount","plaf","PlatformPeg","notifsByRoom","roomId","undefined","notif","clearNotification","notificationMessageForEvent","msgType","msgtype","displayPopupNotification","cli","supportsNotifications","maySendNotifications","localNotificationsAreSilenced","msg","title","body","getType","isBodyEnabled","avatarUrl","SettingsStore","getValue","avatarUrlForMember","displayNotification","getRoomId","getSoundForRoom","content","url","logger","warn","startsWith","mediaFromMxc","srcHttp","type","size","playAudioNotification","sound","log","selector","document","querySelector","audioElement","error","appendChild","play","ex","start","on","RoomEvent","Timeline","onEvent","Receipt","onRoomReceipt","MatrixEventEvent","Decrypted","onEventDecrypted","ClientEvent","Sync","onSyncStateChange","toolbarHidden","stop","removeListener","supportsDesktopNotifications","setEnabled","enable","callback","isLevelSupported","SettingLevel","DEVICE","setValue","isEnabled","requestNotificationPermission","then","result","brand","SdkConfig","description","Modal","createDialog","ErrorDialog","PosthogAnalytics","instance","trackEvent","eventName","permission","granted","dis","dispatch","action","value","setPromptHidden","isPossible","isAudioEnabled","hidden","persistent","arguments","hideNotificationsToast","global","localStorage","setItem","String","shouldShowPrompt","client","isGuest","isPushNotifyDisabled","isPromptHidden","getItem","VoiceBroadcastInfoEventType","LegacyCallHandler","getSupportsVirtualRooms","nativeRoomId","VoipUserMapper","sharedInstance","nativeRoomForVirtualRoom","getRoom","actions","getPushActionsForEvent","notify","performCustomEventHandling","store","SdkContextClass","roomViewStore","isViewingRoom","threadId","threadRootId","isViewingThread","getThreadId","isViewingEventTimeline","UserActivity","userActiveRecently","hasDialogs","tweaks","loudNotification","ElementCall","CALL_EVENT_TYPE","names","ToastStore","addOrReplaceToast","getIncomingCallToastKey","getStateKey","priority","component","IncomingCallToast","bodyClassName","props","callEvent","window","mxNotifier","_default","exports","Notifier"],"sources":["../src/Notifier.ts"],"sourcesContent":["/*\r\nCopyright 2015, 2016 OpenMarket Ltd\r\nCopyright 2017 Vector Creations Ltd\r\nCopyright 2017 New Vector Ltd\r\nCopyright 2020 The Matrix.org Foundation C.I.C.\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n*/\r\n\r\nimport { MatrixEvent, MatrixEventEvent } from \"matrix-js-sdk/src/models/event\";\r\nimport { Room, RoomEvent } from \"matrix-js-sdk/src/models/room\";\r\nimport { ClientEvent } from \"matrix-js-sdk/src/client\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\nimport { MsgType } from \"matrix-js-sdk/src/@types/event\";\r\nimport { M_LOCATION } from \"matrix-js-sdk/src/@types/location\";\r\nimport { PermissionChanged as PermissionChangedEvent } from \"@matrix-org/analytics-events/types/typescript/PermissionChanged\";\r\nimport { ISyncStateData, SyncState } from \"matrix-js-sdk/src/sync\";\r\nimport { IRoomTimelineData } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport { MatrixClientPeg } from \"./MatrixClientPeg\";\r\nimport { PosthogAnalytics } from \"./PosthogAnalytics\";\r\nimport SdkConfig from \"./SdkConfig\";\r\nimport PlatformPeg from \"./PlatformPeg\";\r\nimport * as TextForEvent from \"./TextForEvent\";\r\nimport * as Avatar from \"./Avatar\";\r\nimport dis from \"./dispatcher/dispatcher\";\r\nimport { _t } from \"./languageHandler\";\r\nimport Modal from \"./Modal\";\r\nimport SettingsStore from \"./settings/SettingsStore\";\r\nimport { hideToast as hideNotificationsToast } from \"./toasts/DesktopNotificationsToast\";\r\nimport { SettingLevel } from \"./settings/SettingLevel\";\r\nimport { isPushNotifyDisabled } from \"./settings/controllers/NotificationControllers\";\r\nimport UserActivity from \"./UserActivity\";\r\nimport { mediaFromMxc } from \"./customisations/Media\";\r\nimport ErrorDialog from \"./components/views/dialogs/ErrorDialog\";\r\nimport LegacyCallHandler from \"./LegacyCallHandler\";\r\nimport VoipUserMapper from \"./VoipUserMapper\";\r\nimport { SdkContextClass } from \"./contexts/SDKContext\";\r\nimport { localNotificationsAreSilenced, createLocalNotificationSettingsIfNeeded } from \"./utils/notifications\";\r\nimport { getIncomingCallToastKey, IncomingCallToast } from \"./toasts/IncomingCallToast\";\r\nimport ToastStore from \"./stores/ToastStore\";\r\nimport { ElementCall } from \"./models/Call\";\r\nimport { VoiceBroadcastChunkEventType, VoiceBroadcastInfoEventType } from \"./voice-broadcast\";\r\nimport { getSenderName } from \"./utils/event/getSenderName\";\r\n\r\n/*\r\n * Dispatches:\r\n * {\r\n *   action: \"notifier_enabled\",\r\n *   value: boolean\r\n * }\r\n */\r\n\r\nconst MAX_PENDING_ENCRYPTED = 20;\r\n\r\n/*\r\nOverride both the content body and the TextForEvent handler for specific msgtypes, in notifications.\r\nThis is useful when the content body contains fallback text that would explain that the client can't handle a particular\r\ntype of tile.\r\n*/\r\nconst msgTypeHandlers: Record<string, (event: MatrixEvent) => string | null> = {\r\n    [MsgType.KeyVerificationRequest]: (event: MatrixEvent) => {\r\n        const name = (event.sender || {}).name;\r\n        return _t(\"%(name)s is requesting verification\", { name });\r\n    },\r\n    [M_LOCATION.name]: (event: MatrixEvent) => {\r\n        return TextForEvent.textForLocationEvent(event)();\r\n    },\r\n    [M_LOCATION.altName]: (event: MatrixEvent) => {\r\n        return TextForEvent.textForLocationEvent(event)();\r\n    },\r\n    [MsgType.Audio]: (event: MatrixEvent): string | null => {\r\n        if (event.getContent()?.[VoiceBroadcastChunkEventType]) {\r\n            if (event.getContent()?.[VoiceBroadcastChunkEventType]?.sequence === 1) {\r\n                // Show a notification for the first broadcast chunk.\r\n                // At this point a user received something to listen to.\r\n                return _t(\"%(senderName)s started a voice broadcast\", { senderName: getSenderName(event) });\r\n            }\r\n\r\n            // Mute other broadcast chunks\r\n            return null;\r\n        }\r\n\r\n        return TextForEvent.textForEvent(event, MatrixClientPeg.get());\r\n    },\r\n};\r\n\r\nclass NotifierClass {\r\n    private notifsByRoom: Record<string, Notification[]> = {};\r\n\r\n    // A list of event IDs that we've received but need to wait until\r\n    // they're decrypted until we decide whether to notify for them\r\n    // or not\r\n    private pendingEncryptedEventIds: string[] = [];\r\n\r\n    private toolbarHidden?: boolean;\r\n    private isSyncing?: boolean;\r\n\r\n    public notificationMessageForEvent(ev: MatrixEvent): string | null {\r\n        const msgType = ev.getContent().msgtype;\r\n        if (msgType && msgTypeHandlers.hasOwnProperty(msgType)) {\r\n            return msgTypeHandlers[msgType](ev);\r\n        }\r\n        return TextForEvent.textForEvent(ev, MatrixClientPeg.get());\r\n    }\r\n\r\n    // XXX: exported for tests\r\n    public displayPopupNotification(ev: MatrixEvent, room: Room): void {\r\n        const plaf = PlatformPeg.get();\r\n        const cli = MatrixClientPeg.get();\r\n        if (!plaf) {\r\n            return;\r\n        }\r\n        if (!plaf.supportsNotifications() || !plaf.maySendNotifications()) {\r\n            return;\r\n        }\r\n\r\n        if (localNotificationsAreSilenced(cli)) {\r\n            return;\r\n        }\r\n\r\n        let msg = this.notificationMessageForEvent(ev);\r\n        if (!msg) return;\r\n\r\n        let title: string | undefined;\r\n        if (!ev.sender || room.name === ev.sender.name) {\r\n            title = room.name;\r\n            // notificationMessageForEvent includes sender, but we already have the sender here\r\n            const msgType = ev.getContent().msgtype;\r\n            if (ev.getContent().body && (!msgType || !msgTypeHandlers.hasOwnProperty(msgType))) {\r\n                msg = ev.getContent().body;\r\n            }\r\n        } else if (ev.getType() === \"m.room.member\") {\r\n            // context is all in the message here, we don't need\r\n            // to display sender info\r\n            title = room.name;\r\n        } else if (ev.sender) {\r\n            title = ev.sender.name + \" (\" + room.name + \")\";\r\n            // notificationMessageForEvent includes sender, but we've just out sender in the title\r\n            const msgType = ev.getContent().msgtype;\r\n            if (ev.getContent().body && (!msgType || !msgTypeHandlers.hasOwnProperty(msgType))) {\r\n                msg = ev.getContent().body;\r\n            }\r\n        }\r\n\r\n        if (!title) return;\r\n\r\n        if (!this.isBodyEnabled()) {\r\n            msg = \"\";\r\n        }\r\n\r\n        let avatarUrl: string | null = null;\r\n        if (ev.sender && !SettingsStore.getValue(\"lowBandwidth\")) {\r\n            avatarUrl = Avatar.avatarUrlForMember(ev.sender, 40, 40, \"crop\");\r\n        }\r\n\r\n        const notif = plaf.displayNotification(title, msg!, avatarUrl, room, ev);\r\n\r\n        // if displayNotification returns non-null,  the platform supports\r\n        // clearing notifications later, so keep track of this.\r\n        if (notif) {\r\n            if (this.notifsByRoom[ev.getRoomId()!] === undefined) this.notifsByRoom[ev.getRoomId()!] = [];\r\n            this.notifsByRoom[ev.getRoomId()!].push(notif);\r\n        }\r\n    }\r\n\r\n    public getSoundForRoom(roomId: string): {\r\n        url: string;\r\n        name: string;\r\n        type: string;\r\n        size: string;\r\n    } | null {\r\n        // We do no caching here because the SDK caches setting\r\n        // and the browser will cache the sound.\r\n        const content = SettingsStore.getValue(\"notificationSound\", roomId);\r\n        if (!content) {\r\n            return null;\r\n        }\r\n\r\n        if (typeof content.url !== \"string\") {\r\n            logger.warn(`${roomId} has custom notification sound event, but no url string`);\r\n            return null;\r\n        }\r\n\r\n        if (!content.url.startsWith(\"mxc://\")) {\r\n            logger.warn(`${roomId} has custom notification sound event, but url is not a mxc url`);\r\n            return null;\r\n        }\r\n\r\n        // Ideally in here we could use MSC1310 to detect the type of file, and reject it.\r\n\r\n        const url = mediaFromMxc(content.url).srcHttp;\r\n        if (!url) {\r\n            logger.warn(\"Something went wrong when generating src http url for mxc\");\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            url,\r\n            name: content.name,\r\n            type: content.type,\r\n            size: content.size,\r\n        };\r\n    }\r\n\r\n    // XXX: Exported for tests\r\n    public async playAudioNotification(ev: MatrixEvent, room: Room): Promise<void> {\r\n        const cli = MatrixClientPeg.get();\r\n        if (localNotificationsAreSilenced(cli)) {\r\n            return;\r\n        }\r\n\r\n        const sound = this.getSoundForRoom(room.roomId);\r\n        logger.log(`Got sound ${(sound && sound.name) || \"default\"} for ${room.roomId}`);\r\n\r\n        try {\r\n            const selector = document.querySelector<HTMLAudioElement>(\r\n                sound ? `audio[src='${sound.url}']` : \"#messageAudio\",\r\n            );\r\n            let audioElement = selector;\r\n            if (!audioElement) {\r\n                if (!sound) {\r\n                    logger.error(\"No audio element or sound to play for notification\");\r\n                    return;\r\n                }\r\n                audioElement = new Audio(sound.url);\r\n                if (sound.type) {\r\n                    audioElement.type = sound.type;\r\n                }\r\n                document.body.appendChild(audioElement);\r\n            }\r\n            await audioElement.play();\r\n        } catch (ex) {\r\n            logger.warn(\"Caught error when trying to fetch room notification sound:\", ex);\r\n        }\r\n    }\r\n\r\n    public start(): void {\r\n        MatrixClientPeg.get().on(RoomEvent.Timeline, this.onEvent);\r\n        MatrixClientPeg.get().on(RoomEvent.Receipt, this.onRoomReceipt);\r\n        MatrixClientPeg.get().on(MatrixEventEvent.Decrypted, this.onEventDecrypted);\r\n        MatrixClientPeg.get().on(ClientEvent.Sync, this.onSyncStateChange);\r\n        this.toolbarHidden = false;\r\n        this.isSyncing = false;\r\n    }\r\n\r\n    public stop(): void {\r\n        if (MatrixClientPeg.get()) {\r\n            MatrixClientPeg.get().removeListener(RoomEvent.Timeline, this.onEvent);\r\n            MatrixClientPeg.get().removeListener(RoomEvent.Receipt, this.onRoomReceipt);\r\n            MatrixClientPeg.get().removeListener(MatrixEventEvent.Decrypted, this.onEventDecrypted);\r\n            MatrixClientPeg.get().removeListener(ClientEvent.Sync, this.onSyncStateChange);\r\n        }\r\n        this.isSyncing = false;\r\n    }\r\n\r\n    public supportsDesktopNotifications(): boolean {\r\n        return PlatformPeg.get()?.supportsNotifications() ?? false;\r\n    }\r\n\r\n    public setEnabled(enable: boolean, callback?: () => void): void {\r\n        const plaf = PlatformPeg.get();\r\n        if (!plaf) return;\r\n\r\n        // Dev note: We don't set the \"notificationsEnabled\" setting to true here because it is a\r\n        // calculated value. It is determined based upon whether or not the master rule is enabled\r\n        // and other flags. Setting it here would cause a circular reference.\r\n\r\n        // make sure that we persist the current setting audio_enabled setting\r\n        // before changing anything\r\n        if (SettingsStore.isLevelSupported(SettingLevel.DEVICE)) {\r\n            SettingsStore.setValue(\"audioNotificationsEnabled\", null, SettingLevel.DEVICE, this.isEnabled());\r\n        }\r\n\r\n        if (enable) {\r\n            // Attempt to get permission from user\r\n            plaf.requestNotificationPermission().then((result) => {\r\n                if (result !== \"granted\") {\r\n                    // The permission request was dismissed or denied\r\n                    // TODO: Support alternative branding in messaging\r\n                    const brand = SdkConfig.get().brand;\r\n                    const description =\r\n                        result === \"denied\"\r\n                            ? _t(\r\n                                  \"%(brand)s does not have permission to send you notifications - \" +\r\n                                      \"please check your browser settings\",\r\n                                  { brand },\r\n                              )\r\n                            : _t(\"%(brand)s was not given permission to send notifications - please try again\", {\r\n                                  brand,\r\n                              });\r\n                    Modal.createDialog(ErrorDialog, {\r\n                        title: _t(\"Unable to enable Notifications\"),\r\n                        description,\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                if (callback) callback();\r\n\r\n                PosthogAnalytics.instance.trackEvent<PermissionChangedEvent>({\r\n                    eventName: \"PermissionChanged\",\r\n                    permission: \"Notification\",\r\n                    granted: true,\r\n                });\r\n                dis.dispatch({\r\n                    action: \"notifier_enabled\",\r\n                    value: true,\r\n                });\r\n            });\r\n        } else {\r\n            PosthogAnalytics.instance.trackEvent<PermissionChangedEvent>({\r\n                eventName: \"PermissionChanged\",\r\n                permission: \"Notification\",\r\n                granted: false,\r\n            });\r\n            dis.dispatch({\r\n                action: \"notifier_enabled\",\r\n                value: false,\r\n            });\r\n        }\r\n        // set the notifications_hidden flag, as the user has knowingly interacted\r\n        // with the setting we shouldn't nag them any further\r\n        this.setPromptHidden(true);\r\n    }\r\n\r\n    public isEnabled(): boolean {\r\n        return this.isPossible() && SettingsStore.getValue(\"notificationsEnabled\");\r\n    }\r\n\r\n    public isPossible(): boolean {\r\n        const plaf = PlatformPeg.get();\r\n        if (!plaf?.supportsNotifications()) return false;\r\n        if (!plaf.maySendNotifications()) return false;\r\n\r\n        return true; // possible, but not necessarily enabled\r\n    }\r\n\r\n    public isBodyEnabled(): boolean {\r\n        return this.isEnabled() && SettingsStore.getValue(\"notificationBodyEnabled\");\r\n    }\r\n\r\n    public isAudioEnabled(): boolean {\r\n        // We don't route Audio via the HTML Notifications API so it is possible regardless of other things\r\n        return SettingsStore.getValue(\"audioNotificationsEnabled\");\r\n    }\r\n\r\n    public setPromptHidden(hidden: boolean, persistent = true): void {\r\n        this.toolbarHidden = hidden;\r\n\r\n        hideNotificationsToast();\r\n\r\n        // update the info to localStorage for persistent settings\r\n        if (persistent && global.localStorage) {\r\n            global.localStorage.setItem(\"notifications_hidden\", String(hidden));\r\n        }\r\n    }\r\n\r\n    public shouldShowPrompt(): boolean {\r\n        const client = MatrixClientPeg.get();\r\n        if (!client) {\r\n            return false;\r\n        }\r\n        const isGuest = client.isGuest();\r\n        return (\r\n            !isGuest &&\r\n            this.supportsDesktopNotifications() &&\r\n            !isPushNotifyDisabled() &&\r\n            !this.isEnabled() &&\r\n            !this.isPromptHidden()\r\n        );\r\n    }\r\n\r\n    private isPromptHidden(): boolean {\r\n        // Check localStorage for any such meta data\r\n        if (global.localStorage) {\r\n            return global.localStorage.getItem(\"notifications_hidden\") === \"true\";\r\n        }\r\n\r\n        return !!this.toolbarHidden;\r\n    }\r\n\r\n    // XXX: Exported for tests\r\n    public onSyncStateChange = (state: SyncState, prevState: SyncState | null, data?: ISyncStateData): void => {\r\n        if (state === SyncState.Syncing) {\r\n            this.isSyncing = true;\r\n        } else if (state === SyncState.Stopped || state === SyncState.Error) {\r\n            this.isSyncing = false;\r\n        }\r\n\r\n        // wait for first non-cached sync to complete\r\n        if (![SyncState.Stopped, SyncState.Error].includes(state) && !data?.fromCache) {\r\n            createLocalNotificationSettingsIfNeeded(MatrixClientPeg.get());\r\n        }\r\n    };\r\n\r\n    private onEvent = (\r\n        ev: MatrixEvent,\r\n        room: Room | undefined,\r\n        toStartOfTimeline: boolean | undefined,\r\n        removed: boolean,\r\n        data: IRoomTimelineData,\r\n    ): void => {\r\n        if (!data.liveEvent) return; // only notify for new things, not old.\r\n        if (!this.isSyncing) return; // don't alert for any messages initially\r\n        if (ev.getSender() === MatrixClientPeg.get().getUserId()) return;\r\n\r\n        MatrixClientPeg.get().decryptEventIfNeeded(ev);\r\n\r\n        // If it's an encrypted event and the type is still 'm.room.encrypted',\r\n        // it hasn't yet been decrypted, so wait until it is.\r\n        if (ev.isBeingDecrypted() || ev.isDecryptionFailure()) {\r\n            this.pendingEncryptedEventIds.push(ev.getId()!);\r\n            // don't let the list fill up indefinitely\r\n            while (this.pendingEncryptedEventIds.length > MAX_PENDING_ENCRYPTED) {\r\n                this.pendingEncryptedEventIds.shift();\r\n            }\r\n            return;\r\n        }\r\n\r\n        this.evaluateEvent(ev);\r\n    };\r\n\r\n    private onEventDecrypted = (ev: MatrixEvent): void => {\r\n        // 'decrypted' means the decryption process has finished: it may have failed,\r\n        // in which case it might decrypt soon if the keys arrive\r\n        if (ev.isDecryptionFailure()) return;\r\n\r\n        const idx = this.pendingEncryptedEventIds.indexOf(ev.getId()!);\r\n        if (idx === -1) return;\r\n\r\n        this.pendingEncryptedEventIds.splice(idx, 1);\r\n        this.evaluateEvent(ev);\r\n    };\r\n\r\n    private onRoomReceipt = (ev: MatrixEvent, room: Room): void => {\r\n        if (room.getUnreadNotificationCount() === 0) {\r\n            // ideally we would clear each notification when it was read,\r\n            // but we have no way, given a read receipt, to know whether\r\n            // the receipt comes before or after an event, so we can't\r\n            // do this. Instead, clear all notifications for a room once\r\n            // there are no notifs left in that room., which is not quite\r\n            // as good but it's something.\r\n            const plaf = PlatformPeg.get();\r\n            if (!plaf) return;\r\n            if (this.notifsByRoom[room.roomId] === undefined) return;\r\n            for (const notif of this.notifsByRoom[room.roomId]) {\r\n                plaf.clearNotification(notif);\r\n            }\r\n            delete this.notifsByRoom[room.roomId];\r\n        }\r\n    };\r\n\r\n    // XXX: exported for tests\r\n    public evaluateEvent(ev: MatrixEvent): void {\r\n        // Mute notifications for broadcast info events\r\n        if (ev.getType() === VoiceBroadcastInfoEventType) return;\r\n        let roomId = ev.getRoomId()!;\r\n        if (LegacyCallHandler.instance.getSupportsVirtualRooms()) {\r\n            // Attempt to translate a virtual room to a native one\r\n            const nativeRoomId = VoipUserMapper.sharedInstance().nativeRoomForVirtualRoom(roomId);\r\n            if (nativeRoomId) {\r\n                roomId = nativeRoomId;\r\n            }\r\n        }\r\n        const room = MatrixClientPeg.get().getRoom(roomId);\r\n        if (!room) {\r\n            // e.g we are in the process of joining a room.\r\n            // Seen in the cypress lazy-loading test.\r\n            return;\r\n        }\r\n\r\n        const actions = MatrixClientPeg.get().getPushActionsForEvent(ev);\r\n\r\n        if (actions?.notify) {\r\n            this.performCustomEventHandling(ev);\r\n\r\n            const store = SdkContextClass.instance.roomViewStore;\r\n            const isViewingRoom = store.getRoomId() === room.roomId;\r\n            const threadId: string | undefined = ev.getId() !== ev.threadRootId ? ev.threadRootId : undefined;\r\n            const isViewingThread = store.getThreadId() === threadId;\r\n\r\n            const isViewingEventTimeline = isViewingRoom && (!threadId || isViewingThread);\r\n\r\n            if (isViewingEventTimeline && UserActivity.sharedInstance().userActiveRecently() && !Modal.hasDialogs()) {\r\n                // don't bother notifying as user was recently active in this room\r\n                return;\r\n            }\r\n\r\n            if (this.isEnabled()) {\r\n                this.displayPopupNotification(ev, room);\r\n            }\r\n            if (actions.tweaks.sound && this.isAudioEnabled()) {\r\n                PlatformPeg.get()?.loudNotification(ev, room);\r\n                this.playAudioNotification(ev, room);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Some events require special handling such as showing in-app toasts\r\n     */\r\n    private performCustomEventHandling(ev: MatrixEvent): void {\r\n        if (ElementCall.CALL_EVENT_TYPE.names.includes(ev.getType()) && SettingsStore.getValue(\"feature_group_calls\")) {\r\n            ToastStore.sharedInstance().addOrReplaceToast({\r\n                key: getIncomingCallToastKey(ev.getStateKey()!),\r\n                priority: 100,\r\n                component: IncomingCallToast,\r\n                bodyClassName: \"mx_IncomingCallToast\",\r\n                props: { callEvent: ev },\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nif (!window.mxNotifier) {\r\n    window.mxNotifier = new NotifierClass();\r\n}\r\n\r\nexport default window.mxNotifier;\r\nexport const Notifier: NotifierClass = window.mxNotifier;\r\n"],"mappings":"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"}